<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1988：我想和这个世界谈谈</title>
    <url>/2021/08/05/1988%EF%BC%9A%E6%88%91%E6%83%B3%E5%92%8C%E8%BF%99%E4%B8%AA%E4%B8%96%E7%95%8C%E8%B0%88%E8%B0%88/</url>
    <content><![CDATA[<ol>
<li><p>以此书纪念我每一个倒在路上的朋友，更以此书献给你，我生命里的女孩们，无论你解不解我的风情，无论我解不解你的衣扣，在此刻，我是如此地想念你，不带们</p>
</li>
<li><p>数火车是多么消磨时间的方式，唯一的缺点就是没有办法验算</p>
</li>
<li><p>无论是多么面目狰狞的人们，除了他们指着鼻子骂我以外，我其实始终都能记得他们不经意间的叹息，我不认为那是人类在压迫下容易满足的贱，而是不经意间流露出来本是同类的交流。但当我想去挖掘的时候，大地马上就把井盖给盖住了，说，朋友，你想都不要想</p>
</li>
</ol>
<span id="more"></span>

<ol start="4">
<li><p>我要从这里出发，沿着318号国道，开到那里的尽头。不要以为这只是一场肤浅的自驾游，不要以为我是无根的漂泊，我的根深深地扎在这片土地上，我一度以为自己是种子，被这季风吹来吹去，但是我终于意识到，我不是种子，我就是连着根的植物，至于我是一棵什么样的植物，我看不到我自己，那得问其他的植物，至于我为什么一直在换地方，因为我以为我扎在泥土里，但其实我扎在了流沙中。<br>这么多年来，一直是我脚下的流沙裹着我四处漂泊，它也不淹没我，它只是时不时提醒我，你没有别的选择，否则你就被风吹走了。我就这么浑浑噩噩地度过了我所有热血的岁月，被裹到东，被裹到西，连我曾经所鄙视的种子都不如。</p>
</li>
<li><p>我说，我的资讯有点爆炸，你让我记了四个人名</p>
</li>
<li><p>我发现我生命里所崇拜的都是那些热血的人们，虽然我不是一个冷血的人，但我的血液是温的，我总是喜欢看见那些热血的人们，我希望我成为他们中的一个。我总是发现，当我在发呆的时候，他们已经在思考了，当我在思考的时候，他们已经行动了，当我行动的时候，他们已经翘了，然后我又不敢行动了。翘了的他们就成为我生命里至高的仰望。我天生佩服他们，希望他们身上的血能够温热我的身体</p>
</li>
<li><p>你懂得越多，你就越像这个世界的孤儿</p>
</li>
<li><p>我愿意伸手，但我不愿意插手</p>
</li>
<li><p>因为我坚信，世界就像一堵墙，我们就像一只猫，我必须要在这个墙上留下我的抓痕，在此之前，我才不会把爪子对向自己</p>
</li>
<li><p>这就是日复一日机械的工作带给人们的恶果。它让人无一例外地忘记自己最初的理想</p>
</li>
<li><p>我就如同一只幼犬，面对着一块比自己还要大的骨头，不知道从何下口</p>
</li>
<li><p>我说，我坚信邪恶不能压倒正义。<br>他抿了一小口，说，嗯，但是他们可以定义正义和邪恶</p>
</li>
<li><p>但这对婊子和戏子都不公平，我们的一生很难对婊子动情，很难对戏子动心，纵然我对婊子动情，婊子也很少赠我真情，纵然我对戏子动心，戏子也未必还我真心</p>
</li>
<li><p>见你是比天大的事情。我想，天大地大，莫过于此</p>
</li>
<li><p>我就像这个世界，这个世界是不会变的，来适应这个世界吧</p>
</li>
<li><p>但我至少等待过，我知道你从不会来，但我从不怀疑你彼时的真心，就如同我的每一个谎言都是真心的</p>
</li>
<li><p>我拍了拍衣服，想那又如何，反正我也是被他们笼罩着的人，他们先行，我替他们收拾着因为跑太快从口袋里跌落的扑克牌，我始终跑在他们划破的气流里，不过我也不曾觉得风阻会减小一些，只是他们替我撞过了每一堵我可能要撞的高墙，摔落了每一道我可能要落进的沟壑，然后告诉我，这条路没有错，继续前行吧，但是你已经用掉了一次帮助的机会，再见了朋友。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-04</title>
    <url>/2021/05/09/2021-04/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="559bb016a7b683e087182fe3d4bdc2da3845dda9fc230d30912d8fdbf107b388">21b5bcc0e4657ce349e1a94ae87ceae1a9376f37946b70d81ac91823600fc4d803a1ed3e8fa7be80e915603c3aebda7a1a3794efaeeda38670c95035a1928cd0af7f76b9652b19b91717419ab210764e8ffeb86209895da58b8659646f579364e8184ea6a589be511dd7abd9cb341256faad0e6b48a2f404b3bb714afb3f30815ec798a6bf552c2d3b45ff2e16ec1be50986edac99379e39baf2e19596f36c13157f6065d062ab8a3694190fe30769c58e80656847439818e890ec3794934cb2b7c13b8147c006e632c010358608e240fb887ced6d2aaea9cc8662af2438deffced61148e08e60e740a60600b31b38a131fd874d7edc990a894e34a7e74dea8548ae913813b4f305cb6c29803d8b3f1e86e679048394bddd55ed392217327917b815981669f00fe53df155b35aa15e460b92a207e30e64e0973e4ff6dff86221e817ca8e9bbd11e4ec896d76c23abcc3dbc96d9cbc1e3a9cd3578c2880150768966a629892546140a94ff267b551ade6fdf363d657b99145962b8d14f5dafadaafa55893fdee5ae47cb269142188669c7f7f16ab23c651b788591b8f5b31bf3504516a3cf04dea81b9a7875f618863217449af529d8faed9cdd9f4c182f07876582fe809527735be7e9889e3bb625b7ba3d5cc5e5be7ec38fe502b39b4f15a3ee8cf1dda45fb72900bbee6d073c420eb9d55acbb477dbb528b4a27392882a41a275334f7a4b1f2bde995aa1511beb3cdd93772542cd73dd14797ad8d2df716592bb1ebf12dd6206151fe89ff445d8e7939162fe37b715910bb6a1fe76319a4585c21510821c8a4aa2441e06cf577a7a5d461ec827f53f89f07f34450023e39a67fd670da50ff72a2e5eca0178f57ab07428390c602db7b8210dfdb50d18efa428873862561f5106c3cc0e2592f7b20036952405836c45ccae2a433697963d58375ea0f113146e9dc1c4a57694b9613d60c86e99449ebe6fdc6dff438b1f4cf7fc5b82c68c002bd68ad567341d2f320c74f584d9629e1fc1ab041b51a9fcde2db59b33ba0a06600a52b5811fc6529707ecff3fd74c8c7a7738d1c6e10051c8d3bb9a76141991f9c4be8582c35348c7aae4a33b238d54182d31dded1008a447f4a6b1ed1418cf774cd1cbae887db9f1bb9bc026a4761e8aa6ec998bcb8c1d3d2e36d6a57445fc4d822ebfc74f784c3510b7c86ca63b10276f9c288d1b9bbe1b3c2fd90dfecffd8e37fe96e81ad6d78387249c713275ea8dfdc23f998236f86cfca74f8960ba558e18263904b832554fa391af7f5645b974b9a744e872587a8b689c1631c0691b82ebf0b4d1a6e915cc8bec74fdbb700e9bfb69d4f618f137e1d30a42fc54a3b678b45e8f1e0c8bce37c24b6236d618f7e2f919e84453fab4ff1e8ed818c62c4231d1656cc4d18c34faf1ac871149a050bf9155a97b51c66e0f9e67f6500a36f9e0c15cd7ff3a22dc442dd427e40c20cbf5b3ec9abec674b261b059dd5f1880873c9cdf3943296c8c4949a8fce596faf94a6f931e687701da23238bd7b16d662ffb36b796ffb6f85426931233efdd195272f5ad1ad3a0f5eebdb55ac51846947cf4f1214c7a33d4560a569fe70fa3491abf03be15dabb9b62d8dd73100bb31ad3ee49f34c334fec0f921b12562482592ca982f43684aa356234fb67e44e9a2cdf219f00e9cb1520f0b2103d8206aa9cf1325da068500596d975193be7c08b3f03d57f42fdae1776b2cac3e9c2bacd231a48d9a329352ebbc1f32d95c2048f01d5b36c680403cfc268038785831225247397f026e018e4db02117e8f5290bb9e511d24613ef82f63d8eb8f7590182ac4679e4e7171ea19ec83eb70c1a4d3a9150180b91d175ca5745bce765856e456d7f8b41d18cdd9b725d1a68670920a39d70d75be352acfd5fcf105f1d84d0cb43729d667823b3f2fa03c3ba73</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-05中</title>
    <url>/2021/05/13/2021-05%E4%B8%AD/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="434362b6d5bf1de965f6b20a54cffdd321227db468f5ff46665d506236a4830a">21b5bcc0e4657ce349e1a94ae87ceae1e652eabd69160199cdff8ea5fcfc8d1ad7c067d9df7415a4575f28dad82f855778b8e562ec1e90d857d0bc3b7aeabea32c30d50b8b4683e8c9f7f4d8abd45062160dcc9d870612ec88e83e88e9ec8054b9147b04247841e7eada34161fac903d09744daf0f799605b3f237167146dfde367cc27041c3987a44dd40c5fd4953470c6de972945241541fb5c239e3ff339718f5344d1026795cef40af977be6892a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-06</title>
    <url>/2021/06/15/2021-06/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3bcf438568863af00b2bf9b2124d692dd4fb35a0e9ada952eaecbdcb4b7cb1d1">21b5bcc0e4657ce349e1a94ae87ceae147df196a4073e9c70dd489b2c20970c7482df6c780f57ead05a8a0f8034437b7f247065939b2ecf68bdb203b1e71fb42162279677ddf339b6849f5d8ff6427b5fbfe2e251719711b9a2a12fa21687b233bd33540abe89150e6bf2ab4c28043d735971b2e32c5b0594e3e9a34280c86ff54ee91b7a7ea7b0ba573611eb7e460dfd547da7782c3f75e2e0513049fff64f5af5c36b3f1d342649f691c231cabed87eca039e484e1eb72c190d0d4b484f519bc387c5fd8b04b20e72f320c7ceb5a1c8851ad5f2b0b4720330e84d4e00f04b652b4fcf12987959f8fbaa440257f332091108cabc4640b1ff998d851212354f297c3e63bea2bca3d1485398275f4484f923321a23c70e85408ea1b9d8cb7a093aea5dd92a8f23837326c7796cadc01e2d4585e78594e7dc5071a8d3f4242cef3d5d11527ed80e32f7688066b79e5200cb5cc17116f7a70c926aba1e9b3eefb2735a9ed2cf1920f6fbb21e0cd01f4269b23d76272ba8ca2e8e0f8103b00ffdf06a87c4c3fd63e3d626b17d905fd833334899c28f1cbac8d893b7313f3e9cba1dc0571b15c02c9f1b7b465850965925405562cb22f28c042a1134866fc911a6bec0c1344cf65e1399232ef05886c01775853350fb2569491f1baff739072b4b3195805d3900144bb49994512ba73522cfd82d8c1ddffc50de548c2bee8ece70b2a72d82c34d98f01e0bf8f722d4ee6a29952480a6d711c97c8449d2ada360509d548d9345042c6a89da38b986c20ad5223b5c1f5fd852cf88d14a0d2ae7dab5d100f39770a0fa4cbcabe53bc6db24211a1e9af66a5e2b32f53ece470679bfeb6aba7dc2a7f76b2c34e0a3002d715c21c9ea6d8b2bcbee15ab4ba95dbb701fbf94d6bf373fed9a8c0652209c069736eb8012cb054cb4e5f6a26b11a18d59c5c44b8b1ad37ad58665d54bb1890fa3c984e0f3f611c26da3a14c64d65488723e35b07f0a3b037ccdf566e5db5142b2be437b53406c0ef6cd6018cb521a7f6563f2d87eaa3226f10f7770e4bf5a79a5e9cebf0276882577e99514eadc131111f68a6eb53d5dc048a0567a5a85701cc9b0964338d3b659784bb95845e0e55bb561e3d735e183f98a7923e38d255a1bc62d4e0b57a9a3be386fe63b2b9ec7a2ad619e19d43ba3debcbf4aab163b2575fe183124d76e7ad2bf4f68b535c921f86a0c77751e1d96efc01c027fff499e2d4db650fedf271683f19440af71d0148a78732b32538655494ae2c9f8d2983bc138be894185b046d7dda7d357bd0f457250b52e7a1b988f9e7fa739a284777dfdf29e54f824d1e2714727ad91a5177edad6226b128fecc60b082c8c9fc5cc230300d1dd4097b8921c672ed92cd85fcbc80d94a24febe9037be9a467e419edac12aabdf09df41b7f62310b83f2f210dc0e30859bc84ae1d9fb18565dda23b1dbca95798e1b8b629c16a6084e3e41412ba616e0c26f2a905e8646a0ff92c4521a81f6250d264118a0c3a8decd9bbf839a623c949118537e848fd271a923866fc02784071846f84d324d2210b26d59afff12b7333038b65b9c46c5f0d422536bf6e54c11581c6a7748c128ea7bed34f6276f2fc85f48c94532284870eb29f05a6813ebf67ec239e89347b85a63e30bd24989901bc4512cb720bd099fba85f226881b7340eb7422e6d4cba2884942cf96ffe63a5334c3f5d5e899ffbcb4656ded4308a9f7afd822066bd22a7f8a00f5e3772403566c43fb052e8a03c0bcb372f84198d98edda4cb777adda7335c052acd2aa7bb91894785d9d0dfd14f47839af4639faaf734eb526d3d6e90a42a1bb15cb782ed5f931898894453925b3b3d359281df393c23d1d3b86fd69e0ccf7ca6ebd6856dbc09a9fb42333994748c3fe291f77511cd388a4744f1b0ad9dff9da342dd59fcf26971d86890e120d3e0aa0b8257b1c7b93519e615682ed54789b62e2a4f360ebc173f088ef303c799455e6ddd1f99a7eb0395203b532a678351c91f1bd00904f47666365add7fe7e97377ec3a65e7d3fa67902459dac29d867aafa32185fb5ddd5de5b31c7aac90223be89e14ebbbc731f9e403143a9c60964ef942c6e8ae9783bed9679b88176597c686aa07fbea9525d227611259e39f280c3b7a2d93079e641b18caa588e8a133841a07a05449e0de3ec9ccb0118ea84dc04b37ba4de1c70c5e4eea1d8deedfb5264a4913fe99f67045cccd5699328ee8bf3eba349a47fc5768d9f1c6cb702f980d5c0f6e9bf0f72621b96f424c2b6126e8f1b2a94691c4bccf69f407448559efffeb2648b765ca8c6d593e68d393e921969bbe7e4db554998ee5cef1758d7f843f8d7db7a1cdff21619bc6ba871317b2ca5a22f2840f5903c17285555ac47f0bf65188c470094c9dc49c380dbb7c60764d699a0ac4de7100c2608d9cd12388e3b68c3791d433b412caad023338dea3ab818c07bab95d01d06abe7d1a4664902a1d8b8b9c11c321c179668a69cf80386116b7fe567edbd96089f4279292fc1c3aabf10c0475a9c1aa9eb949950313649cb33d7ba412f346681ccb279a7130b831a773a5358afdc6381de77cd9610a1d5d5964fc26895042f0e235fa03876e1245f3df001cb9451fab18e2844fa31549ce579e3b63105c6f0455625a412c4793fe538f488de6939dd61d7dfc292796cdacaba4d163f89a18662ab28ae97fabb6a2b387f6a32394c81809ccef7f66597a122be1d262bdbcefe063c892e2a0fce97cf6e1146569781bb1e81e349522ca79efc91b863aac25bf058c5a0f13a85a2fed5ff5ad8c1a687bc8aa28343a4192bedf10536f407a0f94b156b20b9a905c27c6ce2d4b4a5440e0b39c84c87666db011639df6c5ee1dcbd9384a1e5f6f26ef1476a97b39772b065003f84e53f3b20c7456973e5db1d262e01b20ada5d9606acf9d012e78bbc4053101f82a4c7a030e2f5f3f5cb0cd25f4f61f950b58422eb66c9019b61c57a1ba29e2755ee3d1a938f97ba877694cbf9d71171576d9ea1f5f04f6c97c08ada20ae0454c6a15ccc07ad5a2e0cd6a2360222857e4e274feda47054b4da9f3bf788b5b84bd9898b1e8fb0d95a357396f53aee3292080323d84d85e68eb5e3d38b54aad77253803aeb695d6b3351b12a98bf954a9a5e2e1ff3c7d004349e5cf5de06f26e19773a2095d26d32545bc9c9cbdc59b07f46b0c9fd3fcd3d6a7c72e435ae8c1313f3ee0996ef4b84ab959de221f1fec699c2597e3972885abe792185827b0f9ae11fda3e33c774e24040d2ff34f5bf0daf4fd046936f64c703b535ceab7ebe783a927db53791c154992bcbdd44e37ecd851d580f7f25e50fa5d6e04edb6d55fd0a2215ceeec8bc50fedf03c1c4f8cf60ab7c708c5a5f8d4af185276f30969e6e9fefcba682708bfcc919519d97c08af619214d7458348d86e3879c859e8133b9dee419c39f1015440503694d08625965eb02defa79ecf46770a54290ee55c52063c2c1f31943b131c00bd28f9878598f9878a8bac7a4055fdb89f0e4449ed28f573ddbd247d4f0f60e04271c6419a3b677bf048813c848a19c13b2af465a6ebe218cfd1a5b651b94e0432f64d54b9d2ed18604105b34c55cf95589c7999c52312c801d74645a6e897def7d767316d3be495f9c061807c6dd3d4bc30228a647414f6be02d0d1a7671384e0fb9839165472911c1a616bf17eba713d58fa36e7520f9ea0d57bf40b78d32a40c9b35fb50904d08d7365b90d623b34e9af4d47db60f401b67eb93c03e39ee87bb8c90d53679a4751c6273f4f171e8172a76f1034fd53884fb651899f25bb50de0a086b10ca28e552bf634d3b295171eb58597671365f76604171e7982130229656f73ccde7c0c05b6b9f0ac43180129203caab4e3ad9787c0c03d115ed7b53c37c8685d004b09bb2049f203eccc12bf46c1ff76350169703def9e033cdb6409ac1852a59e7c3ed91bc63f978778d770a9048225e78bdbb73b9d4b3bcbe78877af9644ae58727fa011792aa0bab6688f813c71757768bd5ea87dd74c0dd6f6259ff829947c173b59365f80cc06e8a1eccb70a98f0968c8c351b3ce411d1f3b791eb9e6b991ba36896404528f6a722e1a4baf14d5d4142850668584a9a75a8489fc604000510f0abe292da036331cfb566b11a3abee780ace284333615a4eb079a88049b59a220b548aa2134f79ee8e8fc15826a59bf09f76c1434e094d5cf4732db8da8da97c13dd7a26306f0d31709e02a196a897f41b72018ad03302fe18069527154c1642fe8b234da6ed8cd6bbe9a6493366ec6971c47cf7c58fe5c08d927b1ea729a79410a37a217ca55d44510049e46cdd05352b4aa5100b230045628a4510a50acb563a196c5c06a7747f0ff1db932ededa4f06df85dbe34f0984199a12cb4c0f6fd3005365d2871b546a232e45f8e9ca9f444bbf0827f630f2e9ba4f0fe2cade18e5938baa185baba04eac89cf604f0670c44fe0452632a0a0d924e6c4280f3314c989c470c104f5d0c4f11b62ccaeddfc72b02a6dde84774a427e1ababb4379f2a1397f437a2e7ce2910bc7c49e0553869173f3ac72386a1cdcc65e87eee7e7013ee6f4405d2786eee6cbf7bec2408b670b0a7b21066c97ae1b514e47b48f9a9a94691c1c187cb00db87ac344a9b6892896fd7e247b1cd2319cc213ab84ac79fcbef11f676ddc946ec97f126ddc078bb4fd837715f0e89fcf8c9377288fe8eac73b34cdab275920a3af94a6bb585c7c9a1b9ae1070e65aebeea95e7ac5aa2c3993a99398d59f64de06deeb63643014144ee264f6d8c1661e3f2023ee5d8728810addda9ca5df52ea29756f6bb3a07e8616df843e6cb0ef9de02a813f9bf87a536e75bdb190d1710b56d2c781389f63af9fe1daa6ba8979549e525cae3b03a93e35e6341408d984700a5831951a2b2c9b7d8557b293fcafe5ef9d487f87057152d65ce562ac45009c1ca5c64ecc1623530477a111b98bd8c98b8e75f9fd15aef70791e5cb5f01b5a173b556ce4dd5ee38501b4994a91830c5b646023df65940a3a4c30342d679b78e9a1b849cde506ab3fd4c4107ee858a9c6f7308b297d76e7389071e53911feef63767dedc0fae481259ed8d411132e55fec950f30a08d77c7485c948be6e51a2b97c00e1e77375907079ee5a1485adb814cb226421ab03e6c23b054822883e49c006d1ccdc78e3f5f88d863134799203c98a306d1f56f985cd352877e029768ce98540008ea405a7984aa99fe10f101f4e1c52414bd77fa6653b7a8a863fed459d397e2d77299ab6c36a6095eb0451e21a8813bb3069faab1111160e8e3576d9738385d104d6e169bed86d80bccdd3be2f019d86deb61450a592782c580bc3f15df13f76b30e25b0a56860dd43b018c2822601fd6164c839b4d248b34acb53d3ee29cd6fe73463dba563cae094bcf2769ee8a72ca21db65b983436e2df7e4671d080647ffaab0acfbaf35781625c83b1228a84d180d48c5a30c08fd16a0cf4541f1ffd0554b4b07d52864969b7ef08979b791eae737a37511d5b865a4749ca8d89fb77e35015bf4c5ca67c7720b235f78a2005e734762425e1c1a719cde0ab8e2b74835b166aa5ff12a41ff030f67e70068bd93e57398eae1444e479b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-08</title>
    <url>/2021/08/02/2021-08/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a4662069cc497f2ca558a98d86d9ed302e8fbfa54fddedbd9f8f0c8cf3e8de41">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7f8cae024229e86aa6935568fe05ffddf712a1f2783c82a8605efccf6994e9ea9f11a46a7fcd0935e8364b77ffed805cd9a2162179ae080806f3f47300b1bea851d8fdbc8f06b81bfaf3c795fcc42b65666356982300ca56b9c209c9e8fb743f9687fb36d47e534199efc56a008bf0063a02f6a44a2284e2b9d52e21b01ac60aa4cd79f283b589e7410e4006cb36207c090cc206492931895bbf9891028dd2b4108539cb573d671cfb667d9afddb402ba92dccfeb8f06d3b44b20959ade72d0f3b573852cb1a35a5ae8fbfb615b2bdedebaba58ca21bc6197702d16f31da69c0f4083a86ebeb84ced234ee50e55004e0d896d3bd43f8be7ad218606158d7e816086fb1c821cc1d27719e89f6abc845f4ecfe41d050c41df1eb57fba7bd129e5a64a18b37924e6d683146872721676b5e81a69df0cfe20694cd5cfc8e5b460a1732d674daa0e38df82c92930cfd82dd3809884d83e57599799f3e4cbda90246f312f1c14d612a18770ecbe4188866bf22b8a52b273cca3302c0262bd623470fb9e85b1a4634b1d185a2eb3fc16dc29edb26d6d849ae00826ad4550cadd39530fb66c994d4cefab02eca5787e64a983549ad6f7c371f6d5335fdc0ac3485af41af20babdb6ef0c7faff0a1d9f6bf216498ee10804b31c4efc6bbcd25b1bf23c058a297000e7774fc74c9b20b8eb2d2d068c46e2f8218c30ae0473691672f1a6c08e6a79d571399bca755c03eed8140cfebc25159c3498055c3f791223a96f0c69115e45323842c8d5e5ba30b8747eeeeabea8d6b4a37b72ab60827b1623bf684189ea4ad1862455f8168be3dcb7aace629b2cd66e021427a308abdec6e43bcc49a5605d6ec100b2391ad762552afab085ec5f4f8711f6cc8aba34937b1badcc3022adad3f787d672799b306b036c0fffb26d593c7bd2ca865bdb324b4c9893dce1d8110ab19f94fe1403fbe04a79a5ecd3ede363191e0f9cd386d3275765a9edf21bd63fb37af4532bef81f5863d871b019369e9387f0dde828533ea759feadbdf2176622c8b5caa26357f7b936fe035bd9eba8dc9c6002366ab5c91a545a885bc68c0ce60ca37899b625cf12ba590005195f05bc81364bc2d81a814ca3b5fce8c6af7897061e8f5049517e944142397bad734d0d89a3bc504b4a74bef2611c6b6f764e28967fbb65013788b345f307781a4751615ffb608ec709dbe6b07deeecfc4055e46dffcf0c10de79765421c7dc945e2a481a5f184a3388130eb75100956635285649f2162de747c3855c66f0502ec6d8219f93190efeca00f8dcc140f44bd49bc292726f89a951e61e21a3226cad4099bff2fd79c122d8723ef36af1b66e339cbd281a03e04761e81c81b28ec8843c725c4968d63c80634d1cdc827bc99299f12824f3664f03702f4b5b15476956cc6611ba61bbdaf274cb580f9af24a6a5d8d9e48c6fbdd4489c4e7dd485c247c9a1bd3dd6eb78b30679ad69e48092979542c62c8c144a04631d5a3b5c02b049695db192f0265618ccca2b14d7db1ed7a2ad43fcbd9bc5680804c6e569b31bc22f391dfa119136cbc2d0ffcb5c70c16d000d197dca041662558402df0c3f9659b3711297e42f51fb2a9cc9dfa27fb87b212715afe84191edb21210fb70c3b48456fae2827fdc3045642a48fc2b49ccc947a72e7fc1e54cb3c08bbb11953763a9a947beb9650e4049b4bc6968e528631e714ab751716598c2daee90078eb9f9a781f4ab61178ba28a7624bd195bbcc70a3fc4f3ec46c8fd6804aaa6f40529ddd79e108f5d025d6d9a11788f448f9e23708eb1f8c8854cfef0afdeef6333a9d83b29f8e3ccbdbe1dcf8a7f47040b879e4fc45c9f28da4aaf490d203faa5923746c14161d589391bd83c75a0ebadf796cd3a2f39dd07b59c6712174431047b569db7470ea7f2cd2a9a3c4270a84e4d3a9e4fcbd2eef1e0a993b16c24e952ce00bea6c5f31f44cd92fdcc140389513db9ce446da92c5e38dc2f73bb23f4cfb22742965ab04e10a323765077965fca01aa6676e7e7df4c26ff02e4f1e0bd6f4acb4951aa4b0fe264ee6f0a92fa0eaab9a90510dba534b83b697a2ef12ffbe1fd4e82d704b62172cada59f5d1971d22b2e72d2cbaff921727319be3a065379b04d5abf8062392a007e69e2addf9dd173e44c8dd7bee029f1826b98943ed57f3b2a091e02e613fbc01fd85b92562bbfdd49c3ef9c659a50ff6b73c37b9d7d75dca40f49f8dd33aa062d102cf314445d7aa08824a6d2aa73f716def0f813862dc910db3d1b625de354c7e7a8a8e49a29e661e94f9be2857ce1a11d548cf2509e927d962e4c509655a922429bb0611b8f2ac1d1d772de28b2b5691f5813c3cf55865b7f564d1c9a9f4a668521493a6c51755c1dc420e1c2cab382721a448a78ddb1d26fb317a40b5c26f06079dcaa5bd2efca025c73780ed0ebb51766a08a8dec03eba9605da0af4db69cdd5f54cefbcbbac805490345840ec3822c76faefba9e2b4f722ae3c97293f5382c2e88f2b68a1d0a9514c7a1d79c6843b0b9b6047434ca4cbf509a3912dc5beabee14b8d40fac07ee3875d244185a2b9d26fc2cdb9b814973823ec41c3b18fd670bfbd678c34e380afca2c71329037f9ea2679168e37aa5620fa6240100527880b9ddc416d57061f62b0c214bfa8578b241289db97c368b8d24617df3bebe1db38dd9f62dcf3899ae7e9cebeb929d21cc47f902aa0c79c489a40502262d8a7bd4176a4146d08d7d59fde07caf3908f8fc35d2ee16da4545617ef4741f626e6a7856a9e5c2681032c8f995df5c83f025895f5c01ae08a17aaaef7071e17d3739514f8371fadddae56f6beb15716b835cf6753f1f47b958cd5c13256a5408875e821fccd22e77ca92ecc49b24e8ad9ebe1b0c29994a031b471c8bfc8ee4ea71d81ccb67b2ecc6b87927e8605370dc570a14d35d2551458358ba2a615daa4a2bff4ce7ab2d16b7388a7b001407096fd771afaaada3d18c695b456fae815f479e99b649f7502f49a6f7f6acf5580547ede6ee43b9a8fd18f8a80ad6625a914d911ff017d6f3d531796eb094122d7261d71d32591a5a58af1a4c46e36b1c31ae5444027af0fd82a97fbc8705998250c723ce11b3cedd0ea97069721a465</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-07</title>
    <url>/2021/07/01/2021-07/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4066ed5f243e4930a7fd7a26518b7e9c99315186c29ddc4066ae9a8bba0b1c77">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7fcf768525b2e9687d76fdbba4bb722a77e88545b174655d61b23558675d3c80e382405972dafb5736441a0d0586726bb739008ef7f91f0a95be654ee93b2ec29968f165b0e0a4023088e426b1d96b6f447db36e009837f4df7db55b8ad2cfcedbcf4f4aebb4fd04eaf11395f9143751604482d4a454fccd51b59f2912282be37d11323e8d4e0c720492ad16bd41f5e3fcc27496326d797c13f3af9b85b745c96491b61aeb4422f78ee66d14db869d841ae724f539350ebaa6bfcbe8ecffcb67911fe5fc8c6fe5c9e28ce3bc8778c20b1003502b7c64c233aa4ad29786d09217bf2f77e1b8e91f60f112f8880d8f4ea1a03d95fea400b0c165393d9f95b0c0eb5f550f39511e82cf6db465bf62b932f7eae2b87093cec170260bfc105bfc9948ff82203860a9d0282261449fb36e0290adf754d85e07d6822ec221688c7648b23610c59a8a13ba6d34788687f2f2b05ac5dfc0b1410726010886e2b837dfa6fcababde93810098acc5b6da13cc2130c7219dd942c9023276ff74894de48c6b9dc42ac1967e1997cd49b4c40ef87a0cf94be23365f8b26690b91b1959a3d93579ae18ca6341cbffb5bbd7e57fbdc78c0c99dfe7502b37ba9eead8fc70ade935ef108ce6c0147c1ec619a533cfed3b0f6c1ed2ba06a1533aaeb2faab313121301b9df341d7c1c98ef72f2ad44e17d22bdd30a008fb1b4cb14ae6c6a92444715b7699fac05cad567fc710f4f47b1caab43393aa705f4c793fe9dae840b486a05e99e8000b52b68c275e92561572a585c29e9d9fbf945364b0bd2c2bc1ca2e0bac8b662cec01c571e31d1679f28e6fbb4f66b385d8b1d799861148b37155e16871fa88823e41fdd3a655b2deb3f3f7e85a0461e5f91cf9ae1cc085ff245ee6fa629f2602697e47371500ae3a461d9a7c62b2d3d9c30035401b2fdb22369a67592c9a12b9839d5775efacc4828b155295ca8d4783307a62ca3c9a141cbd02c639232eb2a5faec73eacf717f1484af0d9c78e0d4843c0c346aad875e70aebf30b05adccb2259925d0fd6a0994b2619f0c2ca02ba21e5493ea08375d537c6b8e398302a3959abe58665b4a26066d3aa8f66ff0ca3fb78b8dbe56a31937e179d6bc4892cc2ceb966da791a39ed54843abe8ed0aac0e6995d75472ad01110c2a9c3a6e35633f2585cc7e6674f7f8b587d30a0e9b6f2a085a895ec3bb6cb1bd210dd389491078256a4c8f19e0f6df4e6ff8ad889f1a2e9094b5640afdb58c35d8d5c5922812dcf706576f6bccd8eb34c1101101163e42537e0217a3da02e3dbb517d5229c508a9c3f8d04f151a0a6c2bd648052ec3fd5d1ffbb5c79af78cb9d07919fc911614faae57aaef80a75165be2ba7f40b4be4c4f800b387140b377768a4acc010ab31fbdc79425837a6f767cdcd050ae6b3e5d97d92fcafe0a23c6c65cef4bc86bb8db8e07cf501c1f9d4e999f533f8343e25fc91823ded1b7981aa4f6c6c48632768353e267ffbe592a7a2fe40781a58276288e5b57eef6a0241845e0d481a47f4c390ea9eaddf6f525a5dc10479f6cc805eec3d5b37aecd939512a1199a6c1386a8c6a9c182cdb7895d09055210ffed044a7e8f5290c91994656bc9079a78543e8066dfcccf12143626e7e7c257340463958076f78adaf9023e3c08cc9370fe5b331d3bd2f733d03ae3de3c38f0ecd82ea4c2853e70aaec8d8dde07d76b0d910aa9bb40564885676d285a02faf5db9c9c783a6f1a7a398fe37a7f3371b4aad124ed3376d5aaa7b356eef2f3db50d298ad47393ca061fbeb5e177088f490576f5bbff3a9926913013639d6d957c9c431065af69cead260ab2f67e2555bee19e21771337e1cdb7fecff62881a983fec83a41d0009e3b27f10a3ac723880d57aed57ac8fefcb0b645a4b57399a4985e693a36611a8f7e7d32e4253c977f6ab435c4f4e233a8a85f317996372841680515e1de3c2ddba21df44286880dec840c4f6d3e4a4b600eeb58a3f02e9997bae24980f655b9b68eb3a588cada3237248b3fa758554041d074683bc9d4ae02adac64d63f943167f7304c1b76f0eb69eee936ca3d56ee56a7a3893076ad3557d48d1f3a1754aa923efdabac3be14767a3cf5274e497d9a5d16843fb0ffcb6a71fea34644bba6dbbb4847f8d49142dc56d8cefae5e17b6bccaa8460693f509460cb109801b85f111f9c55db0375d500e76bce48ef6e72ff3a8d49e90acc3e91e8a8d2538fd74e01b66cc84ab6aced9876770fa67fe1c0d9b6876a2a27e34cc25251976eb89a3b2926f5c7cab75f29d5f451e29f4e8c3a26e23b2010d39942eef99f4b5efd63c50d06a103dc96e59a417159d1628d0fa9444394cce72b03b7e584a39f72d8486a3b2073e50f4a940239136509d90cd969a5d968fdeb6171abceccae7cc181a76949ac7c741cf8bd5b018c2d4084d390488b5425b84219add9051e81b8878d759e7070c7a51ff43fe55379f995c46b6d73e2cb23c0f75c7998a16e5dfbb20f04104efaf24d7444761963cffea0bf8642b1599c4020005b92a9eaa5985c7847d7f87d28061ac654fdfa8e220f77e68b6943f6df4ca2b2863862cdf994a274c2779491e46253110701f1496a015fbe34788f4cc7d0ce31d3e21ffef326bcf5013bcd43f2070b933b1ebbd2bb7671c91f5ca073c16e1d482d977ce0caef99a39fe8bd00c65fef1578c4af945610c330e8b9c04db67d4be5e6bf6c93f51ebf1c1e38dbca1f66592ba4399566bc70c3bacdf74c1c817345c8976eaba6a1ae86e15dd54b0f917070a8045adc166ffaafd6bb08c59f3c9ce050e40fd6f2abf9a7e7b9108de121c68c21d7e7b0cb0c00873935075e5e671efbe33d31a19ce1292e4b7949720eea6acba21a7c91d1a64f2438a824fab891691d13486fb302196e6b02c893c3f9bfb56cf5db723cbc49adf0aaef9e01b68a4fd83a39fce35456adb8db9ba3736f04ed2b931d3d21fdbf365609464776d07b496e44643daee00f9a16c3ceaff288fba6acbf8b46db45d956f69208ad0407a1746a50fc1df971b76f7eb55a5d9bc99de45babe9f0beb395629f20b74933f592e9220ebac57a92814f90e20b08d753fbb6fee4f77b2b54de493cd09eacf288b944eafd4040bf751a0922cdb726c577c2a2b78c47cb5903372ea54059d0f3e17f13ff4512eb753c59a08cd1e6c736a1eba4c2f8b745bf391a952cc941dc03f3ea98ec4bc0e312285f348e13e197ac53af04d21583205f7a2e7f9154a336c073ed636fb67e4e194e7fc0d46fb80704ddb8eaaeec04eced5ec7296e27ea8cdda709666f91e47d19219cd6611f5df9a26dc95995da0fe96136c82fb1af9156624dd50fb4c2fcb6b5d883a4e93c130fe55e1ce30ce34c37fa36ed4e6d8082892e0c2a9c3d67fb4a0c38239a4e52c746687c5ece40fb569e69c3dd1ee27772576cf9e2f6115b82e4404d3c5b314d4f0d1f97a95a99761249c181f8216ff3fee92f7b70d6e7355c89889641d359583456e4cf6a213253b5cc5a2fbceabec009c0ce50816f819cb7ecf8698e3c9dd4a269fb01a4fce7c12052aaef179d1abde08c</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-09</title>
    <url>/2021/09/01/2021-09/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cfd6ce92ef3d3fc1fa0c7267d2906b820dd06a274f238b331e2b9d36d910cce4">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7ff459047c01d05830c605acc56095cb3681e5550a56c7d3a3046ba5ba4d090f13ab9ef9c10ba0499f82848a40ef667d5f10f8071b7aceb9fb1a4b955f85f7cb7ee5ec7b99c591582abc9b7e28e48e8556efc8d7218f805f210e556efeea011622ba6ae1b526f84ed349e352afde6f46d7138745343a79587f32506404e9f6237ab53a8f77f0bf147cc0eb22ea8db4bf3f94402dfc6bfd398df907c3fdc178dfb850b3ef5a511cfd8a2b404496c82c6d45cfeecd9d0d6deb670d62e6fda9d9e2ec47bc6a1941503cce86634f1cf8bd3fd67668422948282b63c7ecf358029ea5542fd5ed2d8670118bc4c5af79850144cb20b83cceba283dbc383693b3776e76bf9cfe340c481aa61de4e7eda8f00eb8b29120cf1cfdbb4e568e6ec2e3f90a90968922ae658f7d2c5fe941858dc0b7010b2300930ec75ad62396d798111aa9417f860de78186091f22fe454a74247b89951244495911a3340df63ff55e47b01855e1963144e976f0302073ecd0c1c8c16f40b74c7a3d690c5829444e6ae27485d48d7a5951b0e5ff97ae3bc3f735e7425a9cc030a6afbb8424e706d7e01e715b15ac6e2343743c51e560181423cda185b14f113d8835847897739743eceabe65fd302d2526946f32712d22c2db9257e60706a2c6518510fa9be43bc8145ab81c33b10e030ad4e303381d255b4a03e4f75af8fe693bc22e83d63900a802be612a2bc205caeab95f736038482d9bcba47c1c05563b748e05205534536b5a3315778a798ce5aba762f975a0b11ed345e70b711c44d0d5780aa6fa1bd4d41f43df788efbdda5de230a2c0baa612546769485565cdbd80b9d0fbba0d6d9978f557d335141e30eb440a14f462d1d366d92616bf238e109e8432ddcd935f81ef81d6f3220efd457f5793abfc1c1b68c4c572941c693e2199653cdbe55d125ead233cc306de6197371875a285642c6b193bc25fff74c93d845eda59dcfb60019c4437cfa78fb599780ca028f3c2583bc1eb922bb2f19896359f11edea98e4711793a17f3175455c327496ceedca21eda86e69440ba27f8e9dc41b699c9df00088d45a4b0759ac4ca6ca51ac1b66fc12016190d386c3fb526ed88b8e029a0d4ef9d55487f0a1096677fe3f62f507c9a78a87e09cce4d41671b71bbf638de11c404c8405c64d03ec651ab41585360500720d215c9dbc87930cc8bb61c0a2bce95a0663dcd3210c57c1875117683dc01f652b4a30f960981a14d28b7f9a6785da586a35589602f0dd402712bd2016efe7f80af9ca44d402914c29ac8db5493a44951af8ba72b725df2a7abcefa0f826686626924f2f4bde42d5208a8e46713b7820d5e032f0c259cf8710a033db51e5303b0dd6bc3111ac8b798046570a90519d2603bb5261e80f01b24bf2584a5d34d05cb30031663c12b31148f7574f929db8d42f27539356b34094f32bbdcc9fd39236fa453fc6a98b874daf307faafbcdb15bf0d7aa8cf1a25b7798f0036199d5c17b6e716e32ef273f0de0feabc742ff327390fa08984a357838af81feb0ed09419714fc83216413ec710bf9a13c864794ed662996769308e068e3c5efc9096d48b2ad0d793e77e1288697b4b806631509155a883546ca0d13e4b989d190e939924346892e73b8a86927e86ad90d311d6902ea7ea7fa7eb2d94e249287b4d1a785767bdd64efd9cd3df385fca7af4f90a3dafebcf6bfd855855cf92f919989fc06c065be62c6ea6a476a250f46244048d108946aea8f92915ab0c0a5778776792ceb6531790470a5191fca2a3d53f14756591e8393ca3110453ffca567a6066f834b4efe37e9a482c4942a3f93053c455be4a5b45a522be3ecb874791e4c584dd8d6726137a10d6a22daf4f1aa33dbe146da8fc6e1c7e3440d3ea29bf3cbf8aa784e784a51dafc173c3665932c44881b2820382f0739f480e0ad95aceda113808debef24da2045b9c60aa1b8daf64d25f3d0d5f1c2dcb995b70c6fb7c68074efce59a7765bd480652cac40630b6cdf2a563aa4f743ff886669489b5bbd332a41b80a8a3032500f46329feb7cc3cdb6dab68a8fe3a0c8bed2a6d7eb64600602eb3f9c54398cb499910993f3a9191b367dea786ce7fd4855d8622bf25d5b008d9b895cd3195e4b99a7f8c007459faf3c54768608d5e48b8a529385b6f7d203230b2ca2b2f5c554eb8ae9ae83e243a2fabae5186faa247810d834e432d509ed3919ae88de39b2880533b193506bb99afaf064e3f26c88ae7430c00d3b2eb0f3904376eaf168a0fcb39f63110691cc1b4c37ecaad9f4dfb723f1ead013103eecda8260e10e7c184f7786ca85eb2e9eb28eddb9a71254eed64eddee89f7144edeb8705d3856d16c7507e795576884510f158728c609962a30f7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-10</title>
    <url>/2021/10/07/2021-10/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9f099b859af52fc8f2ad93a204e2368d35a279e82f494b4b0dc8537d80048cd3">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7f47e548ef77e552b73e2d96d30d30ac4050fe491f6f97ad7aea2be85671615cd76d640d58668d8e2ee8589325d1671c344b6a25dada9c8e5a9017409c9baef4577a798bc04786fb143394b866a094f564baf773f57f838a3a501836186607dfb0882b3d31ff75b5794925a0b30912a167b4170ebf3b26cb3c8a7fe2376507998188f7d3acf1e7487385aee140d575c2def88b02d3021dd8cf8596b088c3b499f488fb862d3db93dd56b5d166a8f35b5a6882f2969fef47cd403d9136ac817980a863c2e3cf9aad6b4abbcc8c3eea40e9ab678d9057758181411219d6d4f9393030c23860359bb634ca482499baf5e9f3a8959f372762329c913e897d56b1ebfe66022d84e4f0a78121cdb4cd23dc98f3b01b594b7d2d949bee0e771bb7cf85fa1be8b03096a6fe7c100db63dbf92aeb19ce131acbfd8d0bbd124802780375738e0fd4e20eb6a4638d629d834f99d17b3ab18623f2772faf12071503392fe8e9da220d1439d4355c9ad67a53d24258d6a984800433e425c5fbc8f01b55d495f0dfbfd4fb83d7c10e16cc5f127792369bc994eac4f46ea411c305f2c886e137e3f6f898330348a49c25cf47b22ecb1038b59841dfcf28fb260d97561a2ab6b3335c69e7f437c200aadde07026d0bb18d754033041d1473b254ce1b916fbb8cd09a66f89171923b8ec6fce4237d106cfe2ab31dc47d004d6471f5066b5009d921515299507f75371eb676a8e44b210130fa375c9c00af5c0e7efca2049920a06b1b7fa9dbfff98ecd7a15c37768379c9685a72dbd619fdf2baadcba60383e5fd351e01d9c290ffb7248a4bf691a8e82c48c2961eddf5830aded22dc08f672aaf9f37ad7b944402719b666a2933d34d423a4ab4d0b43ca953039b72626c0a40842460539d919b5e4565cd52a2da41f1b995a97823e0d404d59af30ae54db2c2980a0eed6f24c0c7410b14edcf329cc0a4dc91edcab585e151e5bab4716da2b7e85fab1995dc7699ccbec9e996ce3129259141fc7852c228665e14a5847197e6326bce883fdf383ffc4121a8aaf7ab370c706339b6b1a5edb6cfc69dc008c5814d2e4847e98dbb13e93bb1008a00aa9ef58de366da26760032fff7527a5bd948cf805039f9b9c6531f897ff6d1143823ae0c471e4cbea1e3f3cc09b35969f23628f47d4476d485591b4710231b47475df54720fe049bf09928511eb863ff79b790405cfc74933c820f0983ae2a4f77464cab1915472f9c6fbe1d320fac201913e846de9f8bd57e53d1e4364cc20317bce0c7faee932b830a51295c46f5f408ddc8e1f232b00ab32b7d2a613ac7dd27f52e63dd47eb50083ceb22a4e2be2954797f27b3bbe12db668201e38d74bfb8f0ad9a21c972792a9adab6880a049195a39b00ada00638b128f2711652deb8ebcff8f0076c5dbb1702a9ce075cab3f5a8f520e0e79d6493c1a45e0b1dc17ad76a460e3b0970930f314b9c69f0df0d2f4b58a1623e8014c091f0b341c38410b1482d9a0f81cb47a61e1fd8907710ee0b15fb639afe305cc6be265add3cdd013683ee17758396aa407d10237420ad80be610cb704be21fb1a57d5b700e0b21649dcb3eb6c53328bb8d3a5b776c4e6ef9b55c496658d91861340a335d8e4e7081af479d6e6924ca0c164f5fa9523183a70accc2027a93c5c2ea1f4a9c20eaf40b6fadf44be5be9ec258781394b18628de0e92359ed26cb9ef4dbf1ee392827e04c744f695ae4858023d28b9a709e8eefe40d845f72ca21804983ff71e9f2cc005d6510deaffea2e3a75422da82385b945ff6b13e536a725435013a80205cb06f490f05999023158d132f687a5a5d14263ebb6474c678a0c766c16467662f7657b2dcdb4cc83baccee6149e83bc18c183727a7cf610177dee13195843e28fc77307d6dbd3e37a50fa5f5b55bf6622c2edc9fae475420a45bbe818cef2d2111006244ad4f94f72e2ce757f7c6d48921754342119d7bee2940424adc4474a18ed843f908603d8d3d6025801889f10ccedd4c76a94186c8923bc2530ef5cf9d6549ee8598a8b9faf5bac71a9b2ab1f52d33f990468d9712fcd8c6ff75c66f3942384bb83fc4345c96c9dadd454d51b478a868d35e0952b3b580c2f73d78c702a82ff4a66c7bf1024b9e4339c57173ed2a8ef4d7b787463dcc256690babb993501506ebc9ad7c457ebf3606e0a8aadb89e96a73c32db082f67fbd165da6736d4259f3b258be401897e9ca4a0e36fdbfe8c48106eef35f931accb0e74ab67a7aaa3d0db07ebf0762d4c3ca5d08dc529e568785046f7faf0f20cbfec929b3ef785ca12a3c595c210fef1bc5967b9e038772fc32c4d36c0f6aa60ab28a588e4b01c1820b99d413a0e3bf9526249926c75e763e9b063414a179959c23eb9afe3be85f5bcef32937a72e3de2090d5a26d14b1bfa7031217e0ae314fcfe824d0a52361b5ae77874c12d837af2173bb403b3eadba6db821745001c65b4fd48e99a1799ba8a57a40d1a014c33c32e22da5ce8c3bfdc264b9158e78d3f873bae76bf7de4230d61ac7442e5fac2734f390d36d188b58f79751bbd887df81535f60f8bb9c0e5ef45103239354a612d73a7a7b4f28413305cdbdc2c344f8603d1c2ff64304ce45cce9740b3d15666df1fcdc0e7bbe819348075862e174de0be064705db11c658b8f5a2a7c67263204556404982591506c8bf251da10090c0df180988937ee304dcbeab958d26903774a353c36546366d43323dab4f3e4f8b89c359ec498724fc1fa32047f0753dc380d1569522e54cedb5344c955f1ef525ceba929c29fd454073bce54636c5fbb438917b4c47e716e2fbf10e4d848422380116f226e1502a7587303861e643e2e178c9c7def0237b735209a49ac661baec29911eef00553b5ac850e80a9431cee7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-11</title>
    <url>/2021/11/01/2021-11/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7fbf5c53a4435ae8fd0f337a5ce668dd4e84aeb8f2b340bdda6b74534e808eb4">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7f794274c267a0d65c463f8f3dcbdb9fa2d825e9743c5f4cfad687df0e35990cc01a5888d97875fb185a8951a27aa9b8cccfe3a7ffc8031bc8503423b73d9c909bb46899c2027b7d3cbca3aac7fec249f189b0e2719b9972c597f30270d24d8fcf14e03dfe094b611d801ca60d02381fa8470bfdfd2e31474916fdc272d8bd79d033b552568fa37773f528a69a040b023b8efa696105c4d929b9ff5e9a757baadfe5f94dd200986bba6de64407545dd9c4339c95366f34a63d895c377008ce741fbdcc2469e83688fa07165f245dc2390d64fd79f4fc038112303b6cdef16dd37379098226f4eb550051380168f2daba9110e0a0bffb088582ed2136d5367398240f32b524b23b3da91c2947402df18f310c324f0a62aa3a2f790caf8e7b587612881f1960a1dc6a567420fe8f79baac95b0b72e318cefe7c4a224f4b25ee0e72051e22760a688439cc467666692d0571903c93988fc50a0866b94f93ed0123ca5b201c6cb6bc51e00aad6aefe83beb2ad34ca92c94d3b000a1c9a32c6626ae408b76aec695834c847113f36489eea32d70ec185b378023fddd87644ee9bbc0d069778d36d0624ab2ed52da77cb8aa21fe66293e598e69440217cbbee621dd3b37bf60e02a5645890148c4ff293316f58d43be4ad527112677703a14a35a114737a49053e2aeb211ff3aca4f550f8bab2f50d83007d7bf439f539cb7e39182ee74a777df3b6dfc95df4cf7687eb9e163c429e84bda45cbfe75ca7247934493e7bae048206e06653925c97dd51c5b0c1f4df3bf948da98b031da11669fa25d13e333fb5802b26cc5723569eb522f6b91e534e4e74e78c6aa229400587e250b28af259798a5cfd6009c7b34e788409eb9165da3eec83e694c908902f284091982cf3c7205c07b220b9a00bb599983275b93167b84b334eb6e074052d0560848f9a133e81cb3538611a1087b59078aa19132ea5a7ab7d0e5672f0b7d0c1f1e2e63e6fc7cf0a98a606b1749f4ff67dd8e8540e83e545bef6c2cd72cd2702d2d6cb38e6e50ec40f9203154f65dc6e39cc6da91dc0e3c0d06dbef51f5499a427bf5683248ad6ba7cf34a1c347b847f2c7d5054f27aafd477489a2e319c21a3fa4f9242065960d2291cde754fe31f45292b09a8adee08e270c6d288d08445ab2dd610b4f1aa88310e9eba09321fd88e904732be22e13786e5b8da7bfb66ea85ca3e2b058a32714a51155572e0af4a23a0cf9d127d928158456611a96d72d3ea01ceb7d3d28598d983bc660375689118a50ac29bfb0ad293600dcecad09ddf6706c04c4f58779222130d0e68ec9bf9aa0b1b798a748a89aa68fd014d8d85a45fe0e2de67342d72598ea09f46971d52f8997c3d170a1ac653f83fd373e864b1d5b9f4698fc67659b7dc1514f1559b0321a581180dedd726042f53149ad0022e0094661dc3bae72b093432ed956ec0df3623909aaf515fa981ccafb4993703f4f17a54bb7ffe4d648313b3c1b8e98c055d10b8e71ed4bf4008583f335c0cb259b430090bb47dea7d0282651eef8f190a2c86b57e6558d9448dd0924ecf754a6ce4352ecab2cd50a45a4c25e9c9a893fd938dae574e2a946bfc33be4b8c29ee46ef4ee151b3eab541613b5c64c817cf4ce2438a7e4e333ade546d4a633f3d48af249a96c25e3ed7bc0c116f5040f8eaec4a7fd03c2887a2ddae91ae95647f767096fdcfb80a1e6ae42c98646dbd5792e0c48d4acc081654a3ee7cf34594006aca429ece59ef59cdd0843effc95df28f8930e8bfab4a301f2367bee7a48f2003a61935154fc928f533e25ada46853b60a0266455c6476c252567ff8f3011b9ab083e4b7940545d7dcf62b975009f13a3d0961b616bd23e873a6df392f6441ba3fa0c081f4c3396c633145dd49a54501ff12410a594f2205b7052d379c809a870c80225d12a185d3a1f07045fa19a669e3b59f0028c47ba6fa97ddae73091e16828abfab6a9154a298934d5ca1f78ba51dc8d2a5d111d5d83b2f56d6d3774d69f42ee8b1427b158670f5e601738d11bead24db4d6a220e03f397d6a71503af030fe3d58c63a16e7b02caa83103754b94de98e9153024c304afe587113408738ebe94da130e85d38b011935036360afa89e82daddf0656edd00296df10d14ce91caa2d1f2152cf91a25d06cbe7d3120cbd8ecf1b13fd7fa2950c6feb7e5f1cf1001aaa622df8f22b3f1672e95226a8db7541f72af6a2a364c265ee8a7e37a1f20a8a55d533a208fadfd3e8c724da1af492cb4cf13e3131d33002c0d7efef3665556261d65fdb963124ccf6ea43a2a02c4661445574911cf75c79e1267762840dffa6676b43dcc27591cd9f5cec8339469aae7d839c825915eace68e1ddcff62d2f4934ad73166bcc963ac64050bc87c9bd49474fef4dc906561b6d808e1c476a277a696bd4a7f387ce0ae5f3b167776065b956eb2bbb82852346323a8d47d76e3d6670ad779e227668b4a3b0a38cf0a469e26ade689b1bf6c76f267327d215de41f8439e00afaca4adc95e804f6ef7231ae7451752015ab99238d86831fdfdce70c3818307e6c48098f67dcc39d673b98ba32313d16f7a6e8266860c7879a4af5800f5da631bf3bc002a32bdf5a0d367cef3bfd98d2db6d871662ac3e186223304db7e5163c77d8246f79db15a470b247cc6c50698edf0d8fda0839b4d9bee59290e213d9bca1bb5876e1c46d6f0e872c8cb637557d14503ff844b56e0f1e503b3be8248060b969d6a21d637d7b929907a16d0a11fc79c607eef953938ffb8af2bdbb97950d550403e0d1e26f00e251cd738f5668066db1e5a7cb83591e36f81bd2e7881f77868fc6392195f3f6dbb87e4dd186e488dcc6992821a91247538fb812d270d8eea69c19c55b1d51649dd7203447d1dcbbb68cf8db90534c48eb6188bbc87229e9b512146cd314a1f49c93515b7d2f8f196d728bb31820731770938136f690268fa59f065ca66c8253fe6b6f81b2d90f0ce14a2cd495b2b12986b413bf5cdc4c878bccc650bdf95cf4440ccef8923caa5befb7e5cd5778f767801c1e4a9a9f8eee305a5</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-12</title>
    <url>/2021/12/02/2021-12/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f92e78f5d6046578ae6b4b1a0ebef28a3bb81c520504fe492a2952c9a3c808fe">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7f25b21fe5d15eb1a96a9707c0e04b3e0dfe316c634482b4b47edc868c64a192374f66e866d38c3116e9780f97891f7e518a50a5ecf24612d48bc1ec3a4c7dc450b8ebcb3b2fc2600fa662e1daea33110aa3897573133a3651c493e5c388aff612d1bd3f5ab6754c73fe2837f08ab6e09d0fbc254cd993145dd79e78ea890161f6f59c5a28e9c7b986670316c44296a92b09322d77690b0a1603b929c870741cf8185e1fc3b0c9717004f0f04f0ba8fc89d960bd26857831910def11f04eee6ae8c3fb2a26700ed17162cdd3e29a3a628a8b8e0ed68fc6e7976926c359b2a1a9b513d315c9b9f9d0fbcd593ba34d54bc9b7c4a98f646e83e0d460a6328817cf5d45c8881dfb31599156e666ec631374b9e06d03a5a14041fbed704fad137bd42f15f2c13bef27525e68978ec0b5681383e79c772dace85a78a27c56e28ff484878db3a15e07ae09a916bb949ca0b2d251da15715d1ceca042bcc95398daf8070e040eab6209ad384bd417b7e8551405982f724da092a20bc97a5b475a1a12a25917ad5ebe0266956bb71b6cfde8d0891c08d04d001b69368c15c16d2edbad6fe44109928b856ad9f07436555376c45068e4ca364f01f346e0a8c6aa7dbe79d53359d0f8e8dd2c63cac144bbe451ec3360d44a62f1b8792b76bfdc27bedf3262ec3f3aee17662587cc0f79dcb2c4b6a9bc33f9e13007c771668a6e67d5b3b2c4ee50370ecaeeb034b3ad1bb55a1cc4cfb1839d010489c5833107543f48757848edbb80b77a5f91b288f3260ddabdcd044ee4976053eb493997314f27d5a4b55aa6c3224cf30f95acfa3b91ae051297ab83560edaa21680b5e98ce1a3ed976f59c7d2d6625aa9d0a477233c0cb904b2224a88f5210508f14fa28e68a6891a10362ce696f256205a13da6a070915af1e73466e74f4f949c95c72d66c68fed30d370cb96edd1df50dd6054ebd8c311eb1ad6cc448f449015107503df59dfc235301615bf0dc6e14de70fdc062ed805a5e0fba53a4e57b3e0364ec6539fb4cb00fd176c10731cd024d89a173bd8c1cf25797a124d4babd75afa1408a19ec8c8a4ed9654b7f219fc238f326a3623808b39a3c05719bace20f7fd1a11872abb5be4f476b97842d1fcc24e364dd4adb07a9a9a77d64f5eed07f8a1163662f9a398954dead4538dbc4e1e7e3523afc0e223c31ff82901b692e29fb702bcf5d50147380424c6c8f3b55aa053dac6cf0d74d5cc249b8a0480927acc21ade435ca9246804fdeb4332c2b545f3470488cb77edbd42cb7e6da96c71d9ef02e6576ce572f125c83c231a9914281855c89112deab5c9dd10bab2a11115f822ffbc0e1367533ce7afe12bf70f8f8fba5ee2de44ebc424736c054eed5fddbf4e44e147f28aedf5d6af2365034a45b94f4c553dfb1f6399b1d2fd53632fb7693c7abf8d52120ad4eddcd1e1506c7faa781666e46ae133c3fe7247e9fffced97ebfd2b6a5b0f0e47f90a250c1df2fe63ea8bf403a73836907a16b2f81474b43bfb8f4fce03c1feef704709b55d079ab4c89a3a291be687db1ffc27416aeecc7a10bef78417528c4c816d9dd6991205dafdf9c568398bc35cb1f64f079c49123761b542feaabc7827094fac963a7052bd4b45e9eca85367eb482864da9d6822a1fa4847674dc87fd5220ad3219124c856105bdf0489a78dafbbd497aa235346df48294d2b9bc7b331ee1bc467c9d56831711398ef139380ab86e1a4f40dd60dc96a9a14ebc508cb900823bacc3fdc8e3a337576923f47a4c2be3cc60f648bf8713a4cfea8a543a5843642d2273e857b0c95ce5f6a6709949935ae2a375c98a90d87623fa6634983e5822f4750724e1cf437f1481cd343dd10c89a83149f17c6501710e136218a85000ad1800bc90434af6f415f33afe893d6782667d69390e334dfdc0994f710bfd8e917544d4eee9c03f2209daef92fae9311a3fdbf6a1a4b26032fb11fb7f7ea17c985e047ef4d2f57a7957e56b4e1bbc4d1f73e41683db5bf3b680c476d90347c5f7a6ffe9662a34aaa49a4a4173e70cf43c4dc90994d261651c7f2353102a856ef273f5d60b6dbc040102335bfb3b347c0a16a7344540a2442bdc991dc4abc4bcb6f8f033bbab1b655cb426c0095e926758894cf1ae75e6998d308b781194fc6a7c19c0c9da58142a32955a56f4073bee2ff42aad311c56549627e5032f658bee7829a920033ab70717dbca7660906359b5fb9e280b11f541198e2df297e2de07d2712ef01a7e2cf07ce60e4abf5561e95d6acec4ff21eb158bbd23505b86719fa467908e6e760ecd943a797148356dd794598b84f23d154215a4561c6251367880b918847d93990d239bb44aeb459fce9e41e84edf5cd3e63f7fa462e77d51a78195b7808db378232dc81f4a92b3130426dd7f45710481c0029f4e4bac26e675c451c033dbc90e1efc1c6318a660b999517750db7e58e3898bda1f811af400bfac7f1a1208751fe2b2172477c7bd1ec81f64282c023338960a6438419e338053a9c27ad24f83c7f16819542a44a8626392ee1ce64d377945c167995e34ec8276fecabc8c817e9024e07641a535cad61abe13e54dcaaae8e107efe125f53b42fdfa780369971b0e5b6bc348b86554e12aa60b55443fbf61b06b73b021099cc2e5ed30b242ae6a567e271cf864bf8a5582f89efd58adb4ad4729e223278fac0f94fbdaa2c57473a5e7ef61b6877f1a2aca4c7b2aa351b20ccc0765e11e36ae46fdedf4a077d4d4544e0c27af86b3e9b41fc52df2f19ac0a5d66c1df6484204ebce97bea920b50646efee6bc4f93e6f626038be361b034359a2aee1ad21cae1b9d0a50cd8404bf0181d54d5a309925cdb9c475b457fc46839e12dc136cfe525d166f07f1fd704f48110cc0903c1b17be9d187a5e1ff4f03397af644ba426bcf443667124447defbe85b427509116873d9aa4496f529a8ee9187f1d4417c94ffb2c4a383000a5266e1524218846ced3cc73ff4074272c7219770a40839c4ea32be0e5ba1056fa1e9e232702b307145b077c081276247388ce783faa9af8616b44262a9f26ff4f2b48fb7dc0c04fd5c86c93e36d3d3219656e1ad2a885b79d812c0cc2bcbc6819d293c7f04c90727db7c1ca0db771fe74de90e757291b3cc1adad163c0a5c536d844f02139e22d7daf365d6797738228fd698a08dfb6c4cecad7de108448960ddfbf2a0801fb0e78de377aaaeb3c639d7c288bfd3fc8a6bb8880c5d51b26dc1633519896f9e8f79807c38205aa53b88a43e8abfff6a30cdbef24a319e322aa43a79f5142f39b3cf5a75a173dcea9e168a41f8be2942932cc6bbb712a6fc1182c55df29c92d8d0521df167483fb03032bc73db665959960fb775d809579d4446af0a29835ff921f410b02d86f5c46d1d399cfd0fbfb6797e2bafe2c8f2c5e35e0e425207d65b20837e6547f2dceae999b694c79e7ff417bded32a3ac47414ce3f03a972cab2aa184c37622edc8fce3</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-01</title>
    <url>/2022/01/01/2022-01/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0547ca0563f1606a49d449c8643078b85a4e2063595949a9e645c4b93f342db0">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7fd2b9a8852064244c4f0fe816d9968731a3af25c2028ccd6c83df8a47aa6adde07fff34b7d32da31e25f2bc042870b3993472e4ac796921e412d343842083c89310036aaeb5cc7f042714dddc03e149477bd8b21a697b119a4fdfc98857f1d4af9474b85ed5a7a074f0e608040ae59aed8a1fd95a84a52c67106a5f08997e0c2119cf2a3a1ac65de4779fdd120aba28064fbc0a6313d3a697cfd492f263b92cd62148cdd93303aef95423c3a4acf796f72aa60b9f34a59b17fe28734da174d8b641d1d8443af19f9308129ab9132ae335b8870d6afa8825e01c15502f73a4dd681e4756aecb306cc8183ec905929ad0ead991f68835adfe0525b511dc9ba9e5c2de05a8bab6768ac7cedc5c2b19d1898bd5db149fdecc129831caf93d407aca26a2ef684588a33ff94add9e12ba5179f94f41a890e03f8b5d9b3a3a35ff58db934fe2ebc7f8d127266bce51029e68c7880a47e551e39c7dc263d50b066173ab37c3aac6ed32e751c305f04501e57688d3296792c2236fa7c9c6ba81975ac6ece0278cb0ccd54dfed1ad15e25f16bbee1b4e9f7f943477ded251d32756257da17f52591289b8350c2dc08a8f85337c09675b1f3476d9286508c671d3cc01f5c6da4ec2ad4905fd2dd7396e5c5551dcd44d339b1d7d0b8c0543eae148a2de10c884de527ecf4282466857922ccafbd5174fc78abf06297b232cfbb7620e76794301da0fab4c63132daf52cbc273b2374b39acfd300860182ef0b89f3007813453fa3a74d43c8d468727996361c15a37253858b376898f4f751612782270f953ab9fad78989b7915ee639c996eb55bd1196ccddef7149989cb1e5b2b859380d4440c00b6168794101e1078b5d07b8754d5c561af21c523a4516fc88ed0fae4864e3228aa1b708c2e9cb8a787d97ffc76c7dd392d8ee3be8af22dcd0c1e960410cecdccadd97931efddf7ed3c92796704356e56cc8bec5690ec0b5b1de93667e761b9f54d35055d029a4fb7450864cc5730758f90f8869c1e6502d9a65c5ee485d73b9f321d32d86b0906f7795ac3f7c95b3447d34c7d8d56566d2675f632efa743c30c24433c009b568abb06d78787dbc807d8b66731b12687cf76d686d47eaf34c81e34f59bf28b464b4556dd1209ac18b570e27dfd8dfee8807ee9609fccfca44267be28f97bf470f54c1007fbd6d6bfa4dd99524d47dc2821bfe7b65c2eddfa144533b5ae83f51c566e94adff156b1a382e0700c3328cdba791ed2911ee60cbb14f77aed3dc61c596bb73d440caf1f45c2007cc01e974e228e73b26928418bfa3a0854b670e99b566553650c9f9c5bf7a066cd76a613463fc5fefb8389e1230042a5ea55a6ac514cf5498a6ae42f906b76a6811e2c420bb42524e34195b086b154d9bfb8831060bca63850da7b1d78efd6a299111ae03e31d41a06113bcdf6222db251b4d17b7228680f76f0333c18442b7eac4d9bccfe912795ba701f3e56bb33b82d678776a8b982c164fa2e56d145e3737bdfcc5a9c3f565e4e6234eec438fbfb07f89b2be84f7fbb2bd0b11b9b0ffbddab459929a4ec5ebb37a900dbe586869ca23767c620a3445053dd951bdbabdca4373a253766d5779246c710bd0228876934296bfa2ccd3e53131ecb8c45e1a76d98a97cd8bdcf6d5fc8c221ed208857c7afdaceb6d2f7a391cce6521b3ebdccd77b872ed264e25cbf6b800ee8bddd57ebdd80a1dea9edab0445823ea60c0bea19be1665dd927e908cfeb35293ef15b0a3877c91359a76ec82fb1008d3df7c17ad0f461c9166bafdf6c7248e0520ed3e8db5334c53713bb053301d230c879e893ef6e64bc33539d887c9a1afbcc9ff7fe2752cee6d30991f12def9564124c92856d4a0c6e250b8bf7f7d2b438bbc9c356e4ea7e9d194d8bb082eed21b0d0819cb119d402fd1ecc109b469892ed143bb276d46a1dab3400a5f3ad1d97971fc4b56c85ad50e9369832101e90becaccfeb97466cdcaff047e9b90fdc7055f62589f789ee83c7b677b60bcc8d0f1395888ee637d37c24176d888434d1367319af9d99d783016be67b4be6609b657f03dec061f64812fe54ba9a69719a9c30f60b5deaa7827de4cdc729cf97add4fad9e21610c27a4eacf824db8cd738a30f238d15db931c8185541bbf507e1389d8cf11af7f0296220064ea0b42b1070af159f1c86e460d12efccdc67ab643f8488763fd43ba141011be5de3952cbb455fb2d5f1427c20f0425add617b3204023e109e3bf0cea9bb10b91d838b5d133703a62956a57f78a5a9357e349eb2b029e45f158bc02a9d810d83e9ca63cea1bb9bbee05ca65f9352c1e01ae0926dd5bfcb12032ccbe82417d5453e29ab83ddcc974eac3be179a216a0981ecaffe34d6fa1110000894d0ffe0148c06f3d28ea840de60be845bcc8522cf1744c1c2bb4da6985650752dd39ebfa7aeb1ee7053c81d62ecfdb94238150bdbebdc8e1acef51f2d031e6a47c4c80f80b243b88916ef9932f0c54964f41cd43247ff9336f04e05d4be86e270ec18ee277d85e721b41c1302436148098a07019d4929e13f66119152ab5a0d3ad63ddbec11c6a348d4353101c104f09dd7246acb5d2c77168e20280d8d346ee7f836f1ff3131740c5d2a816897ed5f61c3ac505a8ccce74fcab1614a8b0c695d97882fa8669bc6f9f69b5745a4986ee141bc6c1c697b37301dee04860f18f3ff4b630ce38f718b7bfa5f922b4f74124c160fa819d9373ee21351929ab564a2</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-02</title>
    <url>/2022/02/06/2022-02/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d80a766ef40cead941a274a64e0a01def2078e6eea6afa1ca94cecb75e486629">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7f794274c267a0d65c463f8f3dcbdb9fa2fd4d2e0d961ab4b8a796710a3542350a025a29b8484e6fdcc3a85d82bffcd2707c72517065a31922fd467c03671e8429d1e4a125ea20566185468ed81fa22ba0b25ce6d87b55457df8fd54447faa0cd753c5485f0a1c2bf3eae144ed1e8598da6f181be63ab22e26a2095cee3868e8dc4781cd50bcb37a3c37b78ad48225a75b78d64f0343be70b0b0da32397f57bd383eb1672b4c4556ebe7f818d8a4acdd0f772c389f8288d8ea74ec5505e88c854c477d87385c641aebcf278dca12fae3248974522d52d2422f4ca65920ae6a549295a438dd7aaf29b94180c336d9c96a69c9267eef81e6b5d06d41bdbe37d15f01489aa8b19895e5cff92209282c73dda0c8b71786f5bcfb2bcbef95cf7105805238e0f7a26b7c648a7509235cfd9d4fcd096df3a2090135acf7f01509454879050c0f87dc97e59bd089a9fa0125e18fa772834a4d497e4e00722e1be7f9c4c074d40724a5c4742d3ee4aa322008263ca7b6ee61ea8ca88555430db709f59df9194247fc0f92bc0727e7d103d3b5a224b00a5c96f3400d2912c41c22a1ded7fe9a92a9298d41c06fa524cca0156cff140cbb6fb0c118cc4d7d7350946a2eb2c2ac4e855f55d92421b1aea152293b43e2f9bc7e9f1b8782c5eea094679fddad70b98b121ca28fa32ea835a264a7fe5b0317cdae2db945a72f04cd32bcf5a4975a50c81655585da6339520a869a25e79f1697afb2a642d5c5e0a3f7a83f1f540d211851e92e444a4f2158b7236f05396332017478815f6043cf07ca8675d50f796ae4c90c70e01e19d3124a85d792a5959bd32f275b6676e99318c02dbc7763b43583161af7ae1c3e890a4a276e1e29dddbe81d3e82507056e5ee9cefd870797d4d748d15843526b2d2ed4ff62a86ca40cdfbc943f0c5f14fe005eff8f80b4d38bdc70472de3fbd9687174eadbc4eec4433570ae6c26a3072e56b7bcf5d842789e1c31bfd36c452e26d8624439d871de0ffda53621e759c1d1ab9891ca544c894f566cd576fd46a9ddd15da5e56ea2cc627c811547e7cf2dc5dacbebcdf6001a14276e7717a6955bd90e32d4bd406515e0f6174bb0fcb959e5e28e34b834847cc89fd0076b3143ad2c100e31949e3ad938a54459de470e2d2f26efa19a878d3f946f4114179e58e7eee7fc6baa9c11ad3618318c22b7836bc0343a9128f45f3c1ce7b0c662f1ee09564c68b0f13443829abb0f847d7a8c54d00f92cefbaf31ab5eebe9d4e4705ea9d367306686db376aba08a9be41c3f58dbde077fc46da8ca4fc962a69faed48f3b931f814ec50fb92e805635f5bcca48b6a36644ae8cea18acf17587e9b8d51c436f547904e27c85b572a60f5dd3ee4fc632d659a66161a9a827c8f7105715ce63fb25b77b97cb17fb0555db90a232595dcbbd5f7192607a03634d235c92b715c726510a80dc1c9d96f1fa204ccc3fc198b058b7f3c7c911e25721958702e0083cf73aa209306e1d5541d37c0fb8a0d64febbb25600ce2c5c5be07ec1afafde657e89b8867d7c02393adc16ea3e8b17aff88c463c2ba5005ce36a3a3752fc628b6dda82ceb248752b28125f28742c36342cc6877a49c456c91272b7595d4c844d8c83908256a13eeed985c07e0ed9e0ce5c26326d72df7b554a070213f2cfc848e779b249f243d250711a1da639b3265c00ee86e71753b8adeee3deb720ba877ae2c7879d0e4586d52a329af13a29d8c8ca2d3d83ff33055080f892a558f912e693052b449b7df267ebff6894643d46a809271b954d6ab1fc16697bf97ecef67644cde0ecf66006cdf5040ea741ba15f17aa017a2636ace89fb3043b002c30444de1e8b3efac05646de5e1bcbd7afdc21ed12791595a508b5542e76299d47501086ada8f6e14f29cca30540f9812f43317289964b500bcaa72cbe169fe354b85ecec4f6d00e0fac9b3668dcc4b2544b6e12dbd97ec4ef7661f83ebaef496b7aaec4b84a3b4a4e706198ce5a6886a5135f3be81e071b4471d0beb13ebf2e22ef49c49141513bb442405b9ee9ea3cf71e2cc4db8c42b6854697d8bc1ff408142d223615399bb3c9ec068e2805e4465403fcddd036b77cc00e568c64ecf2a52295a872be59a9f0b1790de44080dd10fa6ee821f264584ead571a17604ce4eab89e7fe131b5bdd5858e6989d7e18561533cf114236860b7e7bee0b97b23c12e2be9ebcfe6ddffe845c723c5f3ce66f9bb63c6e03f362b91f0a7c8a23adb000e76aefa405ec9ced1722f4dd154c56a03d8f5ade1bc2f3d712ca87ebc38ff8181542a81d0ed62ff79e38492e89f329ef69748ab1f53b4b2122ebb0d9c96e5bcfbd60e40a6a84ed0613d9b37917027e14a525b7a84884c9cb273125906fda5798cf14a2c2de21f168e23383d4b9fb0fa474baba49cf2d4ea2c321a3f6383e3327933fe0fe528e889ce485c945ced</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-04</title>
    <url>/2022/04/01/2022-04/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0eed4ea8269ab14707c9969a0c23e43fabf1085d4c4b0875f93554c046bc82f0">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7f6d7638d8c21c7fff5a3d807210c1e54ae938275375f7b66cea1371686a7086e2769378ebe153f5b6ee6b45b6bcbaa8e5dd1cc813800e4c827b79b1499402950338514879ca3a94e2e4751be696d570543e1ae89e5b9113d790b17c0890597c5b54fd548f8e504205c9afd6077cf336eec1d8ae40d44f816ba6f73cd9a3026ee0edddb4774aea9a00917ec727404044bd02146f7367e0eef14863507449036d4e88984c949a47c10b662686c740f5814147ec8f584bc22e82238a24650c8066b0b22f3273351921a718ce984368d956742fa490220a42306cdaf18f09eb347ddb8edb2ad9457dcdef6d73b78815625b15c551e5b031dc7ba3f5a2dce3836dec12ce43caa8d5818be94234d5b04df91c3c08c8a4f8700fc99ce2c1303f11bfa5136a1d468e0c527b66fd47bde91443a2c8c7d51ec49dd6769704f30a87a456d09a0d4659047ad8a5fb093f3a7a7f52e9313d37b047c366a0817d05d1bdf9227420840ec431f716d6da414530b838b68e6cde1e6001945a86e1a1a31f53fd2b486087b416450996533166424c6b2d68e0eef52ab41da0b6a8c53dbc68a1bc8e246b5dc9205099f438cfd1faf2370dd17676b7961d1f313201058d6143b06d5e49d2fbddbf70555144fedb71db8847762b2650031b79304a7e414280a13534b7984aceaf5575d94518a5bc7662399a5a0c9c2112fd8009198b5a01379bd74e94e9694038aaf5c167750ebd23516c3e8108a2e2ef8458eed98dbe20b2e9be56fd7b4716e6b3660083539ebf5df06b15e3c9b4e72f5a15d6abffb1201ae122712028ed3f1430b2b579e9178972a870fc2a185dcaafe3173acf609cac3c47a2e9e536a30f93fb3fe95fcaa7797373adda3842acdeec2d69e140c67f658499ee71b0fec82f3f65ed53af7dc7fa3cd068def80de720f2ef2313672e056d89674e0e9d5083b27518ddbbb3db2d1e034e5efc46419d911b323842c92005ca3ea96624d7582b8539e78b8ca20eb99c7a78bbca4f8a71da3bb7aa8eb6df798196203a6ff25c9a652bea2a8bb6913d520ed4eb5567b8a477be73441aa236f3e63e5a022fcac6b879fbe38ad9228f53f86d52067c0d70eb699361bdb277e8921f7a278b515cb8d366ec60d03d2e97e06f9669195f80c1da515afe05932822470957f8bfb023ff823364ca199ce0eeaf9e75e52038e85be962d82d14b9872be189c3f277abe8ce019f6b588d9bbd3423122979dd9634cd79afd752497cc23309e4b0211a442afcab08b782282e83994f4a14806f6d252b9832aed5a88e559607a1502cea93dd8cc266f0d9681e65106c9b8e170f8feda782dfde58334ebccbeca3d1100b03120bbc21ea2554b81faa93a781ded3c3fb94f442401c531bf4b8fff7b9ccf49558ceb3c7050d5bffa8af13ea995d77052b0852c7ed07093b8c45e2fdb19ef8fb0eb448df2b09582c753357dc3ce040d41efe1ddd2dade6ef0d7dcff61b3cbf96568047dcddb5bd14fd620c9c2e994c13eb1afeb200b5e64dd700091c4ecd7666870eea95737e4c7eb81fea9bdeab5c29d2330a43459d56e23431c9f2b50750b153c58c4e44d535f1855c760c4475ddcb390fba7267008b8e285fe897f8de696f38f88c10ca473c916dc8924c2e35b44fd4458f67c838baab507eb8ae8c5d43ecbf1c78b8674e33e3e9ef8c448ddac4386a8678569f6f859e49110cf4c150f2d860700c65583db81d6e61e561afbac69827308f5b358dcb5f541d7e56ca271e3ec586bd036886f383a96210fd2e7be96d0e0d0dceff5edf31e9599ff709c2e7cec748e1b4bd93f3dfa6703d3f1612eba9d8d16e929a552e7b8eb563de88abebf339cb60b2445d0e7d0a95eed160319048945aa2d5c4b10f8a01a7497a73959f7af62a563e3a80552bff9f000aff84361e565688b74062d99c28246c4c200cfe1ac4b4cfd2e7d20739ea02db84461e63ff6e20b214421d39ce3cd9f8d0a9476c1ebc91ebfd59b20b3f7bb5c437e7fafcb1f7c3f3c01e746f016fd841031c683f10e4838ae26e5ead52f684a70a45746a8aca4d9357f37795362e2b7af592f17eea821075257ffc6a5e9c573e82c22ec86fd9863907885b645ee47ce3d3e28f6cc8dcac466d4f2b85ef8a1af02db5ff0715b3a9cbe6065549f58cea9b1ac89745a55bd077dfbd45bf108b5b712e2f91177b4d29520f0efc8cebe59ef64ad0b365f315ca6629de5e92416f4f80c90be6cb22bb2ef3c95939de3ad6e973058dd3d9484e990d180b5f6d4390c245e73cf2150a8e68812aea4bef82615cf8fca55cfffc4c4324dbe903061f7d7c177fa4d7ae5c559ffeeebce468ff75646c469d4c32a9c8c89c</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-03</title>
    <url>/2022/03/01/2022-03/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="85d5bbff1948f868412aca3ddc91446753e8768bb3160dc39e968fae7f4c15c5">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7fa1d90e9bb2812140fe4761635a06f5256e1be426854b0dc7dfd61d028dffbd82318c342ace2e5c714f9c73d3fefd01e6c9e43ce9ee2711ab5ac1ab3ab1f7a6f6097ecd2116596d674a66cd218a1951c25eea02462969d368a547c156c1a0e51d1e947ca7ead08dde2727a2c5720711c2f2bfdee4f1c7e2cfb2c3a57daabcdfaa19db751eb58e8db5ee5f81b93756434db60bbe62ddc41f4c20a4c14e0175d15a32ad6f6639a581d0b04945202c63621b56bc1663cc7eb4438c8b07d05475cb4d634f4761c9eaf11674a31c1c657abd8bfa33792e18ed2e384699b685a545d9a53084e501907c57b947837df072f3090b3273a299a652985f59bf73cc576a27a9e2184d4c198a2959051dd26f122f9634d997933bbdf5cc5a2589373ae9ad8b40b2fac565f73da263f1ed87b2bb738f61f09ba4e169698ae6a4f6897b375f60fc8ba0d4ed1eac7e307cede8a4432e2db11e647d7c85f7f3bd7870fdea9630cfb00904e0c48b3d633b0de6942a512c9d4699c79289280c62226af76ecd9923e93b5d475b3454a7725c1f3f5d6dd6ed970f400d955667b58a0ec27ea96b4fe46210a95384368282b732b2d51725f81b45f34bc1af5e33489d8c5e5f5f0dd472e36e6bc61acc6f6e434a1b8268f61e1a14727b14a7da88683e006d165e0bc33f341efa650579c3c45b8148973fe1b434724dd7f1fc6bee6e198f7312c76d6663212ab8d80c8fa9f5fe53613d061897271ab82753efb02dff705e560a7317c82134bc15627a0301b7013633b7b7144f61aebdc1190f1975ff8105ea9ce26f7c9e7a42ce6b89efa123821056fda9e6e1895bd3b26c8de530cdd51ce5811d7202699fe1584d90346e94fc0e3aa95df5c21ac2d84ccb9ef8cc02af315da1471f1a0a3261cbdced2a1d1cc3964b1a7874fb36e68c1cb59aeb3118237fee910ada49913bd478a04eab74f185d2a19fe64a3454dd9d10154f3fd92583b7d86b472d7935212fa5790bccf1f60e9b77777f1eec2d593950032de0b7081f7a7b25782382658e9d984eb2d094a95321f99bc7089de681b8b9f3579341a259ef594c77ddbd03c75141b9699206e2a1beb02941af890aa7c07ede85cfc77c671fb80c4c778af49b4c16ba72be344dd89c8da76f71ec5de961a9432e79c0a035910ba25215be09856b7476da97d945cdb24300a53fef4a0415682edb6d14b6ab40c528cb7bb8c56456b3a1b4f8a68ef274fa72b2e7dcdba6af6aac9db839d4d59d84615f9ad69d68a357bf6883f3d317f6db3de1320fa4bde2aad17f20783c3a99a291e61d437facf2ca769f045d640cb2ea20bcbad88dbd0e701b04866d5223244bf9f8cb322dcee267a5f5e5fc4b79ac236c1af4ab0a858392575799b8c6a349c0104f94290fbf82029da9aaaedd23dd6413c4d7201522ad487ceace52f2b011808eab5bbf062d3142e10bf890ee65ebb69ecc220f78089288cea224c2e6fb97e78b1a78117832a802bc26ff0bc71fa3f38ae4fa432fb077fb136393437de3366b5cd317a0e790e3257d88f530bb20d33527c6328200ac95780efe2c6f5a000175aa99f705680e5cdae7cedafa96e5e31145c3b73de83806f052f6f20b645413672a3a3b4950f18a8c996588763c2eda2c906ba9faa8255e876dd6593a13cd6a1221a378da03a2507730bae3ca18a8c9b790ba19cade2e4d08346858a8f3c5bd19ed06c334a8964569a189d31730580d942f56ca4730d509272cbd601f313187308c17c94ab5d1332c0ddc63859f9ddaaec89876a15b1dc3625ab9b346e75445accc125b0e0818ed0d4a6cae87926f19b01bd7967b4a3dd14edc29e86f364c962e7e9a8f028c27337bfb58d407d5ab07c0622fd8952eb1e2ee450797dab4551b3a33d39defd425e9890b2e81e5262f3d0ef1ee8823ad3edb88229b9226653891b268f9d47a37267f0b9530498fa9f8995305ed24bffafb603ffa09d06c7a6287b7be71a67ed879f33447028601ead61ea064552b76c6932cf6d871c88af8a6afb2a38a224ee038507f5bbb7b668951ced02e19213e4dc7fe8cccf8bca052db3ba48a99f9789a24ad36f67d09ced9438ec2a96e758b255ad8e438e4d552539bfb9fcd8e200887c995c23a17e11cce8622b55b7a2a494f151e3a4ac299ce424ec90ec1d236c159c45cd0f83b28bdfbb82d4f8f98e52aac9dc55d77d783a7e626aad7fc2ee722424a766282c1f8097081b6655e9771a270052fbe11867878c7fa9e264f1cfc7f09fdabf468b0e592163f1360977e1c14773d29</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-05</title>
    <url>/2022/05/05/2022-05/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0544e5d99267d371ecde685baec8e81b99ab7b1ea719999146b5977f2c21eb8b">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7f4a3037ab83f88b5fea16265229a16be65022f30d442c36abf1a81950cfc097afb1d6037e82500b1cdb4a234e8f969c1846d8a50378084a34fe389cb7ae5f276c281822f614c57e099e5ca845b3bc9e3d1630daa7dddd33ae026c73346a7d5241983aabbd7150e13f08e2f93fe4f3a7a2be32016089dfd4496962c9f1bc6adee442348b7dc15847c9c64feaf218fed8e8a2606a4c400c5304c100b7ef3d8f10ab01085ff28fb40a44bc51edc57a199563c8b4fee5246646e594f182be9993fca3fe59e858038124eaa85d122ebf383618a315c2506b69cb08ae5830760a741bf60665ecf531ab7c9ce3117ca39cdb4e068ebfafd182265da1cd74a09d7903bb22fc6dad5881741e9831cd67c547fd089866b8d1faffe7e44a91bf2f5c612524d796e2b6c297364e795dff50c69583a35476fd1d5c2de1b57f7fa14f9166d855fe66d84752b1169518031fd1712049c0e6222b7ecadecf7ff511cfb178405fe32f28e68c0457c30071f1ddc39df56de09581f7da2d4b1385f99507e9c92a0ff3f6e2a6e6145ceef4af4a4c3dcaff1ad513b929d36ef6ec4903ff8f56f16e353278bac9e1461831d8d8749e384ee08a2cbcc7671744a7b7d30a329b736908e60a003c3b3e4f262735fdd2edb758c2bcab17a17aad0f37753c80fa5b80deee9faebcb2f4a826632e578336ba52bfad0fd987475c885f9050eb465a0b0b672f8d6a6e4be630a7b1a5b7056e561aab0f6ce26d87bc1f3281b15505d5548f727b35c831cc99be90079140f658c0f466736ccf76aee99334f18df4530d72e33be8f4da4267201b0078e8ee29ef6da14799623536bcee6978820c53ab78e04c8666a64b63df17170da11217fe5facc8500f75511f8225691e4eebc24b760190a804ef2addfb331d189c3bceaf013dbd11a008ce6dadde715398c38ca312bf9fd0102b2835238251a286a665ef5862749153fc36795b4ea498a0dffe1ba18beb6e2e12dba7a636088b1b9342a97f3af2576ef6692ad07fd366c943e0fc1cbced6b1058922973592a6710f26d7abcf3ec7b7883478f160fe73b0cf8b258147bf7706d14e2bddb91a40aab67d4badec16b672b0886bf119b12520089e97230c2926f1194aa61d0d9aa3da08f33bc7aa690ef8374459d42ce04066cd18e80c55d7569e192a80838deadc06a0227ca6fe7ce477a5e6f8a6c8a28fbc3056a0c29749c44346d45f7c57052c2911fad151f7edcab0b58de12fbd4a50fd25fb0de9ee9655b3216f096818d36316129fcc9e4c0a252577d312084e89320eae0332146db136ada35ee1b429c67d240e46955aa4d75058efafa63e57ac836ac65533fb6820a93bdc62490d2d21ec0023f3c3db6f156748d0c36653b4db5790745e0d0c27a043f2c260727cdddc06068c996f98ebecd42ce1b4e6e809393c95250a764583e0da853a00813c29c92de3c7f760dff99f2a2ae8cc2a02e6369fdfebabb91f79ff9ab6f883ba6e03f225e54992ff87c8d3ba2cfe591fa687821641979d3887c0d7dab4eaf0a6ceacdf37838204ad5501655edf48a9a294eaaab6b71bb8a7f61f1aacbe83e7c8fc2dc4059cf5177af0a7d5f7c29bd055af25967a8dcf574f08a15e865b02438d7c83d9d6d3db11b2116f021f1d0c06dbbab3fe514f97a074c86d30e2a13195a49eee953877d178f62949da3f2d377afdb82b23e66cb4f849351ec50d50388b479211830bbd4626b379da5ba632f940ebfd057740ba2103babb6bae817ac56e2a857337de9dcfd1fe0efcf4d92e233b1f71112b8d445cf3d76cf671dc43ef0d58ba48e299ef1211082d11e62c68e3bf1733cdf91d5e57dcc07a05cfa63985a98fd72a7e58e49d3f93a7ef617d8a59717aa195bb13bf78fe197f560209b0df1404ebb933d3e7e4ec2322c5f2b6db0127daed90bf056352eb09d31c33debcaf5e1a3608eb508932402f819380bc556c69659bea8e8d6ab182104503cab52b837d10f9333ea97672d69e48374ea656212f20f8b61e8d6c58e75816adcc4b91f0d1656d57f15ad716cff6d0360737c2e1e7fdc542a4abce6607d14187e312a394c6027d5f6d4d83b767d874fdb415d90fed350ec731b228e2c447db52a12a7a829991a5358180de3296c894342c06efb3749a483bc9dfaf90451e5b7387e735d9154cdd986c9f24dd3bb627280d535fe816da8b3581bc846a31149d19d5b8583769a3841ecb7488667153ceef40fc8a1e55e3a6752dd016728cae82d29e53f48cfd54a8928cdc0b509fa751031f072c5afa8f4b9b4bd3fa5e84853bdcd70dff4f9d04c23a1c59196ff717429c4ee7b4e2ee8c3a4b366ca6c1ac8eaea4d891d791737a971bf5867fea7e324bdec04ae3913a653930f6c85c62cc88c3b711b8d1a2afcd3bdc2b32ef7c34168b29952d2ac53a896f7d65d5efb743b03d13cbc41ff92cb810072280187c3fce683c184d14b15efe78155d2922e1b8b12331cbaf05c31e9cf71cd5971f3ed598eb9b24dc31bad45015880d11950778d8663511c7101bc75ef8e0efcfd4d5fa348e4ef29b0f79a8c00565f6b8a1cd0ef4500bc1c18f052562a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-06</title>
    <url>/2022/06/01/2022-06/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6cd3c9b75047868ab5afa41c81a80d2da918f93b200c88918e999f48bd90c773">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7fc720036030b197df5e3db9704742d5a6fb7bde31a833f7fcad38481d3c0bcee45e8ac2508cc3c4e58f5a1062c7e1bd6e6279b51e1e19ca2cf27250c84c8f338df7a155ae1448773d09cca30bdcf9f22eed3604598525cce36f24846a6c5e0e4fd2746f639be51e74b0f910a5bab5f41f5b008cbc4671610727d536a516b2b23fe5242c46bd359ae70d65910ed2849564d952f118d31fb97f5a543b58152e2faca329177aaf53e3adf456aacc34a9660c52320464d30d7a5a369400047a5d31447449e969f66cb5507d5c1e21d54ad732199f3b67b8af12b6e8a0d1e0874fb5f1ef97c1910a5945f6ad01415b6b2cb36556b91095c6aa42a72d04a49bc7167f4b558604287dbae7cfd65cf9d154197644b1ce6767cece737cfe898d57d13c659765dae3831ea2c66e8d89239d260fb61b868ae5ddc1d57085038e47a092a3641ac0ce8cffa233c88b4c9df8a89df90741edb499af50870a0e34670f65cf3f3b4bd1962fd3c3303e376b6654d86bccf5af3d78159bbd39becd77bd5d2d5d6e7b930aefc683944eea8463a1499f499b6ceac35ba56da4afc2f6ef15ac8496878977939d7ae9d04f39d2504c33c1d00226bfe9a08aedb488695d60f8a82e646e80aeead3440fca0e7af32821d3c36f2253bb4c59119596d02eaae819496e4a7b1adc635f01c379772e57475348289b5ae09b2f9f2d38c8f2a765946fb9e6365b61b6508e84659ac89263d06838ae7565c13a186cd817dfeeee128ae91d04146c8c30ad0aabe52094276da5e4b34332ea4f7e8895aa1bea65125249e33066ca1a45f875bf924cae7e27de644274c68570cab527d1e22ef37066c9e227e5540f54280b3888bf39866ebf5a102f9018a852b833b49881053f3afa828a591520f5c49304cb6bb2c117d2f340ba4860d4f73b661d00eac4f7f859d6db1889697781ca686b34c1968dc776d1c854f61b58f9479d79eab0f654972f7141bceda0a378838360f0f8a9879210e835d7a82cd20554e66b1763c5e3ff1cd979d585c87efaff21ea39edbd9072b2c2808f5bc98f930ab0f87ee3fdbcc75e286e2acc164175a08d9460c5f0c2e1294dbcff9a9084b4f7f6479f2f3809680b18fb38794f7ec4bcf5f8ee2e3c31de13973a320880b602803d89a1da206d9a0c9601a925f66434a9b9ff6175a3571fe18d2c3d3cf9af9813011afd2a52f818f170e60d018acf8d03f1499e22d08affbd887c9f6955232451b5646bba69de4b7b768815f1f056ee231f8aa9b49c32384312c4e4848164831df325cb5539239df8936f0620db5567df20f91c993f90753706ebadd323b15e4d1c2e75bdd9828d2151199e7b28d3e483774bb3ded64cdaee1483a5e63080f75b7977caed3b0749ad86f8766528384bb5a434e1717686fd1144ebfe2eef904ce9e5d6de8582ac72128a0894630f4ae8b9bb9580ac1be83bedfaaeb3f20c0df0ffb3bdc30157798746cbdcddfcda0f922b9c3345660ab205336effb15d5b086d7686af0f6dcfae124c42b4dd4b4983b4dad94c4df854992aea361a021115565555c5ff1c8fdc5b17b8a25e81e3b46d5012fc107ae4b93d61ef5107e91060676fdaf8912152e6302970e5ac88ae961cdede3898e5d6863a9df204698cdd6110194783713bba4e975725d9104082de8d1644b5f6c86c4fc817761ac73f75c56b3a39e26a6da84c6c9701d767b1da81d949a29ed43c8fa51fc197550a8e6c9b84d85e7837c69898a60e86b5d90700ed27c6e23ece79241b3dd13f8e12c6baea26241309568a23dc2a5abd8a5457b16e87b3b296325c6540569f50cf1af6569a1fcb521cf2388c711cec2df6fe848a1bf827b5243130beb11f1afa9ae70cec95365a1bd329ad7e12c7331489f6108ce427c01297d026fc031a14e05dee8f5cec3368c0b16b7a6468f7c87a1eb26e9c42162066d57a45f4d0d5346a7e91f6a60bdafeddbb0561fa296235fc21b15f776e003537c1ceb800b847470688d1c4a05d7a648fea7a6814c24cafb4439e573afd7621069f8ca68254fa60883e52aa0515ff8d924e3b60789f4a4e56324c63f420ca8da230e02b7b02c11d813176acb3060b1f12dba261c8cce4bef629888b12129a5e3210808e718e94782b71b22006b8478eee26158269e6a8baf99a32b589527776ab41c3ad533a183bf0d949c5221010be665f2e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-07</title>
    <url>/2022/07/06/2022-07/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b925f172e6180adc40ccb90f439d7be1386795401d838234717f94a82b0a0fac">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b35f5f40d8365cb771cfeb0fede49c3bc588f44bee9f68840bb37842909f10230c3811640631425f340116d708482039fb9ad411c92d61983cc993c37d6745d1c18ef784a5dff3c9a6f5003787e7afd3fc1470189ed1d0e98c434ab1c4012921d4219c0054526815400c5503fffbfa79f0b84e0402fe2f76db13be8002636eb0a7cca3e05ad74273dfde50c3650e06005c848965dd28fbf4ad0cf540dc4a0ab4625a5c0e21d865a2e20ca4e52c21744ada5554257c1b4ef2d743100be9212025efb854a5bbf0d15baee59ddde990ec3faa91210d7972097741130c861b1b40b040efcb9085ce793517c18e9ee846bd57d3f9e7f9c2882af98674a5ee04dd3f75f274052a3574abd5056bd8dbc7da1de2c23e3ceb5f83b613a7b9c1a97db414d30b1f88194da14285459327b6c305e5d284ec8af8cbfc684e1360c842558554429ff5b5469b61c1074845ae215373c4145b4f318248983582a7b986eea72ab6d3c5d1b3bd378bf036556309d90d6e3dfd4d04fc1c384635991ba238a074106f371a42aca05cd741bd8c9bb96e31d277a49bea53ec1aa920c5a3701d27c582c05ad8b9571c89545d558e37efbfe62ec2bed2ce4056097f8b765b8d36ced18fdee101620ffb8a6bd8e9519a68945bc9c94d48a70fe54456c1c14fb917d67be7fed2a5cf4a58c0f5facfd18805d9c092ee6f81fd6688262c8ef8160bb2e0d786e69f0610ed27665bbd10ddb322384ca1946d7aa26dc0472eec5c7ddb16cffcd739e27a57ad949195cb25874c26b46d2fdc846a5d2b13ac32d017b4e08f94dfb80f9b91beb12dd390af552b2eac78456a0c0d70df16298f45935374de483d9247b2cc55dcd2b432db54175170425b7d8303fd50b175883af1d1c487684c2d24268d3372</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-08</title>
    <url>/2022/08/03/2022-08/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="de8d093b03a925c247d7489c6410dbaadf752ecea8027b1458b711825a7056bb">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b35f5f40d8365cb771cfeb0fede49c3bc588f44bee9f68840bb37842909f10230c3811640631425f340116d708482039fb9ad411c92d61983cc993c37d6745d1c18ef784a5dff3c9a6f5003787e7afd3fc1470189ed1d0e98c434ab1c4012921d4ad7b149af5a5178cf86d867bab0708a25f6db02adff428ea3eec8a9831eca8e7e1df6991d2b860b5179157cd63169afb69f49bb6f1edc664fe2b4682d99dc5a0d1c0974d03ee75da433b30e40ec157d272a5ff777447da288da106d10abb2dc5137bf5e4a73154ad7ca61c1c26c396ee0dc08ec193695e0b01c35400806af1941cebb796bc759dc55ed60b23994e10a49281113ef9d983e004626d9d4c50d44a7a4669fbe12a969dbe76c24837f144355fdab90a915c421e422cfc41316c088c698388023f9ea2a922f262c613d0ae7cf89f8eb49040d6bb7c1d1dec657da72339820891b444f8744a624d10bcbf36ee42a3c81f650d628a2bea9acb84fedef450d8035afd5e8a7b24941bc380c1550cb15697a4721dc1e57a12549f75bf03186c1e75fd3cccc850be3c3731b15fa290ea46c0bd240b6c75e78c0d51607cafce5db457b460329f52173f8b1bf2fe9c670b61f8a355a5c8440edb2d451923a680968677c18795ce952d4f2d4858fbbbf81dbca64e01a12bdfa0a7329df422a8ff2db2069c3edf60a825609a8cd0feaa3c913a0b0f3c082f03ca8a44aad10382759dde6595d184954dfaf220e36b07bfa5128be76753664b99ae73b81f9fed16177af05d2702e34918f50dcc2fc7c50a2203d66b76553f1372f695a20320db7fd4e6d7cb4f14079d66cb2699242afea8a6a012d316236844422df42d4ee77586b67dfc430f8e2c05ae1c288790277a5ac997ab5676d150843f53afedbd238208d2fa5a7235e7cc1f4179e25f44c4f9f4a46105753ccb55633ed23e29a0bc5e394fbc0493a252ed5cd75d6f343896a7bf807625f90d9bcac1337bbe4b5e5363d6d750a0307dca8e5cb153c2f78b43a3972daab61cdec6ac7659399311138e5c4652bc5ef707240ffb21d73023d2482586ec64626fd2452d4714eea4e33a6de798ac2d038a1aaca0e77b384dd26c933ab626c3bdc42b9e033438039149df6c4a13466dfe51b4859b928dd0f3b30e3aedada5761af33edde5b4e100888d3e2a0a491a567a25034e8f3a40cfa287a13146c6d28a1f8db1897406e08713e729628116010e61ada0eb8543b5a6a157a61acb925c6a82074c3da0d2b2fb9d5dcb9167ef3763dd45339fe7da90dc0f5abb10ca71aad71373cfc231ab415f80527bc2bf72d0ed1ead05e25c017f55c6d83987cc060d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-09</title>
    <url>/2022/09/16/2022-09/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="71327ac334782d88fb66d3c75472e5eba2ef227957d9add331d69b759ba32b86">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7fa76ae039386dd7a79fdb68a27563b9ce5a31c9880d1868ce9ceffd7dde97ae8109c99789d5f2707e4096c2340cfc77f1ff706b2d046786d02a25b5748d1d543bb2741bd55eaa9f1bd600b74dcbd6615c5f37cc7840ca2a62dc7c76724c0f880ceb1bf881bcacd4757942bef811a54b12c4ab23d532949a4507a589358a62ba858beb371c4368f0843d032f9f13caac06579e57a29649572b865a193ecc48a27b8cec7d163c417649079c963022d043008d300cbc4d2797272b6f0c20257c827a912aec34600886771ce123fd72545b3e1884a8b9cf9146b3267fd8e03641e660703297c6581f1c0fc918f94a07a73998dee57113943864304503be530e837445ced73c5380c728173fb4d8ce3afbf0591aa204ab77d86dee27b173b926cd16e31e4c7b1598c9fa14b264ded3c5be4b96da25dd1955e2649e3503e196f5ce3e7eaa472976add06ab7dd6216d4b24d6ca71377a33a6e1c07a3ab5bdfbb09685156f61a34a75ca22047d6ea3ab7cf5b9d89b00bcc525566369c41d288d1f895bdea3c02879f34f92cde7c89bda36298abe40e426b7fc64d05077ee4d676c04267f540c242756f92d6a19244fb3dcfb2923eee359ee12ec4cd2fa0c2333a3dc549e300b15e1f4deec02802b921260f1c311df662fac41708adc21ea2a484c5d1a11a261b6a950782baf2d5ee0a6524e4f4c0c0e2c3704e8e0938b2e80d8353211d873ee40434f3938f3617ee18d153b18481b8103f8042b8608c1fcdc5921b106b2502c344fdd554582d8b53d9db0b449f1a8323e8d01faf906605892898718f6fd6ebef49b583eb3e12a9ccc016c4c54c98256ee1492320887715981fca266f9b9cc9a0ddea560a75c48527405cdf3f8bcf8493abfadd59424fa5f2754505850abd1c500de235872863f68cc7dad8b564c2cb651ba1facded799f8e782749234125c8b7a3a71c8edbc680cd581d2e5051f6b2232965976e5c5e44282a4ae85d4c10b7ce9bb65719748ab2c6d0992df78923ea03bfd27c8ed1af611ad504e7d781596ba25867bc180eb2735adc0f179f56a5d87f6982ee440edf2ee81a316ae9245e2d16669ffbf8707cd7ee4dede6198adc8ec032d0caf152da8497c5f738ae75340d8a902ff481d769b39632273bca86d7fe4f027a76f9519b3baf2b53b0bf2420a9f4a74fb9306e5e5aadba195371b05a622d2dd8bb5e7e6d15d849250dda6033b0d8bbd27d2d86c881b922d05d14e26c93009e3d04046a6ec51c9d54ab9d9bb8e274d7707d0a93e1a909ca6e82d21415fc5870a0141ffd3db23f86c82cf66b1946a810c0cc3a99bb06f150ce86c94aca054b4e4c9957afc04ac11cc956470e57c7bd32186f3a630a2090026107e2dbf6de7f16b5b6a6d94b061113a482f52bd0d8ff209aa8d5cf4f598a88dcff5a283316398f7ac323a7803ade9432889690c4b129493c7ad7cebcc43151d4829b36e729f1301dbc1db070005d5c1b089478ec6b021751171270cc8f22f122b6030ef8ab26eda04fcd60e9874fe95ebc7c965ab636af1d298b0e008b5be9f0fa38ed2022b2d2cfd8002276aa8096d898fc54d23d13349f78308bc1a976148cd7db1f75a78e35dc9f30e38098bd74fd7a79c197ea1b5f29bd208107fea4a1802bc4011f5d64f60ca71e061884a18300b20cac69f8ea5f20730e3cc6855474b7ffbe98c58f8241d30f7545be2f2c4125c1b42175d8bb5d0b22c26ddb2bca233a9730c4f24ca568dea241787373c61476b87e3e3bb80d95514b7878e07666572232db247d139b8d0dc5776884386f7ff7ef7440df4482c9d71d4287f95b6aa45d1d4611ba38578101e73d197bbad5edba9d1196ac5dfbde99fed1849208376174662d44d91d7c7d4bc4be57acd1b8e861acd7d1e58ca66ee7e990f06467910f2e59b3d8aa15cd9d564201f3505aef8488ef941bcc8b4475cc32dad8ef473e3087553652f96e8923f3de797734ccad0152774a7a6872d53ba1ade4e8c53d76c341b7d4978585cc9e3e95ab1c69b594891074edaeff63b1b89eb0e92a96331d6970ad5be24e1f8718f0c838bc02e12a2563f979f029bb763b06299f5b97ce8c0b609b157ee8c4f420e5d79cd66e6120159c81e6d405d503fafe9372594568032a8967fae0b9b2881bd18d0b6b1cfef2d805c383d7add0e312fbcdeae52cf8364fa669735df7335415e49ff88124b5be6a1b6dc65cb7aac6d0575a201c54cd20ac848ae8c3eb</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-10</title>
    <url>/2022/10/01/2022-10/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="30ab19bc93249e4c1e716371542b5bff4627e4cb06084d3fb115ebcbf0f70e38">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7f2fcf07d492581ab13215bfb356457a36abb5b51346698757af7328eb752fc139699e3bf5735598c295e44df39049cdde5daec51a22b7e1475ca4ae20fcae0c2c3d8eb792efcd6d947adda9fae9c4ed39e2e211536990bf869833d6054fd0ce3599d0fc9c8c8b19bfe887030d25e2d2992f79b0a38c9b765a77f4dadc2432506427ceaedae24dfe2340cd35589639342d63bddf28c7a8adacc0662f8f44eb278a47788214ec91777b77881686b1e22329a694545d745a37679fc91e7f6793ebce251d3e5b1013a37269c644a161025d2476af82327a5c328ee4b7d50380c3fdfc653c00254483f911b37f3fdaea6a8d55f38d9e2969df9a23cfc9f9228b4908ecad6a0d5460cbd2c59491c25eb1dc231741ccb967508ae1955f3f819bcfc42832a119e47552351f78321819da86679af459168a27722c49945326d78328b6f114e9b3f0f827f9805738fa1bf74f271ee5b3eaa07f0163924b5de3504dd5b5815736a0b4a3cbe4798d5bd0dde3873241827737600dcf1aeff13c550df5748e0ae1c21235dabccbc9475b3acabbbe9d6d0a2fa1ee660e3485cb1692e7478f3984a39c81f392c186b130451978e27e7fd3279ddf4c0667d5015f775d45ff5e8c1fdcff86a3d11e3e07f3e2e1815bb2ae8798eaff140a782117af57ca708c0fc6dfa9b40face8abfed102c61661aa5ffb45f17c3809edb8c98c0f8cf391b72e6e095ff4fc38ca94574274ac8e03721318b818d2efeef0ddb421724dd0db3bc75845719b8ed1d8735397026a0a8b90bc535ef1b47a393ea9846bbef435f43faf73eae51e884f39aadb5896a76d626492d7965e29dd706a08fbf89eea7dabe8220c449840ea121ef721cbaf91dd9603134b6a6883acabc62727cbc71d9e676002f5253dfe1e140d8fcc22405a7fa45d5cdc8e86ccbbcf9c2430de1f06e103b9e76211cdf6bbc8c7eee3d87c3d9888468ce61d05e1544c88625ccb9f3521625437d964292ef7a7640f9dc947d1bc6b3ccacf94d32d422f0f5730af51e4b79363477af58be57d04f0f85e5c2d0efc55872ccd462a12a49548450782c4eb4a4a1fcf5dc82d356c469f93a922963392c2affcd8793d21fb14b3ec16057f040223dccdad8b116432ad5ad0b1b83e6e04b90f459cc80af0e9c3bfe03bf77125463a33caae245ca423e38dea87106c9297ae6d83f4c49a032381701cd6260a2c101e331668866367ad8320b4276ac0460188090fc6c77f7ded351f74db3bbf145cec2a597953afb6126280e31af2f98dee56e548d0a5895ee06241ed9efa60096ab950cd22873393d2d3e2d92a220e48ac35183847d6f6aa89c5290a28963ec83b71225e9974cb8394b5722191f44ef14d765b8fe8f8a680d6d11483995e1962ba3230de2aba4aabfb050f7f367edc5b86b72ff00455dea40eb3f102af0e0fd4376a6b150a8e4c85ca7021a1e5585134e65fcad6dfec0686b20c306f5e3c097aa68eca18ce7aa5ff843e75e86934f06de691cef56bb55a559dafc274b262deff2291944194a30432a9af444ded970994a3bda80f9a5176be8242f6027234e38eeda5810e5a77b664ad9066b7fa5ae02cf6e4b1e925b8ed388bd3b35778b9b376772f6bd4218176e9cd4dea2490f17e13affe46ec21f15d94a23cfc332d422602e94a4d903a2522c07bbae60b8394830b80b75207b96d09ddf6f86a462a78c458aec707e6ecaeb276cd12b4e631116a99a05f7d0d248fc0a0af3ae3d21256d8eb4e6c7b6bbfa163ab8c5f6df41cccaaf44aca4e666ae274826675b7be3cbc77792ff98c1100cca4f587d99f8d88c0fed47cc099f68e575ebfd519b0371bbab2ee6ab2c67646067ef0caa7f5f8cfb611e7cb6b3cff26511033c438277644ede9e6344bec6938421832006b580ecbc93d09c3ff624cbf3b067e5439a1c385c07071045c11bd37caa03e899c70926e10e1731b728bdde928a0ad4f606af3e532f52208a5a7de80b7ce25c4192c30484fe8ee979a3ab91250fe78111e74aff44e6da50792753bbd7bca08ea6331ce99f0a789293ecad2f257be9ab066f0adf95f60921c37bc5e02d6c6b0ee743d1146993ac580b3d3c8be02d75c4aa61c6b5d216489fd665ed7d97212aef730b73ce58a940c534d9aaa57604fbd9282f73ba06f9d2577cfc7f9bfa25052623c7cc0f1f6804a9747a8e2b8486750025f1f54832b31a845baa178c0d02e53c6286492fb04c6b6bdf37fc3597d9fb5361e4e2133bdb75879de927c5d4e6067c8b74046b470834371a96c8116757257178c3c05d810ece07421f8da959293239b267272ab609d456c0cd5b9358cadf5542abdbd041585008b082a9e06177f5488968db46d70933e40d8b5e7ab0ce3aea28c59c55fdeb5c5ea42466025d7588266ca5e1bd276f7a1d3ec9ac634291b71e6ab1bcd94057306d414b09e6393486ed0555846422600d16f0bd3cabf5f922e85822d5d364fdd2624651872ea95ce1f809ca5731b52070a61a8071ab6aa67a89d8e4be4ddfe850da31035aad0d6f2324ced156951db288c60778dcf5c92c9d33582d00759a7c8617edde30e99cf6cb08fbfb096fa5ec7a932881fdaf7fea48b9f9234b265e999aab962d5f832292c91555e5eb66e9ad0b59343eeb2184987c448ed56d565215d568c82826e7214f3c9c6ee12a2154f123b9262da294f13060e1e381e176836e9d8368a99e03b836ca4608a160de85a34c8f51799ebeb676ed8af7e29dd799e3be677a875feed6c66667e0fdb314c0983a1d00a76f4cefbd64e4e8856f19ab73ec060d89cc6599f9eed9d61a8c6cbfbf90d8fd74d7339eabe8277e5132cf133f2016c35111246be758c265d59d8de2b9f9efc0e160f9a8a2dcfc99d2c53ae565c7d16397bde111368882e2d5e0b1ca5eb0d8250f37d043ac6446de4fd99f05ef5a0f3598c58643debda3263f83c0433063f73bdd1a9e8b197c3784e688bbd5e005bf91fe6487823836331c540e0633af6c6c237c6210deac7c8edac75ac4d30e48ae19163e0d8bb091c1ce3549c96a5060d73de8e4cbce986e018b1607616f9fbbe676278d34a263cea660f431b67d735303cc8cf4bfa018f5c80ddfeb5447dc5d290e9c1144b863065533381d8492b35d65ecb6ae3b8d0b53b06fac60db25d22fe6d54ebf7297cd695c7407cb5ae18521e32a5c89d9d44e6095e73171947b12cc1050301a264c3ddb1a031236b49c0e14e9a4e47cdb7c8dbaf1b671a206d4d986f4634eecbe0a0c2841634fea17c061f5dcf1252a30c67435bfdb52c9858832fd8ef93460a975e19408752623baa73fb6a7d1ada5d223fc74fdaea43c1b7cd32eddee0ad79edb409085a509a9e238b64f4928cb5936661c6758de93f62241f55180445534bd782ef10fc518051e7837f5eef03225ee8f0ea3869e74535afa7a0df54554cf32a3bb5b725106e6ac33b9c3086da30c76a94d7baf315c1ae87fc8e9e5f18dc6deff8e4a78e60e1ddbdf4504333e03da80d78326bdc98d1e0c15b51da17c33e797124c3d7bd6996c4857b89f4c64d21c36bea92a13390c3565ed5086a051a8ee951a8b4d7e2d16fb5937fe69070f05d9a888636d3f9f54c8a0d252fe56ced7dc44f644d0f6a308866d6e2080eb1d55e57bac72099afdd93bd96e4e0375d7dd526ef798ff000dd9ce8cd4f97b0b7e03e5637eeeb</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-11</title>
    <url>/2022/11/01/2022-11/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="86a753ca387bb2f3e57151fb6877408874440010ec7b2121e8ace7d36dc2035c">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7f52cd4c24e33a3a2426e0bdb32e41df71c8752b604a85fc89e8fcb91bccfdc278793f713b3fe34f972e5e843db0dc5615e344a343b6e5ed24914255d12d02f2d2e87e3111d63e6a29338363a69b90e51d34d25390d6cec3423842e8283dc3f4a5f885185847640954d0fc970e5ff9b8b27c350279da31ce7415b6fb2655639c30c9b21a524629a2123cf7b5458ab2a5feaa33622173c1301420b2eeca00c9f1e8fbab83daf4ce8aa40db97f0a0b96423492817d38c61461e1aa00f306748d7755876b0d7f691f2f9ad1d14d13bd31b827a955795badba3c0ca21a0ce988c4713f242f35ec614bb39b4dbba6ae0128c5ec965ccf1f42bbfe447d7c0b2501d672bede88b09dc99337265f7fe37785fc92f91c41ff9410c76ed583fcbd12749866c0b900d7a10fe153bc6d208026c65d0c913544f097e372e0ec3bfb9f5dddb6b6007eb5ed17f86447a013b24fb40a93b220166a1bffdb8b668cbee53e1341071dbf9b3e254e3450a15f5c74d24c9a399d181ef14dd8b9f6d6cce9e76c9eb694d06e588b3f8130149026a0192fc7fa7d111b7b9f5a95dd5ea110f3192c00783d9a9b188cd9db1c29c4694caa04052ae103e7d67b5275eca93765395b1704a876c37369cee6e402d52629b24d469a6d997c051f434c5459a7121327326fa942280adb800a22a247db3dbb6e7ecc7829f0b73962197ce6446141bd5326b0d1372a0c04f658f2870e4e49191be156f6b590705d6a0dd2a779a946f8ef55b8b192f6179856b7b28cc634d62e825cbe6b88d48014f1e7036074ef5d0568a4c41d8c54b674896c72f148f0c869ee0694e7750ac9df3b1e5f66fc42cf6707acf895f5d9bda1d8f6b3ecd62e9ed6883739e7060553a2510d105aee030365aca6e0cbd89c031f9cf760efdfe512626c680852db606016176288eac90a5ea374f7ffc379630d160a0a2ef43378d3d2701b001071f481ec1e8d53b5ff0124837c5e36bebb5ab2442115e0f975e68c097ca803cdba2f1a01683d1ee0ba3502d4ad7832d05a7f8ea0b395897da78e2249f69fc638276aed625d3ca68972f7a12e08d83d234bf5dacbf2f2cee1a828cd1c14c84629bdcd4d0a433a4a312fb2f6f3eaaad449fd4ec099d20071bd1a20ec7aaafb34bf7d9d002eedfbf55f27a971243f613b8ea2eb3d79f34b39ed93fc1bffe3dd68658addb997706f0b98253a0fe328c0e8761c53f6f2746203a2cca60b93a6e07bee8eed2dac39c143c971eaabd3bcc8aa5e9252c5882bac66203310ec44250966ab39b47f68e9537529512975ad2fb6b448d3fb1955f27086b8a049ee7e02827ce8f2ba3f0fa31c4b845dc51850292e880d753e5240516f0e38f87a874ab494f784170ac4a59af8d247f1c9ea140f650b9d579f7ab52e9f68d10776ab474fa3adbc8f82b986c5c3fa6ac0787de1cd11af06a933dfc8f0843bc49225a63bd0211dfdd29b9cddd5a6d4dbafea7dc36e2c9ad01c48c7dcbd7d5cbd7083ab51f57464698b8eee87ddbef2c86f68bdb4c6dd0723a9d619220cb97902df4b3c455d20f399f270651973b3ffbf90db57b6a27bedd06bd919f6fcb591efb700144fbc1a3483ca1d649c050c813d7d5d1a6bc20d1e5b4c95cd51191322f9c91f98822ff090790562322a8e3bbda57bebcde63d4a92aa1b349f17edef4b38768d9d487aaffc5981a67d9bce03aa6325a5e6ea7b3314a0d29c4623df561c5a2ca233502db74913f5c72e5d94fc90a8bdcb044f6b90c915a0d10b04356398aa222da8ba778903a7092bc61983ffd871f0c91e47385bdd1e3923204ee1a560b5a665d7f09454fb41ce85f13e15fcccf731ddd015bb7a74a2425d9f221f5ac7bca8d451613305677240f0817b0b9b93ee585feb95b8bdaf204c59a3129fbe22f2b1544c2860ae0f495274acceb7049ccfbb17fefa08db7e8f9f0903387213508096e55eaaf202f843de09106ef1949bb35fe34b8a84c42152e6f6df9f0096a0e23d0260ac07b437d61bcf63460f33d7b391d8a8e9ef2b2b4127e63c3a872705d60f19756fe26682a2626d6d5fafb84a182f03444f1ea93ce34cbcc40042f7718a068de51835533b972ea325f96b05e61084ef75e08c8d49b3f3d05465d3ab97a28c6db07c7302e0966ab5db0d0384da8604cc623448a965333980d2d0ebe6076ea66565c97ebc5b6bdf91f90f7990fd38746e722bf2762ec58ae119186768b0f5033aa9ec2484d267fa428254cf67805a328c4eee08f1b55fcaadec89d25b03fa93435af269f56f05f4a98058aeab0737c039d856731e7210a689b798a6853f1b08158af29b5db47cd82501656c6ea71abfb65ccddfa497047006ae69de759ee59f8154fdf8f16b8effc6f06b0bf6230350e2ac2d3b32105a88ed67a1d4e90750fc7cc81d68021cc42f46847b492ab4ae91a3ce270980c8720d01206c2303516287540ce9d6511bcb94fbd72ac6523082364c48f11a2ab9e9516592d0cc809ae3614c65c3d0a912cf76a3c16960c4780b79943cb4e4f35033acdb4811ede7e1939cdd86f5d39a6689343f37b02a423ae859ca518a076b5ee9792a2f02bfb4fc9891cb65b6ab05866c18da96cd800f0ae86f9b3524a2df1693f3c848c98dbd721193d68e0769b2a366080bfbda136056d7b5d9e37de6958e3753853465934c1be22f0496fcae24d89739564a8befd6716d296797df3ff31c066d9edbc4b0eb6118c037a7aad35fc4b9ac431fc4fb7535ba71e3a993cbe005ecb0b04bdece7c35bef2bb4e15aa43fdb6126866e06241e05ded835e130c5a1dc8aad62e5128bd583dbf5ed023b2189eba2bcf437bfc362c5b7e6ada57763b88ef65266a9690bb01d5270beca6c76035ac2eacbeabb3d36152cae897a512ffae5c8aa39bbd6310a714b31cbad55149e9af5b1deab5e8aaf1e67d92d2f3baf6f01a9cd2d8a352ceea0338cef3bfe729c39cb94c464b395aef9a625c5372bf0218dca83b97e49dc56a903b37e4b56531221551b26cbd7ebecaae9c7bb58ddac2d4e0aae7c72704cb1d0977521af323e75228e274919864af42aefafb27bd4f3e4cd5214b7be140b075d56d84e3c449ef9fc6898f6214f3b5f7903ba791988fb24283ac518137a90fdc906d2e070c6b1b8e527f5e711eff2e4ac071b6c218ee1543e9fd1c29fd9a60cae95c426a2850394e2625af15c9618aed23bbba40b627be7deb10cd94b95db26ad78e50878f3e092c3cba8a508c31f3f9b93f38ced2b7da18522b202aaaec422f6d082a6e5c4fadae464a66608be4c8475a4d3ec1631efc0cd7bc15fc0013e1cc16696f58fd9f85afd9b55ca1d818ebb510d2fed3729025586c95eedc3056a2a7e7038fb78bb9e9e149f481988873fff6a10906bc5e9cc93647cc95075d720aaf68846570a385c4c09d6ee1051f1ae2aae97ac0c41aac6233b89d1073d422543b9648eb088c3b344b7064c984ca304f3143f884c95f1df3d0e9a82782c98d420a4610001fdb80429d38bd5e86e008b44c88aa472e41491ee8a6cc59879a11fc2c71d0cbe0b9c56280159ba1cb2884408818085590afc897dfaf0622a528d6ed65fb00a8f772993343092b23b3b55a0b7bacd6e0f0afb01b7ce62001d19d7e6046dec1a595d1e6b08a3f18178d5ea655c9661238e2f375ecac3813e8405cd5027f77699f860dc95cd7e31f73dc51e921163aac30878a2ef404c63eec7e0bd18dbd7a7b232cb3a913469b4c4fe96b2e06ed916adb88556b63b8a9ba9461a5</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-12</title>
    <url>/2022/12/04/2022-12/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4d88b9598446acf8e80f442928090dc8e06d4988443b77c886b1d4c71a0c2e62">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7fd2b9a8852064244c4f0fe816d99687314f13ddb9255bbe6330a1bb05a9be26e8e848e5c5eb8a85549836bdfe9b59c8bd14cdb0e082e49c770743b92716021f081003ff41d132ea7f161f6921631fe34931ed397f491ade7750b3aedc78d2a59a9ae64956301abda57bad491852057dc8d292362f1483ecbe953da1497a438690a6f31280ace3fa9d98737d566d7845b479b0bc90116db1a39a559418b2cac8ccf358de421c13b3ebbd7e62aa9f3c53dad52457264fd23b72863573ff4da64b5f5acc7e076e50e20fb1a099574bc5e59fe0d90fc547b0a4f9f938f0001646d82388fc35b792593e9f990e63589faa9a24d1e49ec17534508bf747fabbdb9893907c4893e00f3060f116e6e474bfe72d34d2d72e26e67a17c43a60c9030cbb01cdb4cefbb343bed1afe8b791a7d0dc58786683fe3a7b98d005c8cb5f7cc634e907a58e814d7a7ad62b4e9124066485ec77eab6a86d464f51ce43bc0b7419f4baa870e5e1ba1b232353433e6c75fc6e16d610fb597ea84414bc9b5d54aada1cbd0d34f553b7f9f889115eaf5d674ec85c72bffa00a7237ca063aa200a1ac2b97f687077a0473d4f837c49eec062ac9ce3a0359260d53045c9067a7aa93016baf529624c77f990b31f2bd31bfdd26cc6bbbe665b56b7de47d137c2ce71b78119f995ed891adeb4b03796a42519fe28b391aae3fe5528503895d0782c1643ab282a049eaebfc109d34ad5a33c897348f3f4478221b522c47038e684079da3e42136444fe7659b310f06e06ceddfd95fefe3f2c38431899d1fc6f0c624a420edea496098280a93d48767c7cefc0afb3f999ed11d48d0da44109d2e895f5c3e23007ea913d63e8102d4394b6385ba87eb294247f17e85e9aa46dbae89ede6cabf854f90516410f85d11ed5543ed1c69a3a6c648dcb5715913f75b91f529ee68ff29330b1bf33dd5e2d8c6e33340415f604fd4001f0911ce5db65e540905cfa757394fd9b8247b564829564f291eb2ee246b96b40cde08e416920af11cd6cb54c027c368b39ad652994c84aee974517119c9563c12661abf6899fa95442de0151b8c6c2aec4687de2960b379c82be085ccf84a2708e3a48471baecc770c9f7cf8137267ca1e8c6ae52a11f9cf188abc53044d125a575b22859f72c76421569e33abbd7ef1ba755871aced8c8c110bfe09ede1d53cc15c2ae33d323a26fef052b727e0afe1847e8dbcbb6844020e85ceb0a3465729b09c6791755ece1bc11750924f1a7981a2b33871acb2781aefe254ed7dfa2615fe8f6c6098a06a7e9e7c73e424ee43f1c30cc9a97db3fc8b1385a094ab64c4d6e425fc8016a36e5ecbf12fe7a31be2ce1915034ae36d20e623a42a162b890306f9be3bbe0c2e75d9133d5b86b48af62877661be32b0965cdacb530fb0f3b47d8e6ebf99d224df4f6bcc3a3de92ce9a0884bf2f9ebd6a14ffdadcdfecaa6209a5a985502583337691753c09fa89bc13694946acc1c6f550d620446dccc23f1aaf53fcddcad46e5cfc1498042c35e552d2f0f0710e9ed1096742e3654e32ace4f527fef1561f13b0fe3aaf394f7ad98a5d69472032239aae712e84860548545383d26e0785b0ab35d3a46100075661e313f3f5f2c5d669d9591d5aa152d30822e98d863abf2758f9cd738e9b74e7f7b2129b372851f10869b9ba5796d485b59a81c75c2f85a791a6b4c6f6886cd28e8a00582252972800bfcea22bb7440ca27d78956c02bac2be7c038098859ceddd560f6078a8caf9800d1d7570a039fa3c38f06a2196d3102bd29e8cd386a86943ea88534c7b10c24dc01c349c1cba5c821f1fe53f041a2579e3fa69a66af05553f707f31d8319e6c83a34c70c430b2616f8f70a3c60bff315e7ef4a432a3e9f6146e170f5c6414cec27f6b6de7b64322fe74533944a63758b6005b870d1fb2f786700a1c4e122cb8cc6486304918e16af8514b9eba2ae081e8ebb38d3dcc8c8817947f79661c946d99cd003664db9166a38747dad23d615211f2459d75b5d6c9facd268d16370647a34389af84ff71c42383f2a28f2d30dd2824f1f3169ba43ebcccfe3f24353dba6f856b9aaf2dca13d88205d4fcec875274810f686426d858563d67081aa9b9f93e865d05b4f5b18bcab2b1010f7d88db736f0437fbeb2e4eede2d3ceed6cc680516f441c738a2c7e28f3677c3ee3dc7e87639ef0a1fdef5f71acb0b08d299e653453d97bbdf2954f9f479cf78d92da1c30d185c9ce5ef8d4a860d7377fd73ce12db872c6eadf5bd8dc93539febc18572bcb3877b301e7385d137845084af0dd368ba7552b3cd2f54f4c6a4bcade472fd93ba88fd67829236111937a46ee2179e22572ecf42b3f7158aa3a76d1ee1a1ad10d6c4ec781955a6fd3e58c95f462d72c2413fdd9cc679e3c5bf280a29295a4489e4c3afdd34907c5ef5ef303db422ecc23fdbcfd36ec769486f4deb1fc5ec96b5c40c61bb4c610316edac95b9d64b7865c264484cc2b8eabff3c031618bdf0256ba78c184e2b94a10b7bbb3e61f62d46e139963c54e52282cd46137beb46e08bdab36b9b6f5c7ab67590c4b90a0a58ce71ac3230c64a7c78c1e0827aa3ce5243980d6f102d68515dd1b872c3eb981c293afa98c636ca20f9a689b09f87b32ce04fadc8345de8f16db5dabb19c53988953e29dfec4a08ca2137317094dcba3bf922ddd88de93e3923b897b89e300feda91d5dd789b5429b49efcb262034ac956d8dce6b3a7f7d835976083d1bdfdae1f2710eeb4c8c482fca71c46d6289500979e13e4c63da9955c77ebd160f212746825709c2726ebbdc5678f66f6b1a3f8c2a7c3d05128b892794f0ebcf127409feae9efdb12e1e20baaffa6d86cc0e94131b9db00ea760f38b0a81ac7848783965bfecbacce54dc3c8db3a83fa8e67d049037afaa6a88bb7451743fd6104d5f97703ad1cc8f2c0170d4578be405b8fb2f3ad63b08b8a1ec5316171c30e944e92b91b7ffbec37e61af9afa1cced9f54eee038d4463ac3c5b40d2a410b6f5e0126fd1951109f4d26f1d541fbb757d5336d5a6d5d14373cda7574984687c48a195f3f5b0e94ef3a0ac1bc05772491c6cde4857966554b9d05e729eab6b5a4f35ca498b3f2529c68e1630337096f45813713154d5b3a54885e620d354f46b62f0b37c619772bc75a37137a439763fb327b753a66d2cea9910cf3ed9cae2d3be844321f853439cbca436880782f5238ae43118bdf9199e61c77d4b9d5ed935c2cab593d9c2b5eae52fc352a806c392b3482f12de04eab7ecd9b29642229676632be47b992de14050d90921e57985f2694d1572ba46b9d3aaad41b5be022dff119010c0bf9b9f9779c56fd0ffefef72a0e672b78249dadefea65e39ebde94bab8bb5bcb19f382e711749084cd73e8928fc2dfccbfb384d23c68cba73fcacfe78bb1c57ab5e986c7287160544faa1a644045e4283c95a0ffcf1e4f9991ffce3ace91fd9c8735ee26f13dca16790b7eba71f9f3e0ff964029153c4e3393d2ecbfe6c99669dcf5427cc13562752c856073853b9adb2c49ad3da2d79ea8c7fbb41f415da8e410b34fffc1ec72511977a942ddfc635be1d5377d577351e6cc12189106f7b3483bd882dcdd6f8ee8ebd302385801285e01e69fe16927c90ec824eb036a9213f52d0a71c4c248cdb394455c8e5238a5df5e58aba33de748e180dccf35e38a8577670b88659742cffdacebb3acbf60fbcfb7222d1035685b9113d365</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2022总结</title>
    <url>/2023/01/02/2022%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="回首过去"><a href="#回首过去" class="headerlink" title="回首过去"></a>回首过去</h1><ol>
<li>工具：<pre><code> - 购买腾讯云服务器搭网盘放图片，整理截图上传。博客域名修改确保国内可以访问
 - 持续升级MIUI，刷机，装shamiko模块
 - 钱迹自动记账
 - 浏览器换edge，启动页使用itab。公司浏览器更换edge
 - 清理c盘（WizTree），装硬盘并分类视频。三星970 Evo Plus加入购物车，最终购买京造固态。公司电脑换硬盘装系统
 - 资料移入阿里网盘
 - 看小米13测评
</code></pre>
</li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>生活：</p>
<pre><code> - 潘家园配眼镜
 - 接种疫苗
 - 烫头
 - 搬家到将府锦苑
 - 皮肤过敏了去医院开药
 - 膝盖受伤去医院拍ct核磁
 - 古北团建
 - 爬香山
 - 什么值得买薅羊毛
 - 得新冠
 - b站投稿当up主
 - 改简历
 - 看b站视频
</code></pre>
</li>
<li><p>购物：</p>
<pre><code> - 空气炸烤箱
 - 查自行车，购买千里达x1，买车锁，骑行服，运动相机暂不购入，使用旧手机代替
 - 秋冬衣服
</code></pre>
</li>
<li><p>学习：</p>
<pre><code> - docker
 - Lightroom
 - Premiere
 - 拍照，相机使用
 - 报名恋爱小组，情感咨询，匹配一次没成
</code></pre>
</li>
<li><p>看书：</p>
<pre><code> - 《浪潮之巅》
 - 《正则表达式必知必会》
 - 《亲密关系》没看完
</code></pre>
</li>
<li><p>看剧：</p>
<pre><code> - 《开端》
 - 《大腕》
 - 《大话西游》
 - 《沙丘》
 - 《007：无暇赴死》
 - 《赤足》
 - 《通灵妃》
 - 《失控玩家》
 - 《古宅老友记》
 - 《生化危机》
 - 《侠客行》
 - 《昆仑神宫》
</code></pre>
</li>
<li><p>看番：</p>
<pre><code> - 《我被逐出队伍后过上慢生活》
 - 《里亚德录大地》
 - 《因为太怕痛就全点防御力了》
 - 《月光下的异世界之旅》
 - 《学园启示录》
 - 《打了300年的史莱姆，不知不觉就练到了满级》
 - 《在地下城寻求邂逅是否搞错了什么》
 - 《剑姬神圣谭 在地下城寻求邂逅是否搞错了什么 外传》
 - 《平凡职业造就世界最强》
 - 《带着智慧型手机闯荡异世界》
 - 《迷域行者》
 - 《世界顶尖的暗杀者转生为异世界贵族》
 - 《落第骑士英雄谭》
 - 《骸骨骑士大人异世界冒险中》
 - 《只有我能进入的隐藏地下城》
 - 《我立于百万生命之上》
 - 《异世界迷宫黑心企业》
 - 《我，不是说了能力要平均值么》
 - 《异世界魔王与召唤少女的奴隶魔术》
 - 《魔王学院的不适任者》
 - 《我们的重置人生》
 - 《最后的召唤师》
 - 《暂停让我查攻略》
 - 《夏日重现》
 - 《现实主义勇者的王国再建记》
 - 《被神捡到的男人》
 - 《关于我转生变成史莱姆这档事》
 - 《东京食尸鬼》
 - 《寄生兽》
 - 《不正经的魔术讲师与禁忌教典》
 - 《靠你啦！战神系统》
 - 《仙王的日常生活》
 - 《绝顶》
 - 《战千年》
 - 《夏日重现》
 - 《莉可丽丝》
 - 《期待在地下城邂逅有错吗 第四季》
 - 《赛博朋克：边缘行者》
 - 《食草老龙被冠以恶龙之名 》
 - 《战千年》
 - 《被勇者队伍开除的驭兽使，邂逅了最强种的猫耳少女》
 - 《ReLIFE》
 - 《新人炼金术师的店铺经营》
 - 《转生成为魔剑了》，
 - 《名侦探柯南：万圣节的新娘》
 - 《想要成为影之实力者》
 - 《一念永恒》
 - 《无限世界》
 - 《一人之下》
 - 《妖怪公寓的幽雅日常》
 - 《元龙》
</code></pre>
</li>
<li><p>看小说：</p>
<pre><code> - 《在地下城寻求邂逅是否搞错了什么》
 - 《无限恐怖》
</code></pre>
</li>
<li><p>打游戏：</p>
<pre><code> - CSGO：买皮肤，卖箱子，看视频，录视频
 - LOL
</code></pre>
</li>
</ol>
<h1 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h1><p>22年看了很多番，陪我度过了欢乐时光。曾经胃很难受，做了胃镜吃了药，都没有解决我的胃病，又看了专家，专家说：你没病，不要焦虑，放松。于是看番，不想太多，后来慢慢好起来了。虽然胃好些了，生活工作还得继续，来定点小目标</p>
<ol>
<li><p>阅读：10+</p>
</li>
<li><p>学习：每月点一项技能点</p>
</li>
<li><p>运动：骑车或健身房，可以考虑把游泳学下，此项预算5k</p>
</li>
<li><p>摄影：尝试每天拍照，学习调色，保持学习</p>
</li>
<li><p>b站：日常拍视频上传，找找方向。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>年度总结</category>
      </categories>
      <tags>
        <tag>年度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-01</title>
    <url>/2023/01/01/2023-01/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b15380f9a66e34b691db6dc47adbac52c64837045baef961909f121e462db880">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b35cc3ea90795ca55f060c3998744e8b12c1351188e2580bc3aa360c6e86aa5e312104315fb3f46a23ecd337a82b97c486726bac6e50097cf04836d3c501cb1d644d6bc48d40239bf73f0ddfae7c8226adcbdb27fa9e091e4d3fac5f6484ec87ffae129d5dc5cf8ece26e75cd11aec14c1a2c388b74d3ffe1f64288deec6df6d292f90202d3f4e7f483a9560a72fd6029d7b372eb014f00ccb57382f5ad00e4a1fc7487689ff416062a0c7806c62617aa673e3835fb00e5a9b007ae55412508987cccbc87aaacc39a61c3c57dc725d9864e3103263b705609f690bd2e2bb2eddbbcd1c87a24f039ca762abe2a0c7f232361ad63de522db30801187ec0e5962d0f9abbae1e01b8fea50531203dfd9601651090704271d19a3fc09497c8158ffecaef0300439283e89614dbfca770886489ec30196fd97f69696d77b597e2d37e9909ae31ea40619708fe4821a5fa92ec0613ff14df1a47b7c0899ceb4a70e0c96dce9997be13493491642d7dfc21edefdcb322c9dc427c621c9f0be35b31cc91dfd48902bf076826c0aa54d1b560e6fdd48842000b275312c6ff0ad84f6a14e08d25517e879d863096aacd26bf02f7ac43e61fd44239408e8d4f61456c421896d414927fdb75a876e2d562485685e9f93aa640b18d6bac2fcac6168ada80fe643639aa85ceaaf893b447ba2e19b18cb2530ceb4d8566c630460603265c2188e96cfb1fb9a0ea492b142110ed316c7d5ed577ff4fa98d5cd3f626bac410b1a9ea554090de8763c897a6d8f1e17abe5761ecae1164996752c9181a1849da6ca6f2388e154abc059e8f2d01e1666f7c2a2bac2b6f2ee55ad2aea3b476aea2f07c81dd6592ca1a63abf9acd3b3885c17618e099ee01c36f14f976eae33e82f2f7a1b943d1f3c9df5b54179411f088a832985cdd049dcdaa4de6080b93050040cda0698d6512ef0805e3897fb861af35e0a7ef35ea143cf67aa6ef50dd201ea231b9a1f2f001adb64e91d6b2e0441c6a3fe3048fa33929b08472b57f97c4a6b9b1e378d82968fc107f15ebee3e473a2604c2ea4976868b89158958b38e63fb2f6da8accdc254a7192def0cc93ce66adddd0ebc58e51c29450ec4974910bf9590daedce3f5d44f51c075c8f5e15ff5d029c3fa258a5833f96303ade24f1dcc9a2a1594762b0d3a7143d8283e2089876b83b88eab9b3e87e8c9193145be30743048c28cfed2ee7124b3a7a1844c3a6ef06cabdb83a2d6e561e70bc4dcb951630ccf0357d83245bb900c79091c6c933bc8aba8d932de0ed49eb28b5396b33fa8a1b072d715f1ac55e095b94fa58620c2629159476ae2397f52792bbea5b7fee99354c2caa72dc74af5df92c860efeaf43f3335455f92d3276476b2f7401de0a63ddb4af6aaf98ece2bf67b405fb70f12d669bf1f061b681d397fca0c2cca3269219190f2363110011df0ca4227adef1dfbb836d49187b8b66a7f18bd235ef4f6a7850459a8a0b1274b11c229cfb8dd82d1a5c162ec71418f5398d2f737ba058236a535b47953cae4553cc02017907ed1a8f0ba1a7a16f6d3e2fbd571c426566e8b0d1b7d6ef4afbcb54d2e87808c3bcfb1a8c3bb98fc5fc3bd8310355a6ffaae0259df82e8e63dbb29cac0fdd0c0686fa7b64a08c0928ee691058f0b767de30b325780b162879ebe25763f33b89cc312289209174cad99d93c3086060ec4e4c5deb58936c4e9a1a2132632a7c90df8d1ca4f6e779a3ce4dab56a07aa1515b8b6d3d5280e973ae1ce0d258abca32c89fff1e7508cac835b85e5697afefda509e607ee610f60607a7ddc90a64db6a86d532a9b7f9515d85b6bcb42a06a10cbbf8db8a9c1ee29b1bcfdbc0fdb1b65f1cafff08f707c60894d03250ba97b7fb6cb92e4fd75cf3742253d75ecf6a23969e898019c68140e72b53c811426f7b9647bd4c5abbd0332b20d09c3d13e664bb67113b15bf98ba9b3a4a51c4a807a93d73240c06557a4f47b2f7a9adeb305d4c1f6a505464287b66e9a7c22b15ca274711745629c32104b9c31f0a99714f25a0dd9e1d99120eb6e841c7ce999e8f72cd83955e9d82cafbbb06c1fb98190b4af03ec28510a4b37fa35298b6169494ba665f5de32e24126fcbd78605759eac8aec0cf7aea672b28c0940d28cea19003fa8102a3a0fee2763150fd8d108407ce075c8073ee28e27fb7d9948e07c692dd6d8e709d0930fe08e583079f00e0cafdbd0b3a045e7e03a1708f391998d6e48940881cb48a88e4d07c411431229982b5e9da4ff7194f6d277e962e9cd96c52fc2587a052a54328eca9a68d5ed3baeacd624efc143257c37e53df263cedd65a747fc326a19778cc9afb37239025d8e0ab90b81dd89ddc610685d5be0b9dba875f700ed3291ffc889c3b9dea1076f0e2790507fe8de10371eb75b93619e13af5d5f2270a8f677a686ca353e26885a97e0be458857aeb64f5894681c3a757af8fb2e75314d00737fd2031013ef13bd5f0de5cff4e9857a76c0d76b8b67741593d7576cc81e17cbe0d471e3b8f38783c6856c9b377c4e980b2487e395965727158fe12f61a2a017ce5a09ba5ac296079361551320c42504955854cf5295e1f1604ef3b18f615ebb82a468dd8105a2c8c749cfd0220965a1ee9834ec128b428be317f643e717edd67a40474e60014cbe8b686840c34ab08a05230be8fcae97c83367736d06fce4ab715d741628c98c12f53d71ea0cd7e38f4275578350e1319a33f7cbf917b221d5a6ac381d179f536e90d536c3b39c53abd257020c158ed6f006813f2dec23467decc393039a43293a00544138a97265e38663076e252ae1a516a1f4e9e9e13003d93316c81a8d4f2ee47b107b7ce7c40ebbd223840fe7af105932368ca4ec1bce26149e4ea833d1a195ce8dc6c81bc497734b0cc1571b10d01a2ad1c715a1525671945a28e6c4064a62d5aafa9429dc9afc0cfb385b05bf87866f26a21ee49a307eb49d602e418f6a368fa2f6a6c0206e9a8dc5d1c4ca6cd503b03c345419881b80d239d511c781d83efd82aa79c6c3f8698884c9e7c454efacf8b9ce3c0b24be77b1247e1932cd76d5cd4ec0387ae36f2f3ac799b68f7aae9af4e0a7a5b08bb6901a5dc2686f83e9b0c4b07d5d4a96bd8184c55abbb77742a2b166c82899014ecf97b760c3bb1ef832e23832a099e3d64b4fac1c824073c7ca0686f6200adf5813446a71f9910b9a9b5a8be06e13c379d658c02a7040378c660b3cae52070d76bedfdac959bf15c3bff7a22273500347cae6f7e0edfd33c14ad244cc1722159326085f7a4a5775071701d9802c0c7840f2e3c9c33f52cef3499ae0e7e3a8a391b9a2bb2fc3f9762e8983f5d8af4a3621d92158b7cc17b1689e078cf8b6c3ef4ca5a806adac4abf13f2bc946b88c5ccac0e330f38ad7700b7ed8b0855bbb0be4b09e75a8a964042aab5657bb0cf58febc013865275f9e52e73924c5eeafbb1520de3aae275a7ef101591ae70aa78c7aa91c48255f2b75cf1e7bcc59df5e1185590c2a8410bc46e9758bae6d3859c0fb4c0368a7e2f8e96af5b9127d3ef39695eb6517b2c59ecfed83d7141e96746c134db425cd82e91bbbe82319633bc3a9a1645a07d1a7746a1b8b938f1ab9e3e03d0fd2e37091a007a68e2dff3cd0edfc53faf71ca15e7b67af461b66a41fb9bedff5fd64681019134be0ef1c0e1113e19f97454471e1f6955855076bb33afd8228d2fd61750a7267abc1f14903917de735d63b37b114f1877250f632a0dedd45269d8c85cfb2429757ca0ba11319d6f23d93aa7f4998fbbeea5ffb990abb20dd7a929b89963ad3de1a0a81a682bb5fac4ec7a857b999d7ddcaef64649731ce13d3412387dca45499435de9f5dd52adfa228961a3e9879e7c5afa96efa2b53f10d7bbc6cd7e205f930d831df30188c251ba17154386301b3b85b70ae15b72d69855bbedf407baf189c7c5aff87cb9f2491da5bbe1166f55f61c2dee161d12bb2a514151c3e8d77eb684ff10bbb63726a824dd3dd82cfc11c280235eafea0a681349c87491dec5c799c02fe15195048b301d6edc491633f1bb6489ca775fc801a6fbf2c8ddc5996113805ff7fad78499045b9053313ee63632fa17b6914a74d8f2e23a85992c1c22ecc9a4fee26ff007c6191acda5e09bfc9fa008f81f7e10a21531820ec4d50f9065a5d5c0871e97ea0ccf1fe96dc91f1f50185b5ba37bc36b2cdb78769fa5c7fa38791252a23af91d6a86578d69eb97ffa3a94c9490370733837a7023bd955c661aa99777da8b9c26b3a6e8d9c40294cfae762df0e28affe58b918331faeae5066182b96f9742c26b7e8e7afb6c83fa3811b59830adb9ce0501a5b0303df2f32471872e520972a805df706d9e2e72e52af1e26320709ac25cc404ebab46063c0217c6a931eb3c871f6a1c7fe26e26ac7e84966dbbb973cc6522324d85ad04ac616dd71e688dce8ff6dde2c03ff1060789ee7530599ebca21241ac1241ee8705f77ba5025566097f269930c0fabf6c595cab7bb943f2701f6320c3fb5d2bb1ca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-03</title>
    <url>/2023/03/04/2023-03/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="02e27755b5caea02f98f402f3fa03970a9d009afe3cb8701f60bb57546d50e6c">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7fdaa74f5cbc4f1bb17bd0081e7457f05f202a58682c16e97c4b3a672a6ab5e53b72ef7030807ec02fbe7e3df4cf74758be36df9d9d40d9b3cc5a069e7d8173fac9506df1be6f2ffb4b8ee67c3ce49ec58d78853ff68c23aed8210fd4406934bf9ffeec944aa1db88271691b2782fb12b0eb892fd2a99a1f20c23450264c3eb5e7667e537fd2ffe997cd62d1609585eccaee43c95c4d81a4910f69bc7b9bcd92d4df26b5fb65120458381ed633ed8f625562100efaa5ed8083b05384506716d6c178daa197b7430e183ef566a2c7c4ed84deeb27ca59e062e0cdf7ff2dfdbff8b5e4cffbb54178543b3900aea307d87e0ece1076f424abc98334ea675e1590cb1fc502464850d646c06237128f0f876d8e1c6f880fa14f26265fcf33e0aec428a6c73e3023b93b960fcd3ec10bcdf2b57f38d648c065bc6ac98b409a19fe5e30fe3f17eafed5c43a612c9254494c3f01cb8f9d471519179ff3f136ffd4e3424f91cb9f5251f993b4574a1ba827eae013c5fa8ef7bfb56240a09aedab108a464fd22d550a7812068b40d17d7c4fa4b18d388fb092f628a053870a593863bb5c30f86b32a0713acf2385506b01a76e841d5ddb7f8b4601e9c7c6c554e4e99aa85c2b9557b05f41a6cbddb50db280676a8b13795eeaf1eb29189dca018366d9da17e2c0f109dc7eecf791a0c771b24630e42947673309e449f60dce00accc0813efa8f6fd05594fbae4ee8ab2295349da6534a7dd3a68a6a0c1e521c914f10b92e4192f10bd9b34ee2720af8973f7dc2ebf3131385de83d3b99b7ed677dec9db1f746c502554e522f63bfc79eff2d213d84a4d19ad5258fc108ca3cf1b25e72e145c88d434829b39297b799d21d1a71760424c5c52133de9e01675d6a73db6e772cff4df290c1923c55e85ef079e0f6cfe54bb6c6171aac4fc4bed203f8e156e991728a81e01f404868e01f2048dc1ba05e14dca591c47b4df85f7b5817c4724a98d1f6b12a3f21481b2360cc001c914b5200e80fb2794fe213a80c53411e8fd6409a3f4c3c717cc948f2753531a21b58ec975539388e814b9f7830cce2cdd6e3e0b4795016c30f3e83ffa69cd02c271f6c331d7b6d4d9d129edf717be2d0a3c633af1e08c15d8ff4272a8bb2d5a3c9d5d431fb8a4ef85fac61bfdc3ddfdc0543ad561258d2bf4b880485365095a4448d0c7673192837945f686ca023150ebb5c9d0c1b4e4e81e0893dee3b42fe7fb8361c5718f8f6ebcedd3ea5d3a61333e7e309dbe09f36e3fec37165e9c8c772e8e6dd5b973bbeb52f01d6d3106cba7906d9e5435e97235e43e46f1b37bd7f62e8aa0bb282f2eae4b30d9266dc394e531185c4b83605b2e78eef435547f6aa2a7a509d65c9ec7143ec90ac35b5cc62fedc9bcd3cb7e13cd2017d98efb34e324a8601dbeed75261c2bcb1266675c064839098ce0a88c2296fb6ee8cba8566d59042ca3eb23e448ead0544db44620c0165d244d1f964b54f0ce3f8daae2bb700fb68026b93ae49209a940e0d3f5405fb4e10014065c487497e3fe4edfa28ebf80fcea6be1763e76180a230bda361d584e9672d4d9004bc349c33dab9f8d7b146ffcb014607f92a6527f63a43d63d36db6d65b2ec17f0e4cfba750a180c7f08b270edae33653d3daf3b6522a440e09e988121c5bd9805a874142f66572e916391cb2c795edcf50be092d27f6a615b21e8c4880dd462c1c3f86415e1963e1ddbf3c7872f1082c7f6f8a5ceb3e20d9fbcc1f3d3ea0b5a2b7175d03767bb580cdfda0f3e249e736fd603ad52381b9e4c8b48a74fda2fa12a4de2751e520eae90b1f9d91059e849a5d022c41918c3e5a8aadd51e40f8f80f1d920707cb07c972042b7f3cf5f4c9ac09ebed0805b76e9af72d2b17d0d463fee9c6849ad72ae34bc17149b0672b4fa09edd4227080b18844183e9c2baec0aba3598feea4e6759fcd1167cc64a5152d6280710f90be191ca43383d09d987d1de9ae4bdb58c4fa24852905fc96f65f359860440b7b4e75c518162171d543ca7d62f89c54efa8472c7325859cd998ec7ce92285b48d3cd55e3979654e91e119ae2dc722f74396261ce38610b75b66fe56205c71ad9a9c93f8b573df355fd0f08362ef5c4ee8df8142433fb5b0a119025adbe3e9a084e7281dbefd4fce3d285025b281aba3ebd4f5f027d07fb2cd71451280b34c673b9a6ae85ced71c1cd7c15fc17cb55f1c2eaac751de9a8b3249696442fe02c74a4d2b8f3bbae4bddc2e5dff5373264a64094ef4fef915362ac1bbf1da56eb4185dc7436bd9960f80858644e054587f1847a8822660611d41b722e280737df845712dd2b1c064243ddb61018bbdc328ae033bd6a1b150c1182bb764e9866c76e332d86d04961a1efdfe6323b4b093bb48f2c5793c5da047802f49055f8e5dfcdbd21fe0a4a932e49fa88f8f8572c003899931adc87c4638dc3bb1d7e69a99d40a53606017627a05834bbf8b0b2cb624081f93724bbdc136d1b1c9f9fb95e4b0a62badb7096231cf8bb7db25198c084c238bf6c69ccba3ea0b0fdd7867d6f6a70ef3e42ed5cdc7bc42b5a31994ebf29e71fd836c1d36007db85ccb8cbbc6302b037b4f43d591d26b049ea5e2a8a5f1ccd8e2c66090e239a6fd0df1bde3cce04803d034ad25c612e587f3bb2d242d6a147e58caf7593c81d88ebc7925f8445da7322953bde4e0ff1fde465b194c330590243ae0ff78f91b7da4f4b2228de48bbcf17dedfd23e2d69524aa529e25ea5c5cd8324af89671ac4b04a4e76243d6fd9e664d66af34262ce1e5142bef3a0b230ab97e887ed46b2b3aa486a6184d0b87ab6ca05958b62c3139f42e933fde635a9a63266ebf2f0e8f5b901c8d04d1</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-02</title>
    <url>/2023/02/04/2023-02/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7e440070564529feb04602dcc8af8db536746e678f298504888521fa4224b5e7">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b35cc3ea90795ca55f060c3998744e8b12c1351188e2580bc3aa360c6e86aa5e312104315fb3f46a23ecd337a82b97c486726bac6e50097cf04836d3c501cb1d64b790cde7730594c2a2649501c19ee639229a4946d1a85a34dc5de3684f7bf917519c8a333abddaf2a882483a7f3fddde98f28dfc62e4b96e4796c5ffdee07995a3c3ade23206821245e302982137daf39a67b059d98dee3f3f05c04fe15039c611a5df6fd0e3ed180e765bff1e8d76230da94aa0dc2affeb3f5899b7d3971f75af30bb22932cbb38a4cc71e0714c67ed792f1200ed272ec47fc1c369550297c5c74b12904ddd5dc3f7e3c61712329b0770dd3308eeafec72c8f8033ffaa797b6be5a4f8653292dee91c34c80dd50d69ed0e03b8f97cbfe5995d19e61156eb3e44d26d6263dd2c68955c374f4fe3aad702d81b6a591560d6de5a64527f79df07a6773062ad34dd16b995ce1b5bb191b18a671ea6b37b261f28d1d269cf82b79829db33ed2a99f87f951a8e8ddecb9a4dcf1f590ea25b2a6023a277265fabd140b0dc9c7a61a5e95133ff245c3b397196f6b091bcf266b2b8bf24f6348f5f0feb76473b5a215f951ca53abec39edb8e8d33c0509e09779c765059ca043d5b24cc39f86b97e7cb8c022ccc60ae2d67292e221ffb92df3650ea86680fe1dfc91c0a2efceaf62cfc9c36ad7bc364d0eae8a48562a0e3eb464fe24ca35608551e1b5f8f1dcdd862f3dc3537056331550779f4a25cd2fc473ab4fb5797b804ff52ee1d91066a512e62e4a24c6dbfda2c3f8d37819004c03ec50a578b46c59894bd62e8358060f31c5901258c7d7984f35c9973a708e75c98f35d72c504211767e32a47b591f8bd4b5709b51fd51056f6fb011f9c606340c544c2a0f313b2e31b7cdd6952a75947def67994a5c2344229985876e5a9a30df9cf03bf7137978acdb46e532523d5a3964eb7f30c2fe5fb0f22efb3d6a98337e0c26e1487f28d1de706c64ccfd46a631a5bc746dddc65686b72a8e841ec14dbeaaf346c088d956879fcca35d61f47139e8e562b9ae98c96d235a902438b7816b7826b379b525c85bff412eaec1967c2b7f81cdead374e0e408bc8cca409bf6e9fcae6a213c1df6322a73d1c53c5c5ba0423df5540b7f694f75a742394a03cf50ea81413fb35ff3d18516a3c965d95a0b07902a39616ee0e4497d440bf3c838abd4b2f96946ac3c97d9e38b22512d2de73d37e1b2ad2a40d44c44bac2b530f227faf1e75e11067ff9bfea95c7682f891a08c98a5f25cece972b26a6a9d6c0061a072cfd24303388e9500414b1cd3a8f3d20e597cfe2411c144cf8aab5385aae1080b426de9dbab52a88408f14ca83c86b800132e91e59c9c8837e8ab680a23ff3150da3c5fc4c14ae2252cb53c746f44673cb8b2112d7034d21b0a304babf94bc19348c2592cc2237351915123922cfcf2468fd9f74991a60cafb89b239998eabb88d746280ed2bd9a0d11be6ea41b03920a0ff5c070304f221d6c55cce92c433207348ecc52b0833fbcff922cbe6bcf818473b6dd821e28d9eac239f85b3722d28f0c5b6ee234d78585122da164e84d1a136191b17f71c50f2c93c2df5992580021f309dd9798f107fde73b3d18f73a6daf9fc790b1735384301b1d4081820c68a5e11768f824fff914998c191175d7f74a34bb11d2728d673063ad3dbbb28f4d9fe36011e8912eb165f206f5fc6f990323682d7497edced1a1d7662e709995ed942031bf04b262de9727ef9c37c4f597335b1ddd309091ca332047d9017ed48441c16a8b10a427120edea28e9048c8fda4f6b8c0f8fc18d5d20a4eed2a57a61de95918bead2b9c423a8145bcfe56234d949ed578b2e2fecb80931bce3816c84f422691899d5e5f7b4efd24a9cbb62f830022e83256442fee725f6aa6de91c98e5741917007fe5f2e3ebd0e8a3f0fe071a5ad4750310b95303bff73a90e54e941ebc57754c9076c10f6091d69783c4b48d684ffa71300411b48afba9d1aee04534fe07551824af77aa11933ee1e3808ede4ade00ace2f1b688692b822950bf1c0f7e28993a8e15c1028bd559ebf206279c2dbbe9e8fff9fa06dc08aa77fe699e1b24731ff917ee964b02329a86abab4438b805d4264c30b8506025851b5c0867328c61fd1edc4c82adda4bf6aebc4be602f1d0ea951b5e99dfb82109a75261d43cfc88aeda9d226235279148c64fa4112a92d7876b119c6cc959ac618f2c6149c2b86a00e881e7529abf979a4945f3293dbb0fffa70c17e7ba804f0ec66b348806909fc6cd132cadc1206ff83f183b0c48f9e51c4a3266649fd689f575e5c32be3ed37520fcaee3fb06e8bcd1a1b17ff0c20572608c44ee6f912332d3c95e8b163e0d9fa88dfcdb25f0a7527d875744d268327ada115d76957179721929d3f3d5e0e328c2169abc41a9b1d6b80e630cd7f58b65ea0f213bfe870e6e24167dee0ede56c508e28988e80104fe4190da8c3da8e4f4ca9687ca3c6c5d9d8102f1328b06b9120ee54de08211851e933506e8c37e2500bdd3b6b56584eb4ee4b59dffe745b5766a731cbc94f0fbe3041fff0c76457bbe7f78ab1ca39b704bb739885c6f86dbef2c05c39dd7cb1042ccf5724af1110b41e88b3792398c2d26fbbc1aac929bc1ef05e14a715b544b511a4d120f2c6fbd018d8bbb4a30392de36ae049f270a5532c4382e5212cca8f3fb945d8cb6b81569b6cdd30e69039beed0d8c1db1b4a05acfd09e9fe27f2a372d233533584843d614e11810a913714f66a1135ae87d3d49f8dbc4cc2b1e86a100720e75d80f720456e921b460c5419384844aa40f497e79592ab2ca0e850fba5524be01165243bc941c39b6aa50f6bc2bbda338ea65ac316a4b0c0a92755b6a538410ba47eadd91f29dc58cc9a6fec67d1023f9842fc5831dd6c62f5c318db7ca6113d2db7cbed4d3eca536d76be3695ee38cb1cb44863a534422a2be3b354aa12dc446212c0d229c8c4943a44d3c251e1e89f12ad9502a0756639c5bc42c4ccd968136a41e1957d94448544663eac848ba76294aa157b49ac0c0dc5066d2f3bd4679d23e876745e3834038af592fe5ed6d9cc1a0ab82cc52569f597caa73d45a243b4a23786c6dcfc235cd33177ea88b5f155cdbf3353a7d8f1def620f96229d50fe31eb692145335e287040b205ad2d3b4aec3a55a2146dcef6d0ac67317089fa172d1e2fd6ac365afe0d3e2a17afff675026b5b320de9e4be6282f1e30cfad5a72f28054eba9a02b1062dc64a0cada90dd038adb1ce995d6b131d029a1f08f66de051b50a618da7a3a55ea51edd638dad2f84298bb101ab873b773f6c595caebe7794eb2fa05ea04cd8786681d04c4c09ee1548b0b355a16861bc9268f1a982f37a8f2cc2acb43e824a123b477294a31656f185f595385305310b63afb9efbb523677ef13b6c99d06ab9d42ab1f3a7894ad9173f92353458f56c030eca8d8c8fd2d7755bbf327ec8075e1d9eee4345d3bb12cfb50dd5a8359e863106fad775d281245a79c86235b4240b5787a1bd4132529c150bcf10ad6bcb85dd13d69de631232dd63cb2311817eb83a1d6f6c68be1820b045ad6f3997f88e5f39616ae14356c879d2e7743ba99248806c82d2d392276fd974b46762fdeb08db5cfa104a6aaab316bba459d3c9e3d089d0549b2e98a7060285223924fcbda5a630ad903db21b5f83941519a9f88885dd8ab627337795d0e4bbd2dd6743360793b28a85c3206b82f6d9dfa6d62ec923dd6cbb77b70ddd1e29563c1d4245df8ef85269518955dd164b7772b4aeeaed77359ec34267d9f4b22d12817ccc03caf33cc742f87c190fbc325f0cc494c4b17fc0678a0d18f8</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>C++笔记</title>
    <url>/2020/03/04/C++%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><h2 id="cin"><a href="#cin" class="headerlink" title="cin"></a>cin</h2><p>结束条件：[enter],[space],[tab]<br>处理方法：cin遇到缓冲区中的[enter],[space],[tab]会结束当前输入，并舍弃[enter],[space],[tab]，继续下一项输入，当有连续[space],[enter,[tab]会全部舍弃</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">10</span>],b[<span class="number">10</span>];</span><br><span class="line">    cin &gt;&gt;a;<span class="number">12</span></span><br><span class="line">    cin &gt;&gt;b;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt;endl &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>输入</strong>：1234[enter]5678[enter]<br><strong>输出</strong>：1234  【此处换行】   5678</p>
<p><strong>输入</strong>：1234[enter][enter[enter]   …   [enter]5678[enter]<br><strong>输出</strong>：1234  【此处换行】 5678  （说明不管缓冲区中有几个enter，cin都会无视，直到不是enter开始继续读入）tab，space同理<br>综上：cin的输入很简单，整体的看输入，遇到[enter],[space],[tab]表示当前输入结束，下一个输入从非[enter],[sapce],[tab]开始，两输入间无线多个[space][]enter[tab]都是无效的</p>
<h2 id="cin-get"><a href="#cin-get" class="headerlink" title="cin.get()"></a>cin.get()</h2><h3 id="1个参数"><a href="#1个参数" class="headerlink" title="1个参数"></a>1个参数</h3><p>用法：<code>a = cin.get()</code>或者<code>cin.get(a)</code><br>结束条件：输入字符足够后回车<br>说明：这个是单字符的输入，用途是输入一个字符，把它的ASCALL码存入到a中<br>处理方法：与<code>cin</code>不同，<code>cin.get()</code>在缓冲区遇到[enter]，[space]，[tab]不会作为舍弃，而是继续留在缓冲区中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> a,b,c,d;</span><br><span class="line">	a = cin.<span class="built_in">get</span>();</span><br><span class="line">	b = cin.<span class="built_in">get</span>();</span><br><span class="line">	c = cin.<span class="built_in">get</span>();</span><br><span class="line">	d = cin.<span class="built_in">get</span>();</span><br><span class="line">	cout&lt;&lt;<span class="built_in"><span class="keyword">int</span></span>(a)&lt;&lt;<span class="string">&#x27;,&#x27;</span>&lt;&lt;<span class="built_in"><span class="keyword">int</span></span>(b)&lt;&lt;<span class="string">&#x27;,&#x27;</span>&lt;&lt;<span class="built_in"><span class="keyword">int</span></span>(c)&lt;&lt;<span class="string">&#x27;,&#x27;</span>&lt;&lt;<span class="built_in"><span class="keyword">int</span></span>(d)&lt;&lt;endl;</span><br></pre></td></tr></table></figure>

<p>输入：[enter]  <br>输出：不会结束，因为需要输入4个字符才结束（结束需要字符数够后回车）</p>
<p>输入：[enter][enter][enter][enter]      <br>输出：10,10,10,10  </p>
<p>输入：abcdef[enter]    <br>输出：97,98,99,100   字符太多时取前几个</p>
<p>输入：[tab][enter][space]a[enter]    <br>输出：9,10,32,97（分别为[tab]，[enter]，[space]，a的ASCALL码）不舍弃[enter],[tab],[space],统一看成字符</p>
<p>综上，一参数的cin.get()当输入字符足够后回车结束输入，把回车[enter],空格[space]也看成字符，在缓冲区中遇到不舍弃。当输入过多时，取前几个</p>
<h3 id="2个参数"><a href="#2个参数" class="headerlink" title="2个参数"></a>2个参数</h3><p>用法：<code>cin.get(arrayname,size)</code> 把字符输入到<code>arrayname</code>中，长度不超过<code>size</code><br>注释：<code>arrayname</code>必须是<code>char[]</code>类型，即<code>char</code>数组类型，不可以为<code>string</code>类型；<code>size</code>是指输入长度，即允许输入的最大长度。<br>处理方法：假设把数据输入到<code>char a[arraylength]</code>,数组长度为<code>arraylength</code><br><code>cin.get(a,size)</code>—<code>size</code>,<code>arraylength</code>不同可以分为四类：</p>
<h4 id="类1：输入串长-lt-size，输入串长-gt-arraylength，"><a href="#类1：输入串长-lt-size，输入串长-gt-arraylength，" class="headerlink" title="类1：输入串长 &lt; size，输入串长 &gt; arraylength，"></a>类1：输入串长 &lt; size，输入串长 &gt; arraylength，</h4><p>会自动扩张arrayname大小，使能保存所有数据</p>
<p>例1：char a[10];cin,get(a,20);</p>
<p>输入：123456789012[enter]<br>输出a数组：123456789012 可以发现，输入12个字符到a[10]中，系统自动扩充a[10]，此时实际数组长为13（‘123456789012’\0’’）。但当计算sizeof(a)时，还是现实为10</p>
<h4 id="类2：输入串长-lt-size，输入串长-lt-arraylength，"><a href="#类2：输入串长-lt-size，输入串长-lt-arraylength，" class="headerlink" title="类2：输入串长 &lt; size，输入串长 &lt; arraylength，"></a>类2：输入串长 &lt; size，输入串长 &lt; arraylength，</h4><p>把串全部输入，后面补‘\0’</p>
<p>例2：char a[10];cin.get(a,20);</p>
<p>输入：12345[enter] <br>输出：12345，此时数组内数据为‘12345‘\0’’</p>
<h4 id="类3：输入串长-gt-size，大于arraylength"><a href="#类3：输入串长-gt-size，大于arraylength" class="headerlink" title="类3：输入串长&gt;size，大于arraylength"></a>类3：输入串长&gt;size，大于arraylength</h4><p>先截取size个字符，若还是大于arraylength，则输入前arraylength-1个字符，最后补充‘\0’</p>
<p>例3：char a[5];cin,get(a,10);</p>
<p>输入：123456789012[enter]<br>输出：123456789   先截取了9个字符变成‘123456789‘/0‘’，然后放入到a中，a自动扩张长度</p>
<h4 id="类4：输入串长-gt-size，小于arraylength"><a href="#类4：输入串长-gt-size，小于arraylength" class="headerlink" title="类4：输入串长&gt;size，小于arraylength"></a>类4：输入串长&gt;size，小于arraylength</h4><p>先截取size个字符，若小于arraylength，则把截取串放入数组中，最后补充‘\0’</p>
<p>例4：char a[15],cin.get(a,10)</p>
<p>输入：123456789012[enter]<br>输出：123456789   此时数组内为‘123456789‘\0’’   注意：前size-1有效，最后一个补‘\0’</p>
<p>综上：当吧大于数组长度的字符串放出char a[arraylength]中，系统自动扩张数组a的长度使a能放得下，但是这么做容易产生运行错误</p>
<h3 id="3个参数"><a href="#3个参数" class="headerlink" title="3个参数"></a>3个参数</h3><p>用法：<code>cin.get(arrayname,size,s)</code> 把数据输入到<code>arrayname</code>字符数组中，当到达长度<code>size</code>时结束或者遇到字符<code>s</code>时结束<br>注释：<code>arrayname</code>必须是字符数组，即<code>char arrayname[]</code>类型，不可为<code>string</code>类型；<code>size</code>为最大的输入长度；<code>s</code>为控制，遇到<code>s</code>则当前输入结束缓存区里的<code>s</code>将被舍弃</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">char</span> a[<span class="number">10</span>];</span><br><span class="line">	cin.<span class="built_in">get</span>(a,<span class="number">10</span>,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">	cout&lt;&lt;a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入：abc.123<br>输出：abc    遇到  ’.‘ 输入结束</p>
<h2 id="cin-getline"><a href="#cin-getline" class="headerlink" title="cin.getline()"></a>cin.getline()</h2><p><code>cin.getline()</code>的用法和<code>cin.get()</code>用法大致相同，没有一参数用法，只有二参数，三参数两类<br><code>cin.gerline(arrayname,size)</code><br><code>cin.getline(arrayname,size,s)</code>用法与<code>cin.get()</code>效果大致相同，但也有些区别</p>
<h3 id="cin-getline-arrayname-size-与cin-get-arrayname-size-的区别"><a href="#cin-getline-arrayname-size-与cin-get-arrayname-size-的区别" class="headerlink" title="cin.getline(arrayname,size)与cin.get(arrayname,size)的区别"></a>cin.getline(arrayname,size)与cin.get(arrayname,size)的区别</h3><p><code>cin.get(arrayname,size)</code>当遇到[enter]时会结束目前输入，他不会删除缓冲区中的[enter]<br><code>cin.getline(arrayname,size)</code>当遇到[enter]时会结束当前输入，但是会删除缓冲区中的[enter]</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> a[<span class="number">10</span>];<span class="keyword">char</span> b;</span><br><span class="line">    cin.<span class="built_in">get</span>(a,<span class="number">10</span>);</span><br><span class="line">	cin.<span class="built_in">get</span>(b);</span><br><span class="line">	cout&lt;&lt;a&lt;&lt;endl&lt;&lt;<span class="built_in"><span class="keyword">int</span></span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入：12345[enter]<br>输出：12345 【换行】 10<br>说明：cin.get(a,10)把12345到a中，遇到[enter]结束，但是不把[enter]删除，则把[enter]输入到b中，（enter的ASCALL码为10）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> a[<span class="number">10</span>];<span class="keyword">char</span> b;</span><br><span class="line">    cin.<span class="built_in">getline</span>(a,<span class="number">10</span>);</span><br><span class="line">	cin.<span class="built_in">get</span>(b);</span><br><span class="line">	cout&lt;&lt;a&lt;&lt;endl&lt;&lt;<span class="built_in"><span class="keyword">int</span></span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入：12345[enter]a[enter]<br>输出：12345【换行】97<br>说明：cin.getline(a,10)吧12345输入到a中，遇到[enter]结束，并把缓冲区中[enter]删除，把接下来的a输入到b中</p>
<h3 id="cin-getline-arrayname-size-s-与cin-gei-arrayname-size-s-的区别"><a href="#cin-getline-arrayname-size-s-与cin-gei-arrayname-size-s-的区别" class="headerlink" title="cin.getline(arrayname,size,s)与cin.gei(arrayname,size,s)的区别"></a>cin.getline(arrayname,size,s)与cin.gei(arrayname,size,s)的区别</h3><p><code>cin.get（arrayname,size,s）</code>当遇到s时会结束输入，但不会删除缓冲区中的s<br><code>cin.getline(arrayname,size,s)</code>当遇到s时会结束输入，并把s从缓冲区中删除</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> a[<span class="number">10</span>];<span class="keyword">char</span> b;</span><br><span class="line">    cin.<span class="built_in">get</span>(a,<span class="number">10</span>,<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">	cin.<span class="built_in">get</span>(b);</span><br><span class="line">	cout&lt;&lt;a&lt;&lt;endl&lt;&lt;b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入：12345,[enter]<br>输出：12345【换行】，<br>说明：cin.get不会删除缓冲区的，缓存中的，被写入b中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> a[<span class="number">10</span>];<span class="keyword">char</span> b;</span><br><span class="line">    cin.<span class="built_in">getline</span>(a,<span class="number">10</span>,<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">	cin.<span class="built_in">get</span>(b);</span><br><span class="line">	cout&lt;&lt;a&lt;&lt;endl&lt;&lt;<span class="built_in"><span class="keyword">int</span></span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入：12345，[enter]<br>输出：12345【换行】10<br>说明：cin.getline吧12345输入到a中，遇到’，‘结束，并删除缓冲区的’，‘，后面的[enter]输入到b中</p>
<h1 id="类中static和const关键字声明变量的初始化方式"><a href="#类中static和const关键字声明变量的初始化方式" class="headerlink" title="类中static和const关键字声明变量的初始化方式"></a>类中static和const关键字声明变量的初始化方式</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">TestClass</span>() <span class="comment">//:a(16)</span></span><br><span class="line">  	&#123;</span><br><span class="line">  		cout &lt;&lt; <span class="string">&quot;TestClass Constructor .&quot;</span> &lt;&lt; endl;</span><br><span class="line">   	&#125;</span><br><span class="line">   	~<span class="built_in">TestClass</span>()</span><br><span class="line"> 	&#123;</span><br><span class="line">  		cout &lt;&lt; <span class="string">&quot;TestClass Destructor .&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">   	<span class="keyword">int</span> temp_a; <span class="comment">// = 5;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> temp_b;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> temp_c; <span class="comment">// = 25;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> temp_d; <span class="comment">// = 35;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">float</span> temp_e;    </span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="int-temp-a"><a href="#int-temp-a" class="headerlink" title="int temp_a;"></a>int temp_a;</h2><ol>
<li>在声明处初始化；</li>
<li>在构造函数初始化列表中初始化；</li>
</ol>
<p>对于非static、非const声明的变量，这两种初始化可以同时使用，同时使用时列表中的值会自动覆盖声明处的值。初始化不是必须的，若不进行初始化，其值是不确定的，可简单认为是随机的。该变量属于对象。</p>
<h2 id="static-int-temp-b"><a href="#static-int-temp-b" class="headerlink" title="static int temp_b;"></a>static int temp_b;</h2><p>必须在类的声明体外进行定义(若在定义时不给初值，则编译器自动赋予默认值，<code>int</code>型变量的默认值为0，定义时不使用关键字<code>static</code>。例如：<code>int TestClass::temp_b = 12</code>;<br>该变量属于类，不属于特定的对象，可以理解为全局的，为所有所实例化的对象所共享。可在程序中通过类名作用域符号的方式访问（如：<code>TestClass::temp_b = 18;</code>)，也可以通过对象访问。</p>
<h2 id="const-int-temp-c"><a href="#const-int-temp-c" class="headerlink" title="const int temp_c;"></a>const int temp_c;</h2><ol>
<li>在声明处初始化；</li>
<li>在构造函数初始化列表中初始化；</li>
</ol>
<p>必须初始化，这两种初始化可以同时使用，同时使用时构造函数初始化列表中的值会自动覆盖声明处给的初值。<br>该常量属于对象，在对象声明时进行初始化，对象声明以后就不能再改变常量的值，即在对象的生存周期内其值不变。</p>
<h2 id="const-static-int-temp-d-char-short-int-long"><a href="#const-static-int-temp-d-char-short-int-long" class="headerlink" title="const static int temp_d;//char short int long"></a>const static int temp_d;//char short int long</h2><ol>
<li>在声明处初始化；（在声明处初始化，则可以不用在类的声明体外进行定义）</li>
<li>在类的声明体外进行定义并初始化；<code>const int TestClass::temp_d = 15</code>;</li>
</ol>
<p>必须初始化，并且只能有一次初始化赋值（即1和2中，二选一）。<code>char</code>、<code>short</code>、<code>long</code>型静态常量都属于这种情况。<br>静态常量属于类，为所有的对象共享，既然是常量，初始化以后肯定就不能再有赋值操作。</p>
<h2 id="const-static-float-temp-e-float-double"><a href="#const-static-float-temp-e-float-double" class="headerlink" title="const static float temp_e; //float double"></a>const static float temp_e; //float double</h2><p>只能且必须在类的声明体外进行定义和初始化<code>const float TestClass::temp_e = 0.234f;</code> 静态常量的浮点型数据属于这种情况。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol>
<li>仅仅有关键字<code>const</code>，由于是常量，就必须进行初始化；可在声明处和构造函数列表中进行初始化，可以二选一，亦可以在这两处都初始化，初始化列表中的赋值会自动覆盖声明处的值。</li>
<li>仅仅有<code>static</code>,由于是静态变量，属于类本身，则必须在类的生命体外进行定义（若不给初值，则为默认值）</li>
<li>同时又<code>static</code>和<code>const</code>，这两个关键字的前后顺序无所谓，由于是静态常量，即同时具有静态和长常量的属性，使用条件就更加苛刻（即为一个常量，那就必须有初始化，并且还是静态的，那就自然属于类本身了）。整形数据可以在声明处初始化或者在类的声明体外进行定义并初始化，二选一。浮点型数据只能且必须在类的声明体外进行定义并初始化。</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Git笔记</title>
    <url>/2021/08/05/Git%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git config –global user.name 用户名</td>
<td>设置用户签名</td>
</tr>
<tr>
<td>git config –global user.email 邮箱</td>
<td>设置用户签名</td>
</tr>
<tr>
<td>git init</td>
<td>初始化本地库</td>
</tr>
<tr>
<td>git status</td>
<td>查看本地库状态</td>
</tr>
<tr>
<td>git add 文件名</td>
<td>添加到暂存区</td>
</tr>
<tr>
<td>git commit -m “日志信息” 文件名</td>
<td>提交到本地库</td>
</tr>
<tr>
<td>git reflog</td>
<td>查看历史记录</td>
</tr>
<tr>
<td>git reset –hard 版本号</td>
<td>版本穿梭</td>
</tr>
</tbody></table>
<ol>
<li><p>进入要管理的文件夹，初始化命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li>
<li><p>管理目录下的文件状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">注：新增的文件和修改后的文件都是红色</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>

<ol start="3">
<li><p>提交到暂存区，管理指定文件（红变录）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add 文件名</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure></li>
<li><p>再查看状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li>
<li><p>个人信息配置：用户名、邮箱【一次即可】,<br>这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任何关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>提交到版本库，生成版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &#39;日志信息&#39; 文件名</span><br><span class="line">git commit -m &quot;my first commit&quot; hello.txt</span><br></pre></td></tr></table></figure></li>
<li><p>查看状态（没有文件需要提交）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img data-src="git%E5%B7%A5%E4%BD%9C%E5%8C%BA.png" alt="git工作区" title="git工作区"></p>
<h1 id="历史版本"><a href="#历史版本" class="headerlink" title="历史版本"></a>历史版本</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reflog  查看版本信息</span><br><span class="line">git log     查看版本详细信息</span><br></pre></td></tr></table></figure>

<h2 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jsdelivr.net/gh/JulyForever/Photos/article/%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD.png" alt="版本穿梭"></p>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git branch 分支名称</td>
<td>创建分支</td>
</tr>
<tr>
<td>git branch -v</td>
<td>查看分支</td>
</tr>
<tr>
<td>git checkout 分支名称</td>
<td>切换分支</td>
</tr>
<tr>
<td>git merge 分支名称</td>
<td>把指定的分支合并到当前分支上</td>
</tr>
</tbody></table>
<ol>
<li><p>查看分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch</span><br><span class="line">git branch -v  &#x2F;&#x2F;查看每一个分支的最后一次提交</span><br></pre></td></tr></table></figure></li>
<li><p>创建分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch 分支名称</span><br></pre></td></tr></table></figure></li>
<li><p>切换分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout 分支名称</span><br></pre></td></tr></table></figure></li>
<li><p>合并分支（其它的合并到当前的）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge 要合并的分支</span><br><span class="line">注意：切换到当前主分支后，再合并其它新分支。如产生冲突需手动处理</span><br></pre></td></tr></table></figure></li>
<li><p>处理冲突<br>冲突产生的表现：后面状态为 MERGING<br>编辑有冲突的文件，删除特殊符号，决定要使用的内容。<br>特殊符号：&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 当前分支的代码 ======= 合并过来的代码 &gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add hello.txt    &#x2F;&#x2F;添加到暂存区</span><br><span class="line">git commit -m &quot;merge hot-fix&quot;    &#x2F;&#x2F;此时使用 git commit 命令时不能带文件名</span><br></pre></td></tr></table></figure>

<p>发现后面 MERGING 消失，变为正常</p>
</li>
</ol>
<ol start="6">
<li>删除分支<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -d 分支名称</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img data-src="%E5%B7%A5%E4%BD%9C%E6%B5%81.png" alt="工作流" title="工作流"></p>
<p><img data-src="bug%E5%88%86%E6%94%AF.png" alt="bug"></p>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git remote -v</td>
<td>查看当前所有远程地址别名</td>
</tr>
<tr>
<td>git remote add 别名 远程地址</td>
<td>起别名</td>
</tr>
<tr>
<td>git push 别名 分支</td>
<td>推送本地分支上的内容到远程仓库</td>
</tr>
<tr>
<td>git clone 远程地址</td>
<td>将远程仓库的内容克隆到本地</td>
</tr>
<tr>
<td>git pull 远程库地址别名 远程分支名</td>
<td>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</td>
</tr>
</tbody></table>
<h2 id="初次连接远程仓库"><a href="#初次连接远程仓库" class="headerlink" title="初次连接远程仓库"></a>初次连接远程仓库</h2><ol start="0">
<li><p>查看当前所有远程地址别名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote -v 查看当前所有远程地址别名</span><br></pre></td></tr></table></figure></li>
<li><p>连接远程仓库起别名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin（别名） 远程仓库地址</span><br></pre></td></tr></table></figure></li>
<li><p>向远程推送代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin（别名） 分支   </span><br><span class="line">&#x2F;&#x2F;指定一个默认主机，这样后面就可以不加任何参数使用git push</span><br><span class="line">&#x2F;&#x2F;不带任何参数的git push，默认只推送当前分支</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="新电脑克隆远程仓库到本地"><a href="#新电脑克隆远程仓库到本地" class="headerlink" title="新电脑克隆远程仓库到本地"></a>新电脑克隆远程仓库到本地</h2><ol>
<li>新电脑克隆远程仓库代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone 远程仓库地址</span><br><span class="line">注：已实现git remote add origin（别名） 远程仓库地址</span><br></pre></td></tr></table></figure></li>
</ol>
<p>clone 会做如下操作：1、拉取代码。2、初始化本地仓库。3、创建别名</p>
<ol start="2">
<li>切换分支<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout dev   &#x2F;&#x2F;切换</span><br><span class="line">git merge master  &#x2F;&#x2F;将master合并到dev</span><br><span class="line">git add. </span><br><span class="line">git commit -m &#39;提交说明&#39;</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="原电脑同步代码"><a href="#原电脑同步代码" class="headerlink" title="原电脑同步代码"></a>原电脑同步代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 切换到dev分支进行开发</span><br><span class="line">git checkout dev</span><br><span class="line">&#x2F;&#x2F; 拉代码同步</span><br><span class="line">git pull origin dev</span><br><span class="line">&#x2F;&#x2F; 开发完成后提交代码</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#39;代码说明&#39;</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure>

<h2 id="新电脑继续开发（同上）"><a href="#新电脑继续开发（同上）" class="headerlink" title="新电脑继续开发（同上）"></a>新电脑继续开发（同上）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 切换到dev分支进行开发</span><br><span class="line">git checkout dev</span><br><span class="line">&#x2F;&#x2F; 拉代码同步</span><br><span class="line">git pull origin dev</span><br><span class="line">&#x2F;&#x2F; 开发完成后提交代码</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#39;代码说明&#39;</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure>

<h2 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; dev分支合并到master进行上线</span><br><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;dev分支也推送到远程</span><br><span class="line">git checkout dev</span><br><span class="line">git merge master</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull origin dev</span><br><span class="line">等价于</span><br><span class="line">git fetch origin dev</span><br><span class="line">git merge origin&#x2F;dev</span><br></pre></td></tr></table></figure>

<h1 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h1><p>将分支合并为一条<br>详细的得再查查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout bugFix</span><br><span class="line">git rebase master   &#x2F;&#x2F;bugFix分支头放到了master分支末尾。有冲突需解决</span><br><span class="line">git checkout master  &#x2F;&#x2F;切换回master，此时head还在原末尾</span><br><span class="line">git merge bugFix     &#x2F;&#x2F;合并，head指向新的末尾了</span><br></pre></td></tr></table></figure>

<h1 id="快速解决冲突"><a href="#快速解决冲突" class="headerlink" title="快速解决冲突"></a>快速解决冲突</h1><ol>
<li><p>安装beyond compare软件</p>
</li>
<li><p>在git中配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;local为本地的工程里面添加单独的配置</span><br><span class="line">git config --local merge.tool bc3</span><br><span class="line">git config --local mergetool.path &#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;bcomp&#39;</span><br><span class="line">git config --local mergetool.keepBackup false</span><br></pre></td></tr></table></figure></li>
<li><p>使用beyond compare解决冲突</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git mergetool</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="多人协同开发"><a href="#多人协同开发" class="headerlink" title="多人协同开发"></a>多人协同开发</h1><p>github项目可以邀请成员加入设置对应权限，可以建立组织并设置成员权限</p>
<h2 id="tag标签管理"><a href="#tag标签管理" class="headerlink" title="tag标签管理"></a>tag标签管理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag -a v1.0 -m  &#39;版本介绍&#39;    创建本地tag信息</span><br><span class="line">git tag -d v1.0                  删除tag</span><br><span class="line">git push origin --tags           将本地tag信息推送到远程仓库</span><br><span class="line">git pull origin --tags           更新本地tag版本信息</span><br><span class="line"></span><br><span class="line">git checkout v.10                切换tag</span><br><span class="line">git clone -b v0.1  地址          指定tag下载代码</span><br></pre></td></tr></table></figure>

<h2 id="新成员在自己电脑下载代码并开发"><a href="#新成员在自己电脑下载代码并开发" class="headerlink" title="新成员在自己电脑下载代码并开发"></a>新成员在自己电脑下载代码并开发</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;oldboy-org&#x2F;dbhot.git</span><br><span class="line">cd dbhot</span><br><span class="line">git checkout dev</span><br><span class="line">git checkout -b dzz</span><br><span class="line"></span><br><span class="line">写代码</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m &#39;开发完成&#39;</span><br><span class="line">git push origin ddz</span><br></pre></td></tr></table></figure>

<h2 id="github配置代码review后才能合并"><a href="#github配置代码review后才能合并" class="headerlink" title="github配置代码review后才能合并"></a>github配置代码review后才能合并</h2><h2 id="提测上线（预发布）"><a href="#提测上线（预发布）" class="headerlink" title="提测上线（预发布）"></a>提测上线（预发布）</h2><ol>
<li>基于dev分支创建release分支</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout dev         &#x2F;&#x2F; 切换到dev</span><br><span class="line">git checkout -b release  &#x2F;&#x2F;创建并切换到release分支</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>测试等</p>
</li>
<li><p>合并到master</p>
</li>
</ol>
<p>使用pull request 或 本地将release合并到master</p>
<ol start="4">
<li>在master分支打tag</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag -a v2 -m &#39;第二版 斗地主功能&#39;</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>运维上线</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone -b v2 地址</span><br></pre></td></tr></table></figure>

<h1 id="给开源软件贡献代码"><a href="#给开源软件贡献代码" class="headerlink" title="给开源软件贡献代码"></a>给开源软件贡献代码</h1><ol>
<li>fork源代码 将别人源代码拷贝到自己的远程仓库</li>
<li>在自己的仓库进行修改源代码</li>
<li>给原代码的作者提交修复bug的申请（pull request）</li>
</ol>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul>
<li>项目配置文件：项目/.git/config</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --local user.name &#39;wupeiqi&#39;</span><br><span class="line">git config --local user.email &#39;wupeiqi@xx.com&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li>全局配置文件：~/.gitconfig</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &#39;wupeiq&#39;</span><br><span class="line">git config --global user.name &#39;wupeiqi@xx.com&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li>系统配置文件：/etc/.gitconfig</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;需要有root权限</span><br><span class="line">git config --system user.name &#39;wupeiq&#39;</span><br><span class="line">git config --system user.name &#39;wupeiqi@xx.com&#39;</span><br></pre></td></tr></table></figure>

<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --local user.name &#39;wupeiqi&#39;</span><br><span class="line">git config --local user.email &#39;wupeiqi@xx.com&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;软件解决冲突</span><br><span class="line">git config --local merge.tool bc3</span><br><span class="line">git config --local mergetool.path &#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;bcomp&#39;</span><br><span class="line">git config --local mergetool.keepBackup false</span><br><span class="line"></span><br><span class="line">git remote add origin 地址  &#x2F;&#x2F;默认添加在本地配置文件中(--local)</span><br></pre></td></tr></table></figure>

<h1 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h1><ul>
<li>URL中体现</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原来的地址：https:&#x2F;&#x2F;github.com&#x2F;WuPeiqi&#x2F;dbhot.git</span><br><span class="line">修改的地址：https:&#x2F;&#x2F;用户名:密码@github.com&#x2F;WuPeiqi&#x2F;dbhot.git</span><br><span class="line"></span><br><span class="line">git remote add origin https:&#x2F;&#x2F;户名:密码@github.com&#x2F;WuPeiqi&#x2F;dbhot.git</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<ul>
<li>SSH实现</li>
</ul>
<ol>
<li>生成公钥和私钥，默认放在~/.ssh目录下，id_rsa.pub公钥、id_rsa私钥。<br><code>ssh-keygen</code></li>
<li>拷贝公钥的内容，并设置到GitHub中</li>
<li>在git本地中配置SSH地址<br><code>git remote add origin git@github.com:WuPeiqi/dbhot.git</code></li>
<li>以后使用<br><code>git push origin master</code></li>
</ol>
<ul>
<li>git自动管理凭证</li>
</ul>
<h1 id="git忽略文件"><a href="#git忽略文件" class="headerlink" title="git忽略文件"></a>git忽略文件</h1><p>创建忽略规则文件 xxxx.ignore（前缀名随便起，建议是 git.ignore）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*.h</span><br><span class="line">!a.h</span><br><span class="line">files&#x2F;</span><br><span class="line">*.py[c|a|d]</span><br></pre></td></tr></table></figure>

<h1 id="github任务管理相关"><a href="#github任务管理相关" class="headerlink" title="github任务管理相关"></a>github任务管理相关</h1><ul>
<li>issues，文档以及任务管理</li>
<li>wiki，项目文档</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML笔记</title>
    <url>/2019/01/27/HTML%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 段落标签</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>My cat is very grumpy<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"># 斜体</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>This is my text.<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="块级元素和内联元素"><a href="#块级元素和内联元素" class="headerlink" title="块级元素和内联元素"></a>块级元素和内联元素</h1><ul>
<li>块级元素在页面中以块的形式展现 —— 相对与其前面的内容它会出现在新的一行，其后的内容也会被挤到下一行展现。块级元素通常用于展示页面上结构化的内容，例如段落、列表、导航菜单、页脚等等。一个以<code>block</code>形式展现的块级元素不会被嵌套进内联元素中，但可以嵌套在其它块级元素中。</li>
<li>内联元素通常出现在块级元素中并包裹文档内容的一小部分，而不是一整个段落或者一组内容。内联元素不会导致文本换行：它通常出现在一堆文字之间例如超链接元素<code>&lt;a&gt;</code>或者强调元素<code>&lt;em&gt;</code>和<code>&lt;strong&gt;</code>。</li>
</ul>
<h1 id="空元素"><a href="#空元素" class="headerlink" title="空元素"></a>空元素</h1><p>不是所有元素都拥有开始标签，内容和结束标记. 一些元素只有一个标签，通常用来在此元素所在位置插入/嵌入一些东西 。例如：元素<code>&lt;img&gt;</code>是用来在元素<code>&lt;img&gt;</code>所在位置插入一张指定的图片。例子如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://raw.githubusercontent.com/mdn/beginner-html-site/gh-pages/images/firefox-icon.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;editor-note&quot;</span>&gt;</span>My cat is very grumpy<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个class属性给元素赋了一个识别的名字（id），这个名字此后可以被用来识别此元素的样式信息和其他信息。</p>
<p>元素<code>&lt;a&gt;</code>是锚，它使被标签包裹的内容成为一个超链接。此元素也可以添加大量的属性，其中几个如下：</p>
<ul>
<li><code>href</code>: 这个属性声明超链接的web地址，当这个链接被点击浏览器会跳转至href声明的web地址。例如： <code>href=&quot;https://www.mozilla.org/&quot;</code>。</li>
<li><code>title</code>: 标题title 属性为超链接声明额外的信息，比如你将链接至那个页面。例如：<code>title=&quot;The Mozilla homepage&quot;</code>。当鼠标悬浮时，将出现一个工具提示。</li>
<li><code>target</code>: 目标target 属性指定将用于显示链接的浏览上下文。例如，<code>target=&quot;_blank&quot;</code>将在新标签页中显示链接。如果你希望在目前标签页显示链接，只需忽略这个属性。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>A link to my <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mozilla.org/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;The Mozilla homepage&quot;</span>&gt;</span>favorite website<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="布尔属性"><a href="#布尔属性" class="headerlink" title="布尔属性"></a>布尔属性</h2><p>有时你会看到没有值的属性，它是合法的。这些属性被称为布尔属性，他们只能有跟它的属性名一样的属性值。例如 disabled 属性，他们可以标记表单输入使之变为不可用(变灰色)，此时用户不能向他们输入任何数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 可以简写为</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="分析html文档"><a href="#分析html文档" class="headerlink" title="分析html文档"></a>分析html文档</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My test page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my page<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><code>&lt;!DOCTYPE html&gt;</code>: 声明文档类型. 很久以前，早期的HTML(大约1991年2月)，文档类型声明类似于链接，规定了HTML页面必须遵从的良好规则，能自动检测错误和其他有用的东西。使用如下：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然而现在没有人再这样写，需要保证每一个东西都正常工作已成为历史。你只需要知道<code>&lt;!DOCTYPE html&gt;</code>是最短的有效的文档声明。<br>2. <code>&lt;html&gt;&lt;/html&gt;</code>: <code>&lt;html&gt;</code>元素。这个元素包裹了整个完整的页面，是一个根元素。<br>3. <code>&lt;head&gt;&lt;/head&gt;</code>: <code>&lt;head&gt;</code>元素. 这个元素是一个容器，它包含了所有你想包含在HTML页面中但不想在HTML页面中显示的内容。这些内容包括你想在搜索结果中出现的关键字和页面描述，CSS样式，字符集声明等等。以后的章节能学到更多关于<head>元素的内容。<br>4. <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>: 这个元素设置文档使用<code>utf-8</code>字符集编码，<code>utf-8</code>字符集包含了人类大部分的文字。基本上他能识别你放上去的所有文本内容。毫无疑问要使用它，并且它能在以后避免很多其他问题。<br>5. <code>&lt;title&gt;&lt;/title&gt;</code>: 设置页面标题，出现在浏览器标签上，当你标记/收藏页面时它可用来描述页面。<br>6. <code>&lt;body&gt;&lt;/body&gt;</code>: <code>&lt;body&gt;</code>元素。 包含了你访问页面时所有显示在页面上的内容，文本，图片，音频，游戏等等。</p>
<h1 id="实体引用"><a href="#实体引用" class="headerlink" title="实体引用"></a>实体引用</h1><p>| 原义字符 | 等价字符引用 |<br>| —- | —- | —- |<br>| &lt; | <code>&amp;lt;</code> |<br>| &gt; | <code>&amp;gt;</code> |<br>| “ | <code>&amp;quot;</code> |<br>| ‘ | <code>&amp;apos;</code> |<br>| &amp; | <code>&amp;amp;</code> |</p>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>为了将一段HTML中的内容置为注释，你需要将其用特殊的记号<code>&lt;!--和--&gt;</code>包括起来， 比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;p&gt;I am!&lt;/p&gt; --&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Premiere教程笔记</title>
    <url>/2022/11/23/Premiere%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>C：剃刀<br>V：选择<br>A：向前选择轨道<br>Alt键，再点击音频，然后Delete：单独删除音频</p>
<h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><p>I：标记入店<br>O：标记出点<br>Shift + I：跳转入店<br>Shift + O：跳转出点</p>
<p>M：添加标记<br>Shift + M：到下一个标记<br>Ctrl + Shift + M：到上一个标记<br>Ctrl + Alt + M：清除当前标记<br>Ctrl + Alt + Shift + M：清除所有标记</p>
<h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><p>Ctrl + M：导出为媒体</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>剪辑</category>
      </categories>
      <tags>
        <tag>Premiere</tag>
      </tags>
  </entry>
  <entry>
    <title>Python @property装饰器详解</title>
    <url>/2023/01/16/Python%20@property%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>原文地址：<a href="http://c.biancheng.net/view/4561.html">Python @property装饰器详解</a></p>
<p>既要保护类的封装特性，又要让开发者可以使用“对象.属性”的方式操作操作类属性，除了使用 property() 函数，Python还提供了 @property 装饰器。通过 @property 装饰器，可以直接通过方法名来访问方法，不需要在方法名后添加一对“（）”小括号。</p>
<span id="more"></span>

<p>@property 的语法格式如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@property  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 方法名(<span class="params">self</span>)  </span></span><br><span class="line"><span class="function">    代码块</span></span><br></pre></td></tr></table></figure>

<p>例如，定义一个矩形类，并定义用 @property 修饰的方法操作类中的 area 私有属性，代码如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,area</span>):</span></span><br><span class="line">        self.__area = area</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__area</span><br><span class="line">rect = Rect(<span class="number">30</span>)</span><br><span class="line"><span class="comment">#直接通过方法名来访问 area 方法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;矩形的面积是：&quot;</span>,rect.area)</span><br></pre></td></tr></table></figure>

<p>运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">矩形的面积为： 30</span><br></pre></td></tr></table></figure>

<p>上面程序中，使用 ＠property 修饰了 area() 方法，这样就使得该方法变成了 area 属性的 getter 方法。需要注意的是，如果类中只包含该方法，那么 area 属性将是一个只读属性。</p>
<p>也就是说，在使用 Rect 类时，无法对 area 属性重新赋值，即运行如下代码会报错：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">rect.area = <span class="number">90</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;修改后的面积：&quot;</span>,rect.area)</span><br></pre></td></tr></table></figure>

<p>运行结果为：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):  </span><br><span class="line">  File <span class="string">&quot;C:\\Users\\mengma\\Desktop\\1.py&quot;</span>, line <span class="number">10</span>, <span class="keyword">in</span> &lt;module&gt;  </span><br><span class="line">    rect.area = <span class="number">90</span>  </span><br><span class="line">AttributeError: can<span class="string">&#x27;t set attribute</span></span><br></pre></td></tr></table></figure>

<p>而要想实现修改 area 属性的值，还需要为 area 属性添加 setter 方法，就需要用到 setter 装饰器，它的语法格式如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@方法名.setter  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 方法名(<span class="params">self, value</span>):</span>  </span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>

<p>例如，为 Rect 类中的 area 方法添加 setter 方法，代码如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@area.setter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">self, value</span>):</span></span><br><span class="line">    self.__area = value</span><br></pre></td></tr></table></figure>

<p>再次运行如下代码：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">rect.area = <span class="number">90</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;修改后的面积：&quot;</span>,rect.area)</span><br></pre></td></tr></table></figure>

<p>运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改后的面积: 90</span><br></pre></td></tr></table></figure>

<p>这样，area 属性就有了 getter 和 setter 方法，该属性就变成了具有读写功能的属性。</p>
<p>除此之外，还可以使用 deleter 装饰器来删除指定属性，其语法格式为：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@方法名.deleter  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 方法名(<span class="params">self</span>):</span>  </span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>

<p>例如，在 Rect 类中，给 area() 方法添加 deleter 方法，实现代码如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@area.deleter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.__area = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>然后运行如下代码：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> rect.area</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除后的area值为：&quot;</span>,rect.area)</span><br></pre></td></tr></table></figure>

<p>运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">删除后的area值为： 0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python sorted方法原理</title>
    <url>/2023/01/08/Python%20sorted%E6%96%B9%E6%B3%95%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>原文地址：<a href="https://zhuanlan.zhihu.com/p/342921306">python sorted方法原理，重点在key参数背后的lambda函数</a></p>
<h1 id="首先概括的说明sorted这个内置函数的用法："><a href="#首先概括的说明sorted这个内置函数的用法：" class="headerlink" title="首先概括的说明sorted这个内置函数的用法："></a>首先概括的说明sorted这个内置函数的用法：</h1><p>sorted函数返回一个已经排好序的元素列表，如果我们想以特定的方式进行排序，或者想对一个复杂的元素列表(例如嵌套列表或元组列表)进行排序，我们可以使用key参数。<br>key参数是一个可调用的匿名函数，在排序时，列表中的每一项都会调用key函数，sorted函数基于key函数返回的结果完成列表中项的排序。<br>lambda 关键字的使用，创建了一个可调用的匿名函数。在使用sorted函数的情况下，lambda 匿名函数只能有一个参数，并且返回一个可以比较大小的值。</p>
<span id="more"></span>

<h1 id="为什么key参数必须是可调用的，以及为什么使用-lambda-作为匿名可调用函数来完成这个任务呢？"><a href="#为什么key参数必须是可调用的，以及为什么使用-lambda-作为匿名可调用函数来完成这个任务呢？" class="headerlink" title="为什么key参数必须是可调用的，以及为什么使用 lambda 作为匿名可调用函数来完成这个任务呢？"></a>为什么key参数必须是可调用的，以及为什么使用 lambda 作为匿名可调用函数来完成这个任务呢？</h1><p>有以下两点：</p>
<p>（1）lambda关键字给我们提供了一个不用名字就能使用的函数。这个特性使得它非常适合用作函数的参数。lambda 函数的书写方式为，单词 lambda 后跟参数名列表，然后是单个代码块。参数列表和代码块由冒号分隔。这类似于 python 中的其他结构，比如 while、 for、 if 等等，它们都是具有代码块的语句。</p>
<p>lambda语法如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lambda  参数列表  : 代码块</span><br><span class="line">lambda parameter1,parameter2 : parameter1+parameter2</span><br></pre></td></tr></table></figure>

<p>例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [1]: f00 &#x3D; lambda x: x&#x2F;2</span><br><span class="line"></span><br><span class="line">In [2]: f00(10)</span><br><span class="line">Out[2]: 5.0</span><br><span class="line"></span><br><span class="line">In [3]: (lambda x: x&#x2F;2)(10)</span><br><span class="line">Out[3]: 5.0</span><br><span class="line"></span><br><span class="line">In [4]: (lambda x, y: x &#x2F; y)(10, 2)</span><br><span class="line">Out[4]: 5.0</span><br><span class="line"></span><br><span class="line">In [5]: (lambda: &#39;amazing lambda&#39;)() # func with no args!</span><br><span class="line">Out[5]: &#39;amazing lambda&#39;</span><br></pre></td></tr></table></figure>

<p>（2） sorted函数的内部实现是会遍历列表中的每一个元素(例如， e in list)，并把当前元素传递给 key 参数提供的函数，使用函数的返回结果创建一个排好序的列表。</p>
<p>sorted函数使用模式如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mylist &#x3D; [3,6,3,2,4,8,23]</span><br><span class="line">sorted(mylist, key&#x3D;WhatToSortBy)</span><br></pre></td></tr></table></figure>

<p>没使用key参数的例子:</p>
<blockquote>
<p>[2, 3, 3, 4, 6, 8, 23] # 所有的数字都是从小到大的顺序。</p>
</blockquote>
<p>使用key参数的例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mylist &#x3D; [3,6,3,2,4,8,23]</span><br><span class="line">sorted(mylist, key&#x3D;lambda x: x%2&#x3D;&#x3D;0)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[3, 3, 23, 6, 2, 4, 8] # 看到这个结果时有什么感觉？</p>
</blockquote>
<p>您可能想知道两件事情——首先，为什么奇数会出现在偶数之前。第二，为什么偶数的顺序是错误的？通过分析这个结果，我们将更深入地了解sorted()‘ key’参数是如何工作的，特别是与匿名 lambda 函数的关系。<br>首先，你会注意到，虽然奇数在偶数之前，但偶数本身并没有排序。为什么会这样？<br>因为sorted函数只被调用一次，如果我们指定了key参数，那么我们就按照key函数指向的值进行排序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sorted(mylist, key&#x3D;lambda x: x%2&#x3D;&#x3D;0)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[3,6,3,2,4,8,23] 变成 [0,1,0,1,1,1,0]，以下为lambda函数转换后的值及原值的映射关系。<br>0 -&gt; 3, 1 -&gt; 6, 0 -&gt; 3, 1 -&gt; 2, 1 -&gt; 4, 1 -&gt; 8, 0-&gt;23</p>
</blockquote>
<p>现在我们有了一些进展。当你对变换后的列表进行排序时，你得到了什么？</p>
<blockquote>
<p>[0,0,0,1,1,1,1]<br>0 -&gt; 3, 0 -&gt; 3, 0-&gt;23, 1 -&gt; 6, 1 -&gt; 2, 1 -&gt; 4, 1 -&gt; 8<br>[3, 3, 23, 6, 2, 4, 8]</p>
</blockquote>
<p>好了，现在我们知道为什么奇数会先于偶数了。但接下来的问题是: 为什么在我的最终列表中，6仍然排在2之前？由于排序只发生一次，而且我们不会调用任何排序函数将原始偶数值从低到高排序，因此这些值相对于其他值保持其原始顺序。</p>
<p><strong>例子：</strong></p>
<p><strong>mylist = [(3, 5, 8), (6, 2, 8), ( 2, 9, 4), (6, 8, 5)]</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sorted(mylist, key&#x3D;lambda x: x[1])</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p><strong>输出结果：</strong></p>
<blockquote>
<p><strong>[(6, 2, 8), (3, 5, 8), (6, 8, 5), (2, 9, 4)]</strong></p>
</blockquote>
<p>有任何疑问请留言。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 字典defaultdict讲解</title>
    <url>/2023/01/13/Python%20%E5%AD%97%E5%85%B8defaultdict%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<p>原文地址：<a href="https://cloud.tencent.com/developer/article/1968062">【Python进阶】可能是全网最详细的defaultdict讲解</a></p>
<h1 id="1-什么是defaultdict"><a href="#1-什么是defaultdict" class="headerlink" title="1 什么是defaultdict"></a>1 什么是defaultdict</h1><p>从名字上可以看出<code>defaultdict</code>也是一个<code>dict</code>，即<code>键值对</code>。在讲什么是<code>defaultdict</code>之前，我们先看看<code>dict</code>的常规用法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 也可以写成dict &#x3D; &#123;&#125;</span><br><span class="line">dic &#x3D; dict()</span><br><span class="line">dic[&#39;a&#39;] &#x3D; 1</span><br><span class="line">dic[&#39;b&#39;] &#x3D; 2</span><br><span class="line">print(dic[&#39;a&#39;])</span><br><span class="line">print(dic[&#39;b&#39;])</span><br><span class="line">print(dic[&#39;c&#39;])</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;test.py&quot;, line 7, in &lt;module&gt;</span><br><span class="line">    print(dic[&#39;c&#39;])</span><br><span class="line">KeyError: &#39;c&#39;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>可以看到，如果<code>dict</code>中没有对应的<code>key</code>则会抛出<code>KeyError</code>异常。针对这种情况，一般做法是调用<code>dict</code>的<code>get</code>方法，给一个默认值：</p>
<p>今天我们要学习的<code>defaultdict</code>便是解决这种带有默认值的<code>dict</code>，上面示例可以用<code>defaultdict</code>来解决：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections import defaultdict</span><br><span class="line">dic &#x3D; defaultdict(int)</span><br><span class="line">dic[&#39;a&#39;] &#x3D; 1</span><br><span class="line">dic[&#39;b&#39;] &#x3D; 2</span><br><span class="line">print(dic[&#39;a&#39;])</span><br><span class="line">print(dic[&#39;b&#39;])</span><br><span class="line">print(dic[&#39;c&#39;])</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h1 id="2-常规用法"><a href="#2-常规用法" class="headerlink" title="2 常规用法"></a>2 常规用法</h1><p><code>defaultdict</code>接受一个类型对象或函数对象，在取值时，如果不存在对应的<code>key</code>则返回对应的函数返回值或默认构造函数的实例对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections import defaultdict</span><br><span class="line"></span><br><span class="line">dic_1 &#x3D; defaultdict(int)</span><br><span class="line">dic_2 &#x3D; defaultdict(tuple)</span><br><span class="line">dic_3 &#x3D; defaultdict(list)</span><br><span class="line">dic_4 &#x3D; defaultdict(str)</span><br><span class="line">dic_5 &#x3D; defaultdict(set)</span><br><span class="line"> </span><br><span class="line">print(dic_1[&#39;a&#39;])</span><br><span class="line">print(dic_2[&#39;a&#39;])</span><br><span class="line">print(dic_3[&#39;a&#39;])</span><br><span class="line">print(dic_4[&#39;a&#39;])</span><br><span class="line">print(dic_5[&#39;a&#39;])</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">()</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">set()</span><br></pre></td></tr></table></figure>

<h1 id="3-自定义默认类型"><a href="#3-自定义默认类型" class="headerlink" title="3 自定义默认类型"></a>3 自定义默认类型</h1><p>上面小节我们用了<code>python</code>内置类型，接下来我们使用自定义类型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections import defaultdict</span><br><span class="line">  </span><br><span class="line">class Cls:</span><br><span class="line">    def __init__(self, val&#x3D;&#39;hello&#39;):</span><br><span class="line">        self.val &#x3D; val</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.val</span><br><span class="line"></span><br><span class="line">def fun(val&#x3D;121):</span><br><span class="line">    return val</span><br><span class="line"></span><br><span class="line">dic_1 &#x3D; defaultdict(Cls)</span><br><span class="line">dic_2 &#x3D; defaultdict(fun)</span><br><span class="line">print(dic_1[&#39;a&#39;])</span><br><span class="line">print(dic_2[&#39;a&#39;])</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">121</span><br></pre></td></tr></table></figure>

<p>可以看到，如果传入的是类对象，那么默认值会调用类的构造函数并返回对应实例；如果是函数，则直接调用函数，并将函数返回值作为默认值。</p>
<h1 id="4-重复调用生成默认值吗？"><a href="#4-重复调用生成默认值吗？" class="headerlink" title="4 重复调用生成默认值吗？"></a>4 重复调用生成默认值吗？</h1><p>当我们多次取不存在的<strong>相同</strong><code>key</code>对应的默认值时，会多次调用函数或构造函数吗？我们看一个示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections import defaultdict</span><br><span class="line"> </span><br><span class="line">def fun(val&#x3D;121):</span><br><span class="line">    print(&#39;创建了默认值&#39;)</span><br><span class="line">    return val</span><br><span class="line"> </span><br><span class="line">dic &#x3D; defaultdict(fun) </span><br><span class="line">for i in range(1000):</span><br><span class="line">    dic[&#39;a&#39;]</span><br><span class="line"></span><br><span class="line">print(&#39;------&#39;)</span><br><span class="line">dic[&#39;b&#39;]</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建了默认值</span><br><span class="line">------</span><br><span class="line">创建了默认值</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看到，同一个<code>key</code>只会调用了一次取默认值函数。</p>
</blockquote>
<h1 id="5-返回的默认值是同一个对象吗？"><a href="#5-返回的默认值是同一个对象吗？" class="headerlink" title="5 返回的默认值是同一个对象吗？"></a>5 返回的默认值是同一个对象吗？</h1><p>当<code>key</code>相同时返回的默认值是同一个对象吗？当<code>key</code>不同时返回的默认值是同一个对象吗？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections import defaultdict</span><br><span class="line"> </span><br><span class="line">class Cls:</span><br><span class="line">    def __init__(self, val&#x3D;&#39;hello&#39;):</span><br><span class="line">        self.val &#x3D; val</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.val</span><br><span class="line"></span><br><span class="line">dic &#x3D; defaultdict(Cls) </span><br><span class="line"></span><br><span class="line">print(dic[&#39;a&#39;]&#x3D;&#x3D; dic[&#39;a&#39;])</span><br><span class="line">print(dic[&#39;a&#39;]&#x3D;&#x3D; dic[&#39;b&#39;])</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<p>从第<code>4</code>小节我们说过：<strong>同一个<code>key</code>只会调用了一次取默认值函数。</strong> 因此也能理解第一个返回结果是<code>True</code>。同理，不同的<code>key</code>会调用分开调用去默认值，因此第二个返回<code>False</code></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 字典用法详解</title>
    <url>/2023/01/09/Python%20%E5%AD%97%E5%85%B8%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>原文地址：<a href="https://zhuanlan.zhihu.com/p/355443925">Python 字典用法详解（超全）</a></p>
<p><strong>字典(Dictionary)是Python提供的一种常用的数据结构，由键（key）和值（value）成对组成，键和值中间以冒号：隔开，项之间用逗号隔开，整个字典由大括号{}括起来</strong>。</p>
<p>格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dic &#x3D; &#123;key1 : value1, key2 : value2 &#125;</span><br></pre></td></tr></table></figure>

<p>字典也被称作关联数组或哈希表。下面是几种常见的字典创建方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 方法1</span><br><span class="line">dic1 &#x3D; &#123; &#39;Author&#39; : &#39;Python当打之年&#39; , &#39;age&#39; : 99 , &#39;sex&#39; : &#39;男&#39; &#125;</span><br><span class="line"></span><br><span class="line"># 方法2</span><br><span class="line">lst &#x3D; [(&#39;Author&#39;, &#39;Python当打之年&#39;), (&#39;age&#39;, 99), (&#39;sex&#39;, &#39;男&#39;)]</span><br><span class="line">dic2 &#x3D; dict(lst)</span><br><span class="line"></span><br><span class="line"># 方法3</span><br><span class="line">dic3 &#x3D; dict( Author &#x3D; &#39;Python当打之年&#39;, age &#x3D; 99, sex &#x3D; &#39;男&#39;)</span><br><span class="line"></span><br><span class="line"># 方法4</span><br><span class="line">list1 &#x3D; [&#39;Author&#39;, &#39;age&#39;, &#39;sex&#39;]</span><br><span class="line">list2 &#x3D; [&#39;Python当打之年&#39;, 99, &#39;男&#39;]</span><br><span class="line">dic4 &#x3D; dict(zip(list1, list2))</span><br><span class="line"></span><br><span class="line"># 方法5 创建空字典</span><br><span class="line">dic &#x3D; &#123;&#125;</span><br><span class="line">print(dic)            #&#123;&#125;</span><br><span class="line">print(type(dic))       # &lt;class &#39;dict&#39;&gt;</span><br></pre></td></tr></table></figure>

<p>字典创建的方式还有很多种，这里不再赘述。</p>
<span id="more"></span>

<p><strong>接下来是重点</strong></p>
<p><strong>接下来是重点</strong></p>
<p><strong>接下来是重点</strong></p>
<p>字典由 dict 类代表，可以使用**dir(dict)**来查看该类包含哪些方法，输入命令，可以看到如下输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">methods &#x3D; dir(dict)</span><br><span class="line">print(&#39;methods &#x3D; &#39;,methods)</span><br><span class="line"></span><br><span class="line">methods &#x3D; [&#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;fromkeys&#39;, &#39;get&#39;, &#39;items&#39;, &#39;keys&#39;, &#39;pop&#39;, &#39;popitem&#39;, &#39;setdefault&#39;, &#39;update&#39;, &#39;values&#39;]</span><br></pre></td></tr></table></figure>

<p>字典的方法和属性有很多种，这里我们<strong>重点介绍以下11种方法</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;clear&#39;, &#39;copy&#39;, &#39;fromkeys&#39;, &#39;get&#39;, &#39;items&#39;, &#39;keys&#39;, &#39;pop&#39;, &#39;popitem&#39;, &#39;setdefault&#39;, &#39;update&#39;, &#39;values&#39;]</span><br></pre></td></tr></table></figure>

<p><strong>1、dict.clear()</strong></p>
<p>clear() 用于清空字典中所有元素（键-值对），对一个字典执行 clear() 方法之后，该字典就会变成一个空字典。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list1 &#x3D; [&#39;Author&#39;, &#39;age&#39;, &#39;sex&#39;]</span><br><span class="line">list2 &#x3D; [&#39;Python当打之年&#39;, 99, &#39;男&#39;]</span><br><span class="line">dic1 &#x3D; dict(zip(list1, list2))</span><br><span class="line"># dic1 &#x3D; &#123;&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: 99, &#39;sex&#39;: &#39;男&#39;&#125;</span><br><span class="line"></span><br><span class="line">dic1.clear()</span><br><span class="line"># dic1 &#x3D; &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、dict.copy()</strong></p>
<p>copy() 用于返回一个字典的浅拷贝。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list1 &#x3D; [&#39;Author&#39;, &#39;age&#39;, &#39;sex&#39;]</span><br><span class="line">list2 &#x3D; [&#39;Python当打之年&#39;, 99, &#39;男&#39;]</span><br><span class="line">dic1 &#x3D; dict(zip(list1, list2))</span><br><span class="line"></span><br><span class="line">dic2 &#x3D; dic1 # 浅拷贝: 引用对象</span><br><span class="line">dic3 &#x3D; dic1.copy() # 浅拷贝：深拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用</span><br><span class="line">dic1[&#39;age&#39;] &#x3D; 18</span><br><span class="line"></span><br><span class="line"># dic1 &#x3D; &#123;&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: 18, &#39;sex&#39;: &#39;男&#39;&#125;</span><br><span class="line"># dic2 &#x3D; &#123;&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: 18, &#39;sex&#39;: &#39;男&#39;&#125;</span><br><span class="line"># dic3 &#x3D; &#123;&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: 99, &#39;sex&#39;: &#39;男&#39;&#125;</span><br></pre></td></tr></table></figure>

<p>其中 dic2 是 dic1 的引用，所以输出结果是一致的，dic3 父对象进行了深拷贝，不会随dic1 修改而修改，子对象是浅拷贝所以随 dic1 的修改而修改，注意父子关系。</p>
<p><strong>拓展深拷贝：copy.deepcopy()</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import copy</span><br><span class="line"></span><br><span class="line">list1 &#x3D; [&#39;Author&#39;, &#39;age&#39;, &#39;sex&#39;]</span><br><span class="line">list2 &#x3D; [&#39;Python当打之年&#39;, [18,99], &#39;男&#39;]</span><br><span class="line">dic1 &#x3D; dict(zip(list1, list2))</span><br><span class="line"></span><br><span class="line">dic2 &#x3D; dic1</span><br><span class="line">dic3 &#x3D; dic1.copy()</span><br><span class="line">dic4 &#x3D; copy.deepcopy(dic1)</span><br><span class="line">dic1[&#39;age&#39;].remove(18)</span><br><span class="line">dic1[&#39;age&#39;] &#x3D; 20</span><br><span class="line"></span><br><span class="line"># dic1 &#x3D; &#123;&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: 20, &#39;sex&#39;: &#39;男&#39;&#125;</span><br><span class="line"># dic2 &#x3D; &#123;&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: 20, &#39;sex&#39;: &#39;男&#39;&#125;</span><br><span class="line"># dic3 &#x3D; &#123;&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: [99], &#39;sex&#39;: &#39;男&#39;&#125;</span><br><span class="line"># dic4 &#x3D; &#123;&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: [18, 99], &#39;sex&#39;: &#39;男&#39;&#125;</span><br></pre></td></tr></table></figure>

<p>dic2 是 dic1 的引用，所以输出结果是一致的；dic3 父对象进行了深拷贝，不会随dic1 修改而修改，子对象是浅拷贝所以随 dic1 的修改而修改；dic4 进行了深拷贝，递归拷贝所有数据，相当于完全在另外内存中新建原字典，所以修改dic1不会影响dic4的数据</p>
<p><strong>3、dict.fromkeys()</strong></p>
<p>fromkeys() 使用给定的多个键创建一个新字典，值默认都是 None，也可以传入一个参数作为默认的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list1 &#x3D; [&#39;Author&#39;, &#39;age&#39;, &#39;sex&#39;]</span><br><span class="line">dic1 &#x3D; dict.fromkeys(list1)</span><br><span class="line">dic2 &#x3D; dict.fromkeys(list1, &#39;Python当打之年&#39;)</span><br><span class="line"></span><br><span class="line"># dic1 &#x3D; &#123;&#39;Author&#39;: None, &#39;age&#39;: None, &#39;sex&#39;: None&#125;</span><br><span class="line"># dic2 &#x3D; &#123;&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: &#39;Python当打之年&#39;, &#39;sex&#39;: &#39;Python当打之年&#39;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4、dict.get()</strong></p>
<p>get() 用于返回指定键的值，也就是根据键来获取值，在键不存在的情况下，返回 None，也可以指定返回值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list1 &#x3D; [&#39;Author&#39;, &#39;age&#39;, &#39;sex&#39;]</span><br><span class="line">list2 &#x3D; [&#39;Python当打之年&#39;, [18,99], &#39;男&#39;]</span><br><span class="line">dic1 &#x3D; dict(zip(list1, list2))</span><br><span class="line"></span><br><span class="line">Author &#x3D; dic1.get(&#39;Author&#39;)</span><br><span class="line"># Author &#x3D; Python当打之年</span><br><span class="line">phone &#x3D; dic1.get(&#39;phone&#39;)</span><br><span class="line"># phone &#x3D; None</span><br><span class="line">phone &#x3D; dic1.get(&#39;phone&#39;,&#39;12345678&#39;)</span><br><span class="line"># phone &#x3D; 12345678</span><br></pre></td></tr></table></figure>

<p><strong>5、dict.items()</strong></p>
<p>items() 获取字典中的所有键-值对，一般情况下可以将结果转化为列表再进行后续处理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list1 &#x3D; [&#39;Author&#39;, &#39;age&#39;, &#39;sex&#39;]</span><br><span class="line">list2 &#x3D; [&#39;Python当打之年&#39;, [18,99], &#39;男&#39;]</span><br><span class="line">dic1 &#x3D; dict(zip(list1, list2))</span><br><span class="line">items &#x3D; dic1.items()</span><br><span class="line">print(&#39;items &#x3D; &#39;, items)</span><br><span class="line">print(type(items))</span><br><span class="line">print(&#39;items &#x3D; &#39;, list(items))</span><br><span class="line"></span><br><span class="line"># items &#x3D; dict_items([(&#39;Author&#39;, &#39;Python当打之年&#39;), (&#39;age&#39;, [18, 99]), (&#39;sex&#39;, &#39;男&#39;)])</span><br><span class="line"># &lt;class &#39;dict_items&#39;&gt;</span><br><span class="line"># items &#x3D; [(&#39;Author&#39;, &#39;Python当打之年&#39;), (&#39;age&#39;, [18, 99]), (&#39;sex&#39;, &#39;男&#39;)]</span><br></pre></td></tr></table></figure>

<p><strong>6、dict.keys()</strong></p>
<p>keys() 返回一个字典所有的键。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list1 &#x3D; [&#39;Author&#39;, &#39;age&#39;, &#39;sex&#39;]</span><br><span class="line">list2 &#x3D; [&#39;Python当打之年&#39;, [18,99], &#39;男&#39;]</span><br><span class="line">dic1 &#x3D; dict(zip(list1, list2))</span><br><span class="line">keys &#x3D; dic1.keys()</span><br><span class="line">print(&#39;keys &#x3D; &#39;, keys)</span><br><span class="line">print(type(keys))</span><br><span class="line">print(&#39;keys &#x3D; &#39;, list(keys))</span><br><span class="line"></span><br><span class="line"># keys &#x3D; dict_keys([&#39;Author&#39;, &#39;age&#39;, &#39;sex&#39;])</span><br><span class="line"># &lt;class &#39;dict_keys&#39;&gt;</span><br><span class="line"># keys &#x3D; [&#39;Author&#39;, &#39;age&#39;, &#39;sex&#39;]</span><br></pre></td></tr></table></figure>

<p><strong>7、dict.pop()</strong></p>
<p>pop() 返回指定键对应的值，并在原字典中删除这个键-值对。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list1 &#x3D; [&#39;Author&#39;, &#39;age&#39;, &#39;sex&#39;]</span><br><span class="line">list2 &#x3D; [&#39;Python当打之年&#39;, [18,99], &#39;男&#39;]</span><br><span class="line">dic1 &#x3D; dict(zip(list1, list2))</span><br><span class="line">sex &#x3D; dic1.pop(&#39;sex&#39;)</span><br><span class="line">print(&#39;sex &#x3D; &#39;, sex)</span><br><span class="line">print(&#39;dic1 &#x3D; &#39;,dic1)</span><br><span class="line"></span><br><span class="line"># sex &#x3D; 男</span><br><span class="line"># dic1 &#x3D; &#123;&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: [18, 99]&#125;</span><br></pre></td></tr></table></figure>

<p><strong>8、dict.popitem()</strong></p>
<p>popitem() 删除字典中的最后一对键和值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list1 &#x3D; [&#39;Author&#39;, &#39;age&#39;, &#39;sex&#39;]</span><br><span class="line">list2 &#x3D; [&#39;Python当打之年&#39;, [18,99], &#39;男&#39;]</span><br><span class="line">dic1 &#x3D; dict(zip(list1, list2))</span><br><span class="line">dic1.popitem()</span><br><span class="line">print(&#39;dic1 &#x3D; &#39;,dic1)</span><br><span class="line"></span><br><span class="line"># dic1 &#x3D; &#123;&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: [18, 99]&#125;</span><br></pre></td></tr></table></figure>

<p><strong>9、dict.setdefault()</strong></p>
<p>setdefault() 和 get() 类似, 但如果键不存在于字典中，将会添加键并将值设为default。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list1 &#x3D; [&#39;Author&#39;, &#39;age&#39;, &#39;sex&#39;]</span><br><span class="line">list2 &#x3D; [&#39;Python当打之年&#39;, [18,99], &#39;男&#39;]</span><br><span class="line">dic1 &#x3D; dict(zip(list1, list2))</span><br><span class="line">dic1.setdefault(&#39;Author&#39;, &#39;当打之年&#39;)</span><br><span class="line">print(&#39;dic1 &#x3D; &#39;,dic1)</span><br><span class="line"># dic1 &#x3D; &#123;&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: [18, 99], &#39;sex&#39;: &#39;男&#39;&#125;</span><br><span class="line">dic1.setdefault(&#39;name&#39;, &#39;当打之年&#39;)</span><br><span class="line">print(&#39;dic1 &#x3D; &#39;,dic1)</span><br><span class="line"># dic1 &#x3D; &#123;&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: [18, 99], &#39;sex&#39;: &#39;男&#39;, &#39;name&#39;: &#39;当打之年&#39;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>10、dict.update(dict1)</strong></p>
<p>update() 字典更新，将字典dict1的键-值对更新到dict里，如果被更新的字典中己包含对应的键-值对，那么原键-值对会被覆盖，如果被更新的字典中不包含对应的键-值对，则添加该键-值对。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list1 &#x3D; [&#39;Author&#39;, &#39;age&#39;, &#39;sex&#39;]</span><br><span class="line">list2 &#x3D; [&#39;Python当打之年&#39;, [18,99], &#39;男&#39;]</span><br><span class="line">dic1 &#x3D; dict(zip(list1, list2))</span><br><span class="line">print(&#39;dic1 &#x3D; &#39;,dic1)</span><br><span class="line"># dic1 &#x3D; &#123;&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: [18, 99], &#39;sex&#39;: &#39;男&#39;&#125;</span><br><span class="line"></span><br><span class="line">list3 &#x3D; [&#39;Author&#39;, &#39;phone&#39; ]</span><br><span class="line">list4 &#x3D; [&#39;当打之年&#39;, 12345678]</span><br><span class="line">dic2 &#x3D; dict(zip(list3, list4))</span><br><span class="line">print(&#39;dic2 &#x3D; &#39;,dic2)</span><br><span class="line"># dic2 &#x3D; &#123;&#39;Author&#39;: &#39;当打之年&#39;, &#39;phone&#39;: 12345678&#125;</span><br><span class="line"></span><br><span class="line">dic1.update(dic2)</span><br><span class="line">print(&#39;dic1 &#x3D; &#39;,dic1)</span><br><span class="line"># dic1 &#x3D; &#123;&#39;Author&#39;: &#39;当打之年&#39;, &#39;age&#39;: [18, 99], &#39;sex&#39;: &#39;男&#39;, &#39;phone&#39;: 12345678&#125;</span><br></pre></td></tr></table></figure>

<p><strong>11、dict.values()</strong></p>
<p>values() 返回一个字典所有的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list1 &#x3D; [&#39;Author&#39;, &#39;age&#39;, &#39;sex&#39;]</span><br><span class="line">list2 &#x3D; [&#39;Python当打之年&#39;, [18,99], &#39;男&#39;]</span><br><span class="line">dic1 &#x3D; dict(zip(list1, list2))</span><br><span class="line">values &#x3D; dic1.values()</span><br><span class="line">print(&#39;values &#x3D; &#39;, values)</span><br><span class="line">print(type(values))</span><br><span class="line">print(&#39;values &#x3D; &#39;, list(values))</span><br><span class="line"></span><br><span class="line"># values &#x3D; dict_values([&#39;Python当打之年&#39;, [18, 99], &#39;男&#39;])</span><br><span class="line"># &lt;class &#39;dict_values&#39;&gt;</span><br><span class="line"># values &#x3D; [&#39;Python当打之年&#39;, [18, 99], &#39;男&#39;]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python常用函数方法</title>
    <url>/2019/01/14/Python%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h1><h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2><p>join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。<br><code>str.join(item)</code>，join函数是一个字符串操作函数。<br><code>str</code>表示字符串（字符），<code>item</code>表示一个成员，注意括号里必须只能有一个成员，比如<code>&#39;,&#39;.join(&#39;a&#39;,&#39;b&#39;)</code>这种写法是行不通的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将字符串abc中的每个成员，以字符&#x27;,&#x27;分隔开再拼接成一个字符串</span></span><br><span class="line"><span class="string">&#x27;,&#x27;</span>.join(<span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果为<code>&#39;a,b,c&#39;</code></p>
<p>join里放列表、元组、字典也是可以的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;;&#x27;</span>.join([a,b,c])</span><br><span class="line">&gt;&gt;  <span class="string">&#x27;a;b;c&#x27;</span></span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://blog.csdn.net/chixujohnny/article/details/53301995">Python中的 .join()用法</a></p>
<span id="more"></span>

<h2 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h2><p><code>str.split(sep=&quot;&quot;,num=string.count(str))[n]</code><br>拆分字符串。通过指定分隔符对字符串进行切片，并返回分割后的字符串列表（list），如果参数 num 有指定值，则仅分隔 num+1 个子字符串。</p>
<ul>
<li><code>sep</code>：表示为分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等，但是不能为空(‘’)。若字符串中没有分隔符，则把整个字符串作为列表的一个元素</li>
<li><code>num</code>：表示分割次数。如果存在参数num，则仅分隔成 num+1 个子字符串，并且每一个子字符串可以赋给新的变量</li>
<li><code>[n]</code>：表示选取第n个分片</li>
</ul>
<ol>
<li>无参数的情况</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;my name is zhangkang&quot;</span></span><br><span class="line">b=<span class="string">&quot;my\nname\nis\nzhangkang&quot;</span></span><br><span class="line">c=<span class="string">&quot;my\tname\tis\tzhangkang&quot;</span></span><br><span class="line"></span><br><span class="line">a=a.split()</span><br><span class="line">b=b.split()</span><br><span class="line">c=c.split()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;zhangkang&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;zhangkang&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;zhangkang&#x27;</span>]</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>有参数的情况</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=<span class="string">&quot;my,name,is,zhangkang&quot;</span></span><br><span class="line">e=<span class="string">&quot;my;name;is;zhangkang&quot;</span></span><br><span class="line">f=<span class="string">&quot;my-name-is-zhangkang&quot;</span></span><br><span class="line"></span><br><span class="line">d=d.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">e=e.split(<span class="string">&quot;;&quot;</span>)</span><br><span class="line">f=f.split(<span class="string">&quot;-&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;zhangkang&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;zhangkang&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;zhangkang&#x27;</span>]</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>有两个参数的情况</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;My,name,is,zhangkang,and,I,am,a,student&quot;</span></span><br><span class="line">b1=a.split(<span class="string">&quot;,&quot;</span>,<span class="number">1</span>)</span><br><span class="line">b2=a.split(<span class="string">&quot;,&quot;</span>,<span class="number">2</span>)</span><br><span class="line">b8=a.split(<span class="string">&quot;,&quot;</span>,<span class="number">8</span>)</span><br><span class="line">b9=a.split(<span class="string">&quot;,&quot;</span>,<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b1)</span><br><span class="line"><span class="built_in">print</span>(b2)</span><br><span class="line"><span class="built_in">print</span>(b8)</span><br><span class="line"><span class="built_in">print</span>(b9)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;My&#x27;</span>, <span class="string">&#x27;name,is,zhangkang,and,I,am,a,student&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;My&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;is,zhangkang,and,I,am,a,student&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;My&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;zhangkang&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;student&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;My&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;zhangkang&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;student&#x27;</span>] <span class="comment">#超过最大分割次数，还是最大分割，不报错</span></span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://blog.csdn.net/csdn15698845876/article/details/74012511">python中split()函数讲解</a></p>
<h2 id="strip"><a href="#strip" class="headerlink" title="strip()"></a>strip()</h2><p>声明：<code>s</code>为字符串，<code>rm</code>为要删除的字符序列。<br>当<code>rm</code>为空时，默认删除空白符（包括<code>\n</code>, <code>\r</code>,  <code>\t</code>,  <code>&#39; &#39;</code>)</p>
<p><code>s.strip(rm)</code>，删除s字符串中开头、结尾处，位于rm删除序列的字符<br><code>s.lstrip(rm)</code>，删除s字符串中开头处，位于rm删除序列的字符<br><code>s.rstrip(rm)</code>，删除s字符串中结尾处，位于rm删除序列的字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = <span class="string">&#x27;123abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.strip(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;3abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.strip(<span class="string">&#x27;21&#x27;</span>) <span class="comment"># 没有顺序</span></span><br><span class="line"><span class="string">&#x27;3abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.strip(<span class="string">&#x27;31&#x27;</span>) <span class="comment"># 只要开头和结尾中含有rm中的字符 就删除</span></span><br><span class="line"><span class="string">&#x27;23abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.strip(<span class="string">&#x27;bc&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;123a&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="print-f-‘‘-的用法"><a href="#print-f-‘‘-的用法" class="headerlink" title="print(f ‘‘)的用法"></a>print(f ‘‘)的用法</h1><h2 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h2><p><code>print(f&#39;.....&#39;)</code></p>
<p>注意：<strong>f后面一定要紧跟字符串，不能隔有空格，否则会报错</strong></p>
<p>print语句中加入f就可以起到和format函数类似的作用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; 1</span><br><span class="line">b &#x3D; 2</span><br><span class="line">c &#x3D; 3</span><br><span class="line">print(f&#39;a&#x3D;&#123;a&#125;, b&#x3D;&#123;b&#125;, c&#x3D;&#123;c&#125;&#39;)</span><br><span class="line"># 等价于print(&#39;a&#x3D;&#123;&#125;, b&#x3D;&#123;&#125;, c&#x3D;&#123;&#125;&#39;.format(a, b, c))</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">a&#x3D;1, b&#x3D;2, c&#x3D;3</span><br></pre></td></tr></table></figure>

<p>可以看出printf的语法特别清楚，他<a href="https://so.csdn.net/so/search?q=%E6%AF%94%E8%BE%83%E5%99%A8&spm=1001.2101.3001.7020">比较器</a>format的用法更加清晰，因为format还需要前后将括号对号入座，而<strong>printf中的括号可以直观地直接看的里面的值是什么</strong>。</p>
<h2 id="nf-控制小数点位数"><a href="#nf-控制小数点位数" class="headerlink" title="{:.nf}控制小数点位数"></a><code>&#123;:.nf&#125;</code>控制小数点位数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a &#x3D; np.sqrt(2)</span><br><span class="line">b &#x3D; np.sqrt(3)</span><br><span class="line">c &#x3D; np.sqrt(5)</span><br><span class="line">print(f&#39;a&#x3D;&#123;a:.1f&#125;, b&#x3D;&#123;b:.2f&#125;, c&#x3D;&#123;c:.3f&#125;&#39;)</span><br><span class="line"># 等效于print(&#39;a&#x3D;&#123;:.1f&#125;, b&#x3D;&#123;:.2f&#125;, c&#x3D;&#123;:.3f&#125;&#39;.format(a, b, c))</span><br><span class="line"></span><br><span class="line">结果</span><br><span class="line">a&#x3D;1.4, b&#x3D;1.73, c&#x3D;2.236</span><br><span class="line"># 分别保留1位，两位，三位小数</span><br></pre></td></tr></table></figure>

<p><code>&#123;:.nf&#125;</code>，n代表着保留几位小数，上面的例子一目了然</p>
<p>这里可以看到，printf比format的优势更明显了，括号里一目了然</p>
<h2 id="更多解释"><a href="#更多解释" class="headerlink" title="更多解释"></a>更多解释</h2><p>参考python官方文档：<br><a href="https://docs.python.org/3.6/whatsnew/3.6.html#pep-498-formatted-string-literals">https://docs.python.org/3.6/whatsnew/3.6.html#pep-498-formatted-string-literals</a></p>
<p>**这种字符常量表示方式是在python3.6之后引入的。**更低的版本会报错</p>
<p>PEP 498（即Python Enhancement Proposals， Python增强提案或Python改进建议书），引入了一种新的字符串字面量:f-字符串，或格式化字符串字面量。格式化字符串字面值以’f’作为前缀，类似于str.format()所接受的格式字符串。它们包含用花括号括起来的替换字段。</p>
<p>更详细的介绍可以参考PEP 498的页面：<a href="https://www.python.org/dev/peps/pep-0498/">https://www.python.org/dev/peps/pep-0498/</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之可变参数</title>
    <url>/2023/01/15/Python%E4%B9%8B%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>原文地址：<a href="https://blog.csdn.net/cadi2011/article/details/84871401">Python之可变参数，*参数，**参数，以及传入*参数，**参数解包，*args，**kwargs的理解</a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>*参数与**参数是Python参数中的重点知识，他们都被称为可变参数（任意参数），我们经常会在代码中看到*args、**kwargs</p>
<p>作为函数定义时：</p>
<p>1、*参数收集所有未匹配的位置参数组成一个tuple对象，局部变量args指向此tuple对象</p>
<p>2、**参数收集所有未匹配的关键字参数组成一个dict对象，局部变量kwargs指向此dict对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">temp</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>作为函数调用时：</p>
<p>1、*参数用于解包tuple对象的每个元素，作为一个一个的位置参数传入到函数中</p>
<p>2、**参数用于解包dict对象的每个元素，作为一个一个的关键字参数传入到函数中</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_tuple = (<span class="string">&quot;wang&quot;</span>,<span class="string">&quot;yuan&quot;</span>,<span class="string">&quot;wai&quot;</span>)</span><br><span class="line">temp(*my_tuple)</span><br><span class="line"><span class="comment">#---等同于---#</span></span><br><span class="line">temp(<span class="string">&quot;wangyuan&quot;</span>,<span class="string">&quot;yuan&quot;</span>,<span class="string">&quot;wai&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;wangyuanwai&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">32</span>&#125;</span><br><span class="line"></span><br><span class="line">temp(**my_dict)</span><br><span class="line"><span class="comment">#----等同于----#</span></span><br><span class="line">temp(name=<span class="string">&quot;wangyuanwai&quot;</span>,age=<span class="number">32</span>)</span><br></pre></td></tr></table></figure>

<p>这些基本概念暂时不理解很正常，完全理解需要一个过程……接下来的几个例子会说明这些概念，希望可以对每一位学习Python的同学带来帮助！！  
 </p>
<h3 id="包含两个位置参数的函数print-str"><a href="#包含两个位置参数的函数print-str" class="headerlink" title="包含两个位置参数的函数print_str"></a>包含两个位置参数的函数print_str</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_str</span>(<span class="params">first, second</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(first)</span><br><span class="line">    <span class="built_in">print</span>(second)</span><br></pre></td></tr></table></figure>

<p>只传1个参数调用print_str() 函数，会发生什么呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print_str(&quot;hello&quot;)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">TypeError: print_str() takes exactly <span class="number">2</span> arguments (<span class="number">1</span> given)</span><br></pre></td></tr></table></figure>

<p>TypeError：解释器在控制台告知print_str（）函数需要2个参数，而你只为print_str（）函数传入了1个参数！</p>
<p>思考：怎么修改print_str（）函数为即可接受一个参数、也可接受两个参数、甚者接受数量不定的更多参数呢？</p>
<h3 id="修改print-str（）函数可接受一个参数、也可接受数量不定的参数"><a href="#修改print-str（）函数可接受一个参数、也可接受数量不定的参数" class="headerlink" title="修改print_str（）函数可接受一个参数、也可接受数量不定的参数"></a>修改print_str（）函数可接受一个参数、也可接受数量不定的参数</h3><p>将print_str（）函数的最后一个参数修改为可变参数*second</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_str</span>(<span class="params">first, *second</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(first)</span><br><span class="line">    <span class="built_in">print</span>(second)</span><br></pre></td></tr></table></figure>

<p>此时我们再传一个参数调用print_str（）函数，看看这次发生什么？</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">print_str(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">()</span><br></pre></td></tr></table></figure>

<p>这次不再报错，传入的第一个字符串参数”hello”打印出来了，没有传入参数的*second则打印的是一个tuple对象的字符串表示形式，即一个括号”()”  。 注意:（）表示含有0个元素的tuple对象！</p>
<p>思考：为什么second变量变成一个tuple对象了？我们继续向下学习！</p>
<h3 id="再做一个实验，为print-str（）函数传入四个参数…会发生什么？"><a href="#再做一个实验，为print-str（）函数传入四个参数…会发生什么？" class="headerlink" title="再做一个实验，为print_str（）函数传入四个参数…会发生什么？"></a>再做一个实验，为print_str（）函数传入四个参数…会发生什么？</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">print_str(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;美女&quot;</span>,<span class="string">&quot;小猫&quot;</span>,<span class="string">&quot;青蛙&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">(&#39;美女&#39;, &#39;小猫&#39;, &#39;青蛙&#39;)</span><br></pre></td></tr></table></figure>

<p>第一个参数“hello”，正常打印在第一行……</p>
<p>第二个参数”美女”，第三个参数“小猫”，第四个参数“青蛙”在函数的内部被组装进1个新的tuple对象中，而这个新的tuple对象会赋值给变量second，此时局部变量second指向了一个tuple对象</p>
<p>说明：函数调用时传入的参数，会按照从左到右的顺序依次在函数中使用，最左侧的参数先由位置参数first使用（匹配），剩下的所有未匹配的参数会被自动收集到1个新的tuple对象中，而局部变量second会指向这个新的tuple对象</p>
<p><code>注意：*参数只收集未匹配的位置参数</code></p>
<h3 id="调用print-str（）函数时，直接传入一个-参数会发生什么？"><a href="#调用print-str（）函数时，直接传入一个-参数会发生什么？" class="headerlink" title="调用print_str（）函数时，直接传入一个 *参数会发生什么？"></a>调用print_str（）函数时，直接传入一个 *参数会发生什么？</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numbers_strings = (<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_str</span>(<span class="params">first, *second</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(first)</span><br><span class="line">    <span class="built_in">print</span>(second)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    print_str(*numbers_strings) </span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">(&#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;)</span><br></pre></td></tr></table></figure>

<p>说明：*numbers_strings出现在函数调用时，称为解包（一个“*”字符后面紧挨着1个tuple对象），numbers_strings自身是一个tuple对象，所以也称为元组的解包，tuple中的元素解包成一个一个的位置参数传入到函数中，所以才有下面两个语句的相等性！</p>
<p>print_str(*numbers_strings) </p>
<p>等同于</p>
<p>print_str(“1”,”2”,”3”,”4”,”5”)  </p>
<h3 id="未定义可变参数的函数被调用时，传入-参数会发生什么呢？"><a href="#未定义可变参数的函数被调用时，传入-参数会发生什么呢？" class="headerlink" title="未定义可变参数的函数被调用时，传入*参数会发生什么呢？"></a>未定义可变参数的函数被调用时，传入*参数会发生什么呢？</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numbers_strings = (<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_str</span>(<span class="params">first, second</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(first)    </span><br><span class="line">    <span class="built_in">print</span>(second)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    print_str(*numbers_strings)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p>print_str(*numbers_string)</p>
<p>等同于</p>
<p>print_str(“1”,”2”)</p>
<p>元组解包的过程中会将每一个元素依次放入到位置参数，这说明元组的解包功能的如下特点：</p>
<p>1、可以在可变参数中使用</p>
<p>2、也可以在未定义可变参数的函数上使用</p>
<p>元组解包功能是完全独立的一个功能</p>
<p>再次说明：*参数，出现在函数的不同的位置上时，具备不同的功能</p>
<p>1、当*参数出现在函数定义时，表示可变参数</p>
<p>2、当*参数出现在函数调用时，则表示解包功能</p>
<p>注意：解包tuple的时候，tuple的元素数量要与函数的位置参数总数一致</p>
<p>………………华丽丽分割线，接下来我们再学学**kwargs………………</p>
<h3 id="函数定义中，参数名称前有两个"><a href="#函数定义中，参数名称前有两个" class="headerlink" title="函数定义中，参数名称前有两个**"></a>函数定义中，参数名称前有两个**</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printStr</span>(<span class="params">**anything</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(anything)</span><br></pre></td></tr></table></figure>

<p>传入两个关键字参数调用printStr函数，看看发生什么？</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">printStr(first = <span class="number">5</span>, second = <span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;second&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;first&#x27;</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果为dict对象的字符串形式，为什么anything成为dict了？</p>
<p><code>说明：函数调用时，传入的关键字参数有匹配的位置参数时，则位置参数优先使用（匹配）这些关键字参数，剩余所有未使用（未匹配）的关键字参数会在函数内组装进一个dict对象中，组装后dict对象会赋值给变量名anything，此时局部变量anything指向一个dict对象</code></p>
<p><code>注意：**参数只收集未匹配的关键字参数</code></p>
<h3 id="函数调用时使用字典解包功能（dict对象前加-）"><a href="#函数调用时使用字典解包功能（dict对象前加-）" class="headerlink" title="函数调用时使用字典解包功能（dict对象前加**）"></a>函数调用时使用字典解包功能（dict对象前加**）</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printStr</span>(<span class="params">first, **<span class="built_in">dict</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(first) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dict</span>)</span><br><span class="line">    printDic = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;tyson&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="string">&quot;99&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">printStr(<span class="number">100</span>, **printDic)</span><br><span class="line"><span class="comment">#等同于</span></span><br><span class="line">printStr(<span class="number">100</span>, name = <span class="string">&quot;tyson&quot;</span>, age = <span class="string">&quot;99&quot;</span>) </span><br></pre></td></tr></table></figure>

<p>说明：函数调用时，在一个dict对象的前面，添加**，表示字典的解包，它会把dict对象中的每个键值对元素，依次转换为一个一个的关键字参数传入到函数中</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Python语法中，当*参数和**参数同时出现在函数定义的参数列表中时，说明参数列表可接受任意数量的参数，它们都统称为可变参数</p>
<p><strong>函数定义时</strong></p>
<p>1、*args表示可接受任意个（包含0个）位置参数，当函数调用时，所有未使用（未匹配）的位置参数会在函数内自动组装进一个tuple对象中，此tuple对象会赋值给局部变量args</p>
<p>2、**kwargs表示可接受任意个（包含0个）关键字参数，当函数调用时，所有未使用（未匹配）的关键字参数会在函数内组装进一个dict对象中，此dict对象会赋值给局部变量kwargs</p>
<p>注意：函数定义时，二者同时存在，一定需要将*args放在**kwargs之前</p>
<p>注意：函数定义时，二者同时存在，一定需要将*args放在**kwargs之前</p>
<p>注意：函数定义时，二者同时存在，一定需要将*args放在**kwargs之前</p>
<p>（重要的事情说三遍）</p>
<p><strong>函数调用时</strong></p>
<p>1、*args表示解包元组对象中的每个元素作为位置参数传入到被调用函数中</p>
<p>2、**kwargs表示解包字典对象中的每个元素作为关键字参数传入到被调用函数中</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1、可变参数，可以传数量不定的多个参数，包括0个参数</p>
<p>2、可变参数，必须定义在普通参数（也称位置参数、必选参数、选中参数等名称）以及默认值参数的后面，这是因为可变参数会收集所有【未匹配】的参数，如果将可变参数定义在前面，那么普通参数与默认值参数就无法匹配到传入的参数，因为全都收集到可变参数中了</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printStr</span>(<span class="params">普通参数，默认值参数name=<span class="string">&quot;王员外&quot;</span>,*参数，**参数</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>3、*参数必须定义在**参数的前面</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printStr</span>(<span class="params">普通参数，*参数，**参数</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>4、调用包含*args参数的函数时，不要直接传入一个tuple对象，如果传入的是一个tuple对象，那么这个tuple对象只会成为未匹配的，函数内组装的tuple对象中一个元素而已。我们可以将tuple对象的元素使用元组解包语法传入，解包语法：*tuple</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">temp = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_first</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line">my_first(temp)  <span class="comment">#temp只算一个参数，除非你有这个需求</span></span><br><span class="line">my_first(*temp) <span class="comment">#OK</span></span><br></pre></td></tr></table></figure>

<p>5、调用包含**kwargs参数的函数时，不要直接传入一个字典对象，一个字典对象只算一个参数，此时会报错，因为一个dict对象不符合关键字参数的语法规范，字典对象可以使用字典解包语法，解包语法： **dict</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_book = &#123;<span class="string">&quot;first&quot;</span>:<span class="string">&quot;小当家&quot;</span>, <span class="string">&quot;seoncd&quot;</span>: <span class="string">&quot;我是baby&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_blood</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line">my_blood(my_book)   <span class="comment">#作为一个字典对象传入</span></span><br><span class="line">my_blood(**my_book) <span class="comment">#一个一个的关键字参数传入</span></span><br></pre></td></tr></table></figure>

<p>6、*参数的变量名，一般使用变量名args，只是建议，你想叫啥名都行，它只是局部变量名</p>
<p>7、**参数的变量名，一般使用变量名kwargs，只是建议，你想叫啥名都行，它也是个局部变量名</p>
<h3 id="一个包含位置参数、默认值参数，可变参数的函数（供参考）"><a href="#一个包含位置参数、默认值参数，可变参数的函数（供参考）" class="headerlink" title="一个包含位置参数、默认值参数，可变参数的函数（供参考）"></a>一个包含位置参数、默认值参数，可变参数的函数（供参考）</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_first_blood</span>(<span class="params">first_name,last_name,age=<span class="number">0</span>,*args,**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(first_name)</span><br><span class="line">    <span class="built_in">print</span>(last_name)</span><br><span class="line">    <span class="built_in">print</span>(age)</span><br><span class="line">    <span class="keyword">for</span> ele <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span>(ele)</span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        <span class="built_in">print</span>(key)</span><br><span class="line">        <span class="built_in">print</span>(value) </span><br></pre></td></tr></table></figure>

<p>调用方式：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_first_blood(<span class="string">&quot;王&quot;</span>,<span class="string">&quot;员外&quot;</span>)</span><br><span class="line"> </span><br><span class="line">my_first_blood(<span class="string">&quot;王&quot;</span>,<span class="string">&quot;员外&quot;</span>, <span class="number">32</span>)</span><br><span class="line"> </span><br><span class="line">my_first_blood(<span class="string">&quot;王&quot;</span>,<span class="string">&quot;员外&quot;</span>, <span class="number">32</span>, <span class="string">&quot;北京&quot;</span>, <span class="string">&quot;海淀&quot;</span>, style=<span class="string">&quot;开心&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="一个仅传入关键字参数，导致报错的函数"><a href="#一个仅传入关键字参数，导致报错的函数" class="headerlink" title="一个仅传入关键字参数，导致报错的函数"></a>一个仅传入关键字参数，导致报错的函数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">temp</span>(<span class="params">say, **kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(say)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"> </span><br><span class="line">temp(fk=<span class="number">100</span>, hello=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<p>由于位置参数say，与传入的关键字参数fk和hello均不能匹配，所以此调用会导致报错。关键字参数必须得与位置参数的名称相匹配时，才能被位置参数使用</p>
<h3 id="解包功能不只是tuple、还有list、str、range"><a href="#解包功能不只是tuple、还有list、str、range" class="headerlink" title="解包功能不只是tuple、还有list、str、range"></a>解包功能不只是tuple、还有list、str、range</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">first = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line">second = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"> </span><br><span class="line">third = <span class="string">&quot;123&quot;</span></span><br><span class="line"> </span><br><span class="line">fourth = <span class="built_in">range</span>(<span class="number">4</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(*first)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(*second)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(*third)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(*fourth)</span><br></pre></td></tr></table></figure>

<p>只要是序列类型，可迭代对象，都可以使用解包功能哦</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>django笔记 - 虚拟环境</title>
    <url>/2019/01/09/django%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h1><p>以下命令均在win10的cmd中执行</p>
<h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install virtualenv  <span class="comment">#virtual environment</span></span><br></pre></td></tr></table></figure>

<h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virtualenv abc-env   <span class="comment">#在当前目录位置，创建名为abc-env的虚拟环境</span></span><br></pre></td></tr></table></figure>

<h3 id="进入虚拟环境（Windows）"><a href="#进入虚拟环境（Windows）" class="headerlink" title="进入虚拟环境（Windows）"></a>进入虚拟环境（Windows）</h3><p>进入<code>Scripts</code>文件夹，如<code>\abc-env\Scripts</code>，然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">activate</span><br></pre></td></tr></table></figure>

<h3 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<h3 id="创建时指定Python解释器"><a href="#创建时指定Python解释器" class="headerlink" title="创建时指定Python解释器"></a>创建时指定<code>Python</code>解释器</h3><p>一般不用，如果装了多个，<code>-p</code>参数指定具体的<code>Python</code>解释器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virtualenv -p C:\Python36\python.exe [virtualenv name]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h2><p>//wrapper 包装材料，包装纸</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>可以直接安装这个，会自动安装virtualenv</p>
<ol>
<li>Windows：<code>pip install virtualenvwrapper-win</code></li>
<li>Linux： <code>pip install virtualenvwrapper</code></li>
</ol>
<h3 id="创建虚拟环境-1"><a href="#创建虚拟环境-1" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkvirtualenv my_env   <span class="comment">#创建名为`my_env`的虚拟环境</span></span><br></pre></td></tr></table></figure>

<p>会在当前用户下创建一个Env的文件夹，将虚拟环境安装到这个目录下</p>
<h3 id="切换到某个虚拟环境"><a href="#切换到某个虚拟环境" class="headerlink" title="切换到某个虚拟环境"></a>切换到某个虚拟环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workon my_env</span><br></pre></td></tr></table></figure>

<h3 id="退出当前虚拟环境"><a href="#退出当前虚拟环境" class="headerlink" title="退出当前虚拟环境"></a>退出当前虚拟环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<h3 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rmvirtualenv my_env</span><br></pre></td></tr></table></figure>

<h3 id="列出所有虚拟环境"><a href="#列出所有虚拟环境" class="headerlink" title="列出所有虚拟环境"></a>列出所有虚拟环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsvirtualenv</span><br></pre></td></tr></table></figure>

<h3 id="进入当前虚拟环境所在的目录"><a href="#进入当前虚拟环境所在的目录" class="headerlink" title="进入当前虚拟环境所在的目录"></a>进入当前虚拟环境所在的目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cdvirtualenv</span><br></pre></td></tr></table></figure>

<h3 id="修改mkvirtualenv的默认路径"><a href="#修改mkvirtualenv的默认路径" class="headerlink" title="修改mkvirtualenv的默认路径"></a>修改<code>mkvirtualenv</code>的默认路径</h3><p>在<code>环境变量-&gt;系统变量</code>中，新建一个变量，变量名为<code>WORKON_HOME</code>，变量值为目标路径，我用了<code>E:\Projects\Envs</code></p>
<h3 id="创建时指定Python版本"><a href="#创建时指定Python版本" class="headerlink" title="创建时指定Python版本"></a>创建时指定Python版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkvirtualenv  --python==C:\Python36\python.exe hy_env</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django笔记01 - 新建项目</title>
    <url>/2019/01/10/django%E7%AC%94%E8%AE%B001/</url>
    <content><![CDATA[<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><ol>
<li>创建项目：<code>django-admin startproject [项目名称]</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">django startproject first_project</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建应用：在项目根目录，<code>python manage.py startapp [项目名称]</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py startapp first_app</span><br></pre></td></tr></table></figure>

<h2 id="pycharm专业版"><a href="#pycharm专业版" class="headerlink" title="pycharm专业版"></a>pycharm专业版</h2><p><strong>注</strong>：配置单例运行，防止无意中运行多个，造成新代码不生效<br>我选择vscode，没用pycharm</p>
<h1 id="运行项目（命令行）"><a href="#运行项目（命令行）" class="headerlink" title="运行项目（命令行）"></a>运行项目（命令行）</h1><p>在项目根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

<p>指定端口，如9000</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver 9000  </span><br></pre></td></tr></table></figure>

<h2 id="局域网访问"><a href="#局域网访问" class="headerlink" title="局域网访问"></a>局域网访问</h2><p>让局域网其它设备可以访问到</p>
<ol>
<li>运行IP为<code>0.0.0.0:[端口号]</code>，端口号要有</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver 0.0.0.0:8000  </span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>settings.py</code>文件中<code>ALLOWED_HOSTS</code>加入运行项目的本机IP，如<code>ALLOWED_HOSTS = [192.168.1.102]</code></li>
</ol>
<p><strong>注</strong>：仍然访问不到的话，检查防火墙</p>
<h1 id="settings-py文件中"><a href="#settings-py文件中" class="headerlink" title="settings.py文件中"></a>settings.py文件中</h1><p><code>DEBUG = False</code>后，，只能通过<code>ALLOWED_HOSTS = []</code>中的IP地址或者域名来进行访问</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django笔记02 - 视图和url</title>
    <url>/2019/01/10/django%E7%AC%94%E8%AE%B002/</url>
    <content><![CDATA[<h1 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h1><ol>
<li>第一个参数必须是request</li>
<li>返回值必须是<code>django.http.response.HttpResponseBase</code>的子类的对象</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">book</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;图书首页&#x27;</span>)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h1><p><code>settings.py</code>文件中配置了<code>ROOT_URLCONF</code>为<code>urls.py</code>，所以会在这个文件中寻找映射<br>路径和视图函数对应</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> book <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;book/&#x27;</span>, views.book),</span><br><span class="line">    <span class="comment"># /book/detail/1/</span></span><br><span class="line">    path(<span class="string">&#x27;book/detail/&lt;book_id&gt;/&lt;category_id&gt;/&#x27;</span>, views.book_detail),</span><br><span class="line">    path(<span class="string">&#x27;book/author/&#x27;</span>, views.author_detail)，</span><br><span class="line">    path(<span class="string">&#x27;book/publisher/&lt;int:publisher_id&gt;/&#x27;</span>, views.publisher_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="url传递参数"><a href="#url传递参数" class="headerlink" title="url传递参数"></a>url传递参数</h2><ol>
<li><code>urls.py</code>文件，<code>&lt;参数名&gt;</code>传递，默认使用<code>str</code>转换器，如<code>&lt;int:publisher_id&gt;</code>。视图函数中，参数名要和它一致</li>
<li>查询字符串的方式，访问浏览器时参数如<code>?id=2</code>，<code>http://127.0.0.1:8000/book/author/?id=2</code></li>
<li>转换器：<code>int</code>,<code>path</code>,<code>slug</code>,<code>str</code>,<code>uuid</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">author_detail</span>(<span class="params">request</span>):</span></span><br><span class="line">    author_id = request.GET.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="comment">#author_id = request.GET[&#x27;id&#x27;]   #这种写法也可以，GET类似字典，获取值方式与字典相同</span></span><br><span class="line">    text = <span class="string">&#x27;作者的id是：%s&#x27;</span> % author_id</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(text)</span><br></pre></td></tr></table></figure>

<h3 id="url映射时指定默认参数"><a href="#url映射时指定默认参数" class="headerlink" title="url映射时指定默认参数"></a>url映射时指定默认参数</h3><p><code>views.py</code>中，可以给函数指定默认参数，<code>url</code>中没有传递的话，使用默认参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">books</span>(<span class="params">request, page=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(book_list[page])</span><br></pre></td></tr></table></figure>

<h3 id="url参数内置的转换器"><a href="#url参数内置的转换器" class="headerlink" title="url参数内置的转换器"></a>url参数内置的转换器</h3><ol>
<li>str：除了<code>/</code>以外的所有字符</li>
<li>int：一个或多个数字</li>
<li>path：所有字符</li>
<li>uuid：只有满足<code>uuid.uuid4()</code>函数返回的字符串格式</li>
<li>slug：<code>-</code>，<code>_</code>，英文字母，数字任意组合</li>
</ol>
<h3 id="自定义url-path-转换器"><a href="#自定义url-path-转换器" class="headerlink" title="自定义url(path)转换器"></a>自定义url(path)转换器</h3><ol>
<li>定义一个类，直接继承自object就可以了</li>
<li>在类中定义一个属性regex，这个属性是用来保存url转换器规则的正则表达式</li>
<li>实现to_python(self, value)方法，作用是将url中的值转换一下，然后传给视图函数</li>
<li>实现to_url(self, value)方法，作用是在做url反转时，将传进来的参数转换后拼接成一个正确的url</li>
<li>将定义好的转换器，使用<code>django.urls.converters.register_converter</code>方法注册到django中</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> converters, register_converter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryConverter</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    regex = <span class="string">r&#x27;\w+|(\w+\+\w+)+&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="comment"># python+django+flask</span></span><br><span class="line">        <span class="comment"># [&#x27;python&#x27;, &#x27;django&#x27;, &#x27;flask&#x27;]</span></span><br><span class="line">        result = value.split(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span>(<span class="params">self,value</span>):</span></span><br><span class="line">        <span class="comment"># value: [&#x27;python&#x27;, &#x27;django&#x27;, &#x27;flask&#x27;]</span></span><br><span class="line">        <span class="comment"># python+django+flask</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">list</span>):</span><br><span class="line">            result = <span class="string">&#x27;+&#x27;</span>.join(value)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;转换url时，分类参数必须为列表&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册</span></span><br><span class="line">register_converter(CategoryConverter, <span class="string">&#x27;cate&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：可以将以上代码单独存为<code>converters.py</code>文件，在<code>__init__.py</code>中导入，<code>from . import converters</code>，自动执行</p>
<h2 id="urls模块化"><a href="#urls模块化" class="headerlink" title="urls模块化"></a>urls模块化</h2><ol>
<li>主url对app的url引用，将url进行拼接，注意<code>/</code>，只写在末尾</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主url</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;book/&#x27;</span>,include(<span class="string">&#x27;book.urls&#x27;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>app中的url单独放在自己的<code>urls.py</code>文件中，如下面名为的<code>book</code>的app</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#app的url</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment">#book/</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.book),</span><br><span class="line">    path(<span class="string">&#x27;detail/&lt;book_id&gt;/&#x27;</span>, views.book_detail),</span><br><span class="line">    path(<span class="string">&#x27;list/&#x27;</span>,views.book_list),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="url命名"><a href="#url命名" class="headerlink" title="url命名"></a>url命名</h2><p>url经常变换，取个名字，调用时用<code>reverse(&#39;name&#39;)</code>进行反转，方便调用修改等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, views.login, name= <span class="string">&#x27;login&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="应用（app）命名空间"><a href="#应用（app）命名空间" class="headerlink" title="应用（app）命名空间"></a>应用（app）命名空间</h3><p>多个app中，有可能出现同名的url，避免混淆，使用应用命名空间。<br>在<code>app</code>的<code>urls.py</code>中，定义一个叫<code>app_name</code>的变量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&#x27;front&#x27;</span>   <span class="comment">#命名空间</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, views.login, name= <span class="string">&#x27;login&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>反转时使用<code>应用命名空间:url名称</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">login_url = reverse(<span class="string">&#x27;front:login&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="实例命名空间"><a href="#实例命名空间" class="headerlink" title="实例命名空间"></a>实例命名空间</h3><p>一个app，可以创建多个实例，可以用多个url映射同一个app。为了避免在url反转时发生混淆，使用实例命名空间。<br>在项目根目录的<code>urls.py</code>文件中，在<code>include</code>函数中传递一个<code>namespace</code>变量即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;front.urls&#x27;</span>)),</span><br><span class="line">    <span class="comment">#同一个app下有两个实例</span></span><br><span class="line">    path(<span class="string">&#x27;cms1/&#x27;</span>, include(<span class="string">&#x27;cms.urls&#x27;</span>,namespace=<span class="string">&#x27;cms1&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;cms2/&#x27;</span>, include(<span class="string">&#x27;cms.urls&#x27;</span>,namespace=<span class="string">&#x27;cms2&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在url反转时，根据实例命名空间来指定具体的url。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    username = request.GET.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;CMS首页&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        current_namespace = request.resolver_match.namespace   <span class="comment">#获得当前实例命名空间</span></span><br><span class="line">        <span class="keyword">return</span> redirect(reverse(<span class="string">&#x27;%s:login&#x27;</span>%current_namespace))</span><br></pre></td></tr></table></figure>

<h2 id="include函数"><a href="#include函数" class="headerlink" title="include函数"></a>include函数</h2><p>根目录<code>urls.py</code>中，<code>path()</code>中</p>
<ol>
<li><code>include(module, namespace=None)</code></li>
</ol>
<ul>
<li><p><code>module</code>：子url的模块字符串</p>
</li>
<li><p><code>namespace</code>：实例命名空间，需先指定应用命名空间。即在子<code>urls.py</code>中添加<code>app_name</code>变量</p>
<p>  <code>path(&#39;cms1/&#39;, include(&#39;cms.urls&#39;,namespace=&#39;cms1&#39;))</code></p>
</li>
</ul>
<ol start="2">
<li><p><code>include((pattern_list, app_namespace), namespace=None)</code></p>
<p> 元组（tuple）第一个参数是<code>urls.py</code>模块字符串，第二个参数是应用命名空间。<br> 应用命名空间，可以在子<code>urls.py</code>中通过<code>app_name</code>指定，也可以在<code>include</code>函数中指定。</p>
<p> <code>path(&#39;book/&#39;, include((&#39;book.urls&#39;, &#39;book&#39;), namespace=&#39;book&#39;))</code></p>
</li>
<li><p><code>include(pattern_list)</code></p>
<p> <code>pattern_list</code>是一个列表，元素为<code>path</code>或<code>re_path</code></p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;movie/&#x27;</span>, include([</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.movie),</span><br><span class="line">    path(<span class="string">&#x27;list/&#x27;</span>, views.movie_list),</span><br><span class="line">]))</span><br></pre></td></tr></table></figure>

<h2 id="re-path"><a href="#re-path" class="headerlink" title="re_path"></a>re_path</h2><ol>
<li>推荐使用原生字符串，即<code>r</code>开头的字符串</li>
<li>定义的变量，需要用<code>()</code>括起来，<code>?P&lt;参数的名字&gt;</code>，后面添加正则表达式规则</li>
<li>优先用<code>path</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">&#x27;^$&#x27;</span>, views.article),</span><br><span class="line">    <span class="comment"># /article/list/&lt;year&gt;/</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^list/(?P&lt;year&gt;\d&#123;4&#125;)/$&#x27;</span>, views.article_list),</span><br><span class="line">    re_path(<span class="string">r&#x27;^list/(?P&lt;month&gt;\d&#123;2&#125;)/$&#x27;</span>, views.article_list_month),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><ol>
<li>反转url时，如果需要添加参数，使用<code>kwargs</code>参数传递</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect, reverse</span><br><span class="line"></span><br><span class="line">detail_url = reverse(<span class="string">&#x27;detail&#x27;</span>, kwargs=&#123;<span class="string">&#x27;article_id&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;page&#x27;</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>如果添加查询字符串的参数，必须手动进行拼接</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">login_url = reverse(<span class="string">&#x27;login&#x27;</span>) + <span class="string">&#x27;?next=/&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django笔记05 - 视图高级</title>
    <url>/2019/03/03/django%E7%AC%94%E8%AE%B005/</url>
    <content><![CDATA[<h1 id="Django限制请求method"><a href="#Django限制请求method" class="headerlink" title="Django限制请求method"></a>Django限制请求method</h1><h2 id="常用的请求method："><a href="#常用的请求method：" class="headerlink" title="常用的请求method："></a>常用的请求method：</h2><ol>
<li>GET请求：GET请求一般用来向服务器索取数据，但不会向服务器提交数据，不会对服务器的状态进行更改。比如向服务器获取某篇文章的详情。</li>
<li>POST请求：POST请求一般是用来向服务器提交数据，会对服务器的状态进行更改。比如提交一篇文章给服务器。</li>
</ol>
<span id="more"></span>

<h2 id="限制请求装饰器："><a href="#限制请求装饰器：" class="headerlink" title="限制请求装饰器："></a>限制请求装饰器：</h2><p>Django内置的视图装饰器可以给视图提供一些限制。比如这个视图只能通过GET的method访问等。以下将介绍一些常用的内置视图装饰器。</p>
<ol>
<li><code>django.http.decorators.http.require_http_methods</code>：这个装饰器需要传递一个允许访问的方法的列表。比如只能通过<code>GET</code>的方式访问。那么示例代码如下：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.http <span class="keyword">import</span> require_http_methods</span><br><span class="line"></span><br><span class="line"><span class="meta">@require_http_methods(<span class="params">[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>django.views.decorators.http.require_GET</code>：这个装饰器相当于是<code>require_http_methods([&#39;GET&#39;])</code>的简写形式，只允许使用<code>GET</code>的<code>method</code>来访问视图。示例代码如下：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.http <span class="keyword">import</span> require_GET</span><br><span class="line"></span><br><span class="line"><span class="meta">@require_GET</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>django.views.decorators.http.require_POST</code>：这个装饰器相当于是<code>require_http_methods([&#39;POST&#39;])</code>的简写形式，只允许使用POST的method来访问视图。示例代码如下：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.http <span class="keyword">import</span> require_POST</span><br><span class="line"></span><br><span class="line"><span class="meta">@require_POST</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><code>django.views.decorators.http.require_safe</code>：这个装饰器相当于是<code>require_http_methods([&#39;GET&#39;,&#39;HEAD&#39;])</code>的简写形式，只允许使用相对安全的方式来访问视图。因为GET和HEAD不会对服务器产生增删改的行为。因此是一种相对安全的请求方式。示例代码如下：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.http <span class="keyword">import</span> require_safe</span><br><span class="line"></span><br><span class="line"><span class="meta">@require_safe</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法笔记</title>
    <url>/2019/01/09/markdown%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>第一级标题，开头就是一个 #<br>第二级标题，开头就是两个 #<br>第三级标题，开头就是三个 #</p>
<p>注意：标题需要独自占据一行，并且在标题的文字和 # 之间需要有一个空格。<br>在标题的这一行，上下都需要一个空行分割</p>
<span id="more"></span>

<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><h2 id="单行引用"><a href="#单行引用" class="headerlink" title="单行引用"></a>单行引用</h2><blockquote>
<p>悲剧将人生的有价值的东西毁灭给人看，喜剧将那无价值的撕破给人看。——鲁迅。</p>
</blockquote>
<h2 id="多行引用"><a href="#多行引用" class="headerlink" title="多行引用"></a>多行引用</h2><blockquote>
<p>悲剧将人生的有价值的东西毁灭给人看，喜剧将那无价值的撕破给人看。<br>————鲁迅</p>
</blockquote>
<h1 id="代码标记"><a href="#代码标记" class="headerlink" title="代码标记"></a>代码标记</h1><h2 id="行内标记"><a href="#行内标记" class="headerlink" title="行内标记"></a>行内标记</h2><p>我要把这行里的<code>hello world</code>标记出来</p>
<h2 id="普通代码块标记"><a href="#普通代码块标记" class="headerlink" title="普通代码块标记"></a>普通代码块标记</h2><pre><code>var executeSync = function()&#123;
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === &#39;function&#39;)&#123;
        args[0].apply(null, args.splice(1));
    &#125;
&#125;;
</code></pre>
<h2 id="高亮代码块标记"><a href="#高亮代码块标记" class="headerlink" title="高亮代码块标记"></a>高亮代码块标记</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, path=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    self._path = path</span><br></pre></td></tr></table></figure>

<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ol>
<li>你拍一</li>
<li>我拍二</li>
<li>她拍三</li>
</ol>
<ul>
<li>你拍一</li>
<li>我拍二</li>
<li>她拍三</li>
</ul>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://11.tt/">这是一个链接</a></p>
<p><a href="https://11.tt/">这是一个链接</a></p>
<p><a href="#%E5%88%97%E8%A1%A8">链接列表</a></p>
<h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><p>![Markdown 创始人 John Gruber](John Gruber.jpg)</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>markdwon</tag>
      </tags>
  </entry>
  <entry>
    <title>snapseed动漫风调色</title>
    <url>/2022/11/02/snapseed%E5%8A%A8%E6%BC%AB%E9%A3%8E%E8%B0%83%E8%89%B2/</url>
    <content><![CDATA[<h1 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h1><ol>
<li>色块过度少，需要增加色彩纯度，提高饱和度来实现</li>
<li>明暗反差低，暗部有细节，高光柔和，营造朦胧感</li>
</ol>
<span id="more"></span>

<h1 id="调整"><a href="#调整" class="headerlink" title="调整"></a>调整</h1><ol>
<li>对比度降低：暗部亮，高光暗，更多的宽容度，增多细节</li>
<li>亮度提高：阳光充足，日系</li>
<li>饱和度增加：呈现大面积纯色色块</li>
<li>暗部提高：增加细节</li>
<li>氛围减少：高光柔和</li>
<li>阴影增加：提亮暗部，弥补3的氛围减少</li>
<li>高光增加：营造阳光充足场景</li>
<li>暖色调降低：蓝天更蓝，一片蓝色</li>
</ol>
<h1 id="突出细节"><a href="#突出细节" class="headerlink" title="突出细节"></a>突出细节</h1><ol>
<li>结构降低：画面细节减少，更像漫画</li>
<li>锐化增加：恢复部分，不然糊了</li>
</ol>
<h1 id="白平衡"><a href="#白平衡" class="headerlink" title="白平衡"></a>白平衡</h1><ol>
<li>色温增加：更黄，蓝色破坏少</li>
<li>着色减少：天空偏青</li>
</ol>
<h1 id="魅力光晕1"><a href="#魅力光晕1" class="headerlink" title="魅力光晕1"></a>魅力光晕1</h1><ol>
<li>画面柔和，增加蓝色</li>
<li>暖色调-99：</li>
<li>饱和度+100：</li>
<li>发光+65：</li>
<li>大楼有蒙版</li>
</ol>
<h1 id="魅力光晕2"><a href="#魅力光晕2" class="headerlink" title="魅力光晕2"></a>魅力光晕2</h1><ol>
<li>暖色调+100：</li>
<li>饱和度+20：</li>
<li>发光+57：</li>
</ol>
<h1 id="色调对比度"><a href="#色调对比度" class="headerlink" title="色调对比度"></a>色调对比度</h1><h1 id="复古"><a href="#复古" class="headerlink" title="复古"></a>复古</h1><h1 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a>曲线</h1>]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>七天带你玩转MySQL之SQL语句</title>
    <url>/2019/02/09/%E4%B8%83%E5%A4%A9%E5%B8%A6%E4%BD%A0%E7%8E%A9%E8%BD%ACMySQL%E4%B9%8BSQL%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> ....</span><br><span class="line"><span class="keyword">where</span> ...</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> ...</span><br><span class="line"><span class="keyword">having</span> ...</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> ...</span><br><span class="line">limit ...;</span><br></pre></td></tr></table></figure>

<p>执行顺序：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">from</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">where</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">select</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">having</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line"><span class="number">7</span> limit</span><br></pre></td></tr></table></figure>

<h1 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h1><p>MySql从5.7版本开始默认开启<code>only_full_group_by</code>规则，规则核心原则如下，没有遵循原则的sql会被认为是不合法的sql</p>
<ol>
<li><code>order by</code>后面的列必须是在<code>select</code>后面存在的</li>
<li><code>select</code>、<code>having</code>或<code>order by</code>后面存在的非聚合列必须全部在<code>group by</code>中存在</li>
</ol>
<h1 id="count-、count-1-、count-主键-、count-字段-的区别"><a href="#count-、count-1-、count-主键-、count-字段-的区别" class="headerlink" title="count(*)、count(1)、count(主键)、count(字段)的区别"></a>count(*)、count(1)、count(主键)、count(字段)的区别</h1><p>以下，基于 InnoDB</p>
<h2 id="含义区别"><a href="#含义区别" class="headerlink" title="含义区别"></a>含义区别</h2><p>count()是一个聚合函数，对于返回的结果集，会逐行判断，若返回的不是 NULL，就会加 1，否则不加。<br>因此，count(*)、count(主键 id)和count(1)都表示返回满足条件的结果集的总行数；而count(字段），则表示返回满足条件的数据行里面，参数“字段”不为 NULL 的总个数。</p>
<h2 id="性能区别"><a href="#性能区别" class="headerlink" title="性能区别"></a>性能区别</h2><p>分析性能，考虑以下几个原则：</p>
<ol>
<li>server 层要什么就会返回什么；</li>
<li>InnoDB 只返回必要的值；</li>
<li>优化器只优化了count(*)</li>
</ol>
<ul>
<li>对于count(主键id)，InnoDB 会遍历全表，取每行的主键 id，返回给 server 层，server 层拿到数据后，进行判断累加。</li>
<li>对于count(1)，InnoDB 仍遍历全表，但是不取值，server 层对返回的每一行数据新增一个 1，然后进行判断累加；<br>因此，count(1)要更快些，因为无需取值。从引擎返回 id 会涉及到解析数据行，以及拷贝字段值的操作。</li>
<li>对于count(字段)：</li>
</ul>
<ol>
<li>如果这个“字段”是定义为 not null 的话，一行行地从记录里面读出这个字段，判断不能为 null，按行累加；</li>
<li>如果这个“字段”定义允许为 null，那么执行的时候，判断到有可能是null，还要把值取出来再判断一下，不是 null 才累加。</li>
</ol>
<ul>
<li>但是<code>count(*)</code>是例外，并不会把全部字段取出来，而是专门做了优化，不取值。<code>count(*)</code>肯定不是<code>null</code>，按行累加。</li>
</ul>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>按照效率排序的话</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">count(字段) &lt; count(主键 id) &lt; count(1) ≈ count(*)</span><br></pre></td></tr></table></figure>

<p>所以我建议你，尽量使用<code>count(*)</code></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>三月下起了大雨</title>
    <url>/2021/07/27/%E4%B8%89%E6%9C%88%E4%B8%8B%E8%B5%B7%E4%BA%86%E5%A4%A7%E9%9B%A8/</url>
    <content><![CDATA[<ol>
<li><p>三月下起了大雨，四月里遍地蔷薇，五月我们面对坐着，犹如在梦中，就这样六月到了</p>
</li>
<li><p>归根到底是我错把你对我的好当做只给我一人的温柔，你负了我，你永远记得</p>
</li>
<li><p>爱的反面不是恨，而是冷漠。从来哭着闹着要走的人，都不是真正会离开的人。真正想要离开的那个人，挑一个风和日丽的下午，穿上一件大衣出门，消失在秋日的阳光里，再也没有回来</p>
</li>
</ol>
<span id="more"></span>

<ol start="4">
<li><p>当你遇上一个特别的人，却清醒明白永远不可能在一起，或迟或早，你不得不放弃。有些爱只能止于唇齿，掩于岁月</p>
</li>
<li><p>每一次去爱的时候，都请记得，你在第一次爱时拥有过的，像新生婴儿面对世界一样的好奇和感动；也请记得，你曾经如那蹒跚学步小孩一样的，对摔倒和受伤的不屑一顾</p>
</li>
<li><p>某天，你无端端想起一个人，她曾让你对明天有所期许，但她却完完全全没有出现在你的明天里。而青春的残酷就在于，我们拥有最好的爱，也遇见了最好的人，但是这些感情通常都没有任何结果，当它陨落消散的时候，甚至我们都来不及问一句为什么</p>
</li>
<li><p>想和你吃饭的人，酸甜苦辣都爱吃；想送你回家的人，东南西北都顺路</p>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>偷影子的人</title>
    <url>/2021/07/27/%E5%81%B7%E5%BD%B1%E5%AD%90%E7%9A%84%E4%BA%BA/</url>
    <content><![CDATA[<ol>
<li><p>一段美丽的邂逅，有时是时间的问题，两个人得在对的时间遇到对方</p>
</li>
<li><p>一部分的自我遗落在离开的人身上，就像爱情的忧愁，这是友谊的愁绪</p>
</li>
<li><p>这整整两个月，我们称为“夏天”，而这也是四季中最美的季节</p>
</li>
</ol>
<span id="more"></span>

<ol start="4">
<li><p>你偷走了我的影子，不论你在哪里，我都会一直想着你</p>
</li>
<li><p>年轻人，规则，是用来让你们学会经验而不至于误杀死太多病人，而经验值则是让你们拿来打破规则的</p>
</li>
<li><p>我只是你生活里的一个影子，你却在我的生命里占有重要地位。如果我只是个单纯的过客，为何要让我闯入你的生活？我千百次想过要离开你，但仅凭一己之力我做不到</p>
</li>
<li><p>一个会用风筝向你写出“我想你”的女孩啊，真让人永远都忘不了她</p>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>告白与告别</title>
    <url>/2021/08/02/%E5%91%8A%E7%99%BD%E4%B8%8E%E5%91%8A%E5%88%AB/</url>
    <content><![CDATA[<ol>
<li><p>因为你没有证明自己的胆量，你就不要去怪别人异样的眼光</p>
</li>
<li><p>人可以不上学，但一定要学习</p>
</li>
<li><p>反正常常是这样，你其实已经在第一把触摸到几乎最好的东西了，但因为它来的太早，所以你还在不断找寻，总觉得自己不应该这么轻易得到</p>
</li>
</ol>
<span id="more"></span>

<ol start="4">
<li><p>很多人都是在自认为骑着驴找马的过程中把自己胯下那匹真正的好马放走了。对于那些骑马找马的人，只能说，珍惜“裆”下</p>
</li>
<li><p>从小到大的很多经历告诉我，这个世界上，除了自己，除了至亲，没有人在乎你的痛苦。你能让大家高兴就行了，或者无感地存在也是个好方式。但你如果太在意自己的痛苦，或者太想让他人在意你的痛苦，真会让自己陷入被忽略的痛苦，甚至是表演痛苦的痛苦</p>
</li>
<li><p>这个世界上永远没有百分之一百准备好的事情，最充分的准备往往意味着你错过了一切</p>
</li>
<li><p>与其让别人来做砸了，不如自己来，好歹砸也是砸在自己手里</p>
</li>
<li><p>人生特别有限，老在回头看自己做过的东西，我会觉得无意义，虚度光阴</p>
</li>
<li><p>到后来我就不想在继续下去了，我往往在做事情的时候兴高采烈，但在这个过程中热情也就随之过去了，对我来讲已经完成了</p>
</li>
<li><p>像这样的处理方式，很容易跟别人产生创作分歧，跟别人阐述自己想法的时间，不如自己写</p>
</li>
<li><p>我总希望，作为朋友，当我找你的时候，大家都能够因此而得到快乐，以及好处吧</p>
</li>
<li><p>我觉得真正的地位是无须靠你站的位置来获得的，而你越在乎这些，也就说明你还没在那个地位上</p>
</li>
<li><p>创作就是要在绝对谦逊地学习聆听磨炼之后实施绝对的独裁</p>
</li>
<li><p>人都有不痛快的时候，但绝对不能放在表面上，因为这绝对不是你真性情的表现，而是一种不负责任的表现</p>
</li>
<li><p>适当的妥协不是委屈自己或者所谓怂，而是使事情更容易接近你的目标</p>
</li>
<li><p>人要通过很多努力，让自己更加厉害，比起那些用大嗓门企图压制世界的人，让全世界都安静下来听你小声说话的人更可畏</p>
</li>
<li><p>我在赛车之前，遇到的是不理解和嘲笑，现在我是七届总冠军。但我在游泳之前，我遇到的是支持和吹捧，但我依然游不好。别人的眼光不重要，你把事情做成什么样子才重要</p>
</li>
<li><p>所以，作品好，这些都是特点；作品不好，这些都是缺点，反正就是这么现实</p>
</li>
<li><p>不会有人喜欢倾听你的痛苦，说给朋友，朋友不好受；说给敌人，敌人更开心</p>
</li>
<li><p>人的一生会看到许多风景，如果你被困在一个风景里，就看很难看到下一个风景</p>
</li>
<li><p>有多少人听过很多道理，却依然过不好这一生</p>
</li>
<li><p>这是他希望成为，却又永远无法成为的人</p>
</li>
<li><p>相逢有时，后会无期</p>
</li>
<li><p>洞穴人始终被束缚住手脚，终日只能观看眼前人造的稀薄虚假影像度日，他们安分守己，以为这就是世界。而终于有一个年轻人决定挣脱枷锁，出去走一走，看见了真实世界，他欢呼着把这个信息带给伙伴们，而洞穴人们以为他是疯子，把他杀了</p>
</li>
<li><p>生命就是用来燃烧的</p>
</li>
<li><p>而在我眼里，韩寒骨子里始终是那个上海亭林镇东村村头热爱摩托喜欢追风每天都要洗头的不羁少年。在界定少年的标准里，最重要的一条就是义气</p>
</li>
<li><p>世界所有光芒都是一场远行，它们从太阳出发，只是为了去未知的地球看一眼</p>
</li>
<li><p>不需要大门向我们打开，因为我们自己就是钥匙</p>
</li>
<li><p>音乐不应该只是简单地用音色旋律来渲染电影，我想音乐是组成电影的各个元素中所需要的之一</p>
</li>
<li><p>也许因为原野太辽阔了，草原狼找到自己的同类并不是件容易的事。所以当风带来一缕熟悉的味道时，它们总会兴奋地仰首远眺，互相发出善意的嚎叫。然后，没有任何中间过程，它们就能建立起深刻的信任，它们一起在草原与河流之间合作狩猎，一起奔跑在无尽的阳光里，然后在下一个雨季来临前分道扬镳。这样的事情，很美好</p>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>天下有大勇者</title>
    <url>/2021/07/28/%E5%A4%A9%E4%B8%8B%E6%9C%89%E5%A4%A7%E5%8B%87%E8%80%85/</url>
    <content><![CDATA[<ol>
<li><p>天下有大勇者，猝然临之而不惊，无故加之而不怒。此其所挟持者甚大，而其志甚远也</p>
</li>
<li><p>如果你想要你从未拥有过的东西，那么你必须去做你从来未做过的事</p>
</li>
<li><p>感情问题不是理科题，有标准答案，每两个人的结合都可能是一种独特的化学反应，难以片面分析</p>
</li>
</ol>
<span id="more"></span>

<ol start="4">
<li><p>感动不是爱情，爱情根本不需要这么累，你追我跑，那是狩猎，我又不是猎物</p>
</li>
<li><p>一生匆匆，不能因为任何外因而放弃追随自己的心</p>
</li>
<li><p>《圣经·传道书》第三章说：世间万物皆有定时，生有时，死有时，悲恸有时，跳舞有时，花开有时，凋零有时。第一次看，颇有宿命论的感觉，但现在思量，这章无非是想告诉世人，人间万物瞬息万变，悲喜无常，却也总有那最合适的因缘和时机，花开也自有凋零时，花开须折直须折，莫待无花空折枝啊！生命中那些最美好的东西，都是转瞬即逝，春之落樱，夏之花火，秋之红枫，冬之飞雪，错过了那个时刻，就永远不是那个味道</p>
</li>
<li><p>如果你希望一个人爱你，最好的心理准备就是不要让自己变成非爱他（她）不可，你要坚强独立，自求多福，让自己成为自己生活的重心，有寄托，有目标，有光辉，有前途……总之，让自己有足够多可以使自己快乐的源泉，然后再准备接受或不接受对方的爱       ——《罗兰小语》</p>
</li>
<li><p>喜欢一个人本是一件多么美好的事，它应该带来温暖与治愈，宁静与安心</p>
</li>
<li><p>希望每一个在爱中的人都能够尽可能做到：不欺人，不自欺，也不被人欺</p>
</li>
<li><p>朝闻道，夕死可矣</p>
</li>
<li><p>我行过许多地方的桥，看过许多次数的云，喝过许多种类的酒，却只爱过一个正当最好年龄的人</p>
</li>
<li><p>因为有了和你在一起的故事，它就是对于你来说，最好的，唯一的，不可取代的</p>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>懂事之前，情动以后</title>
    <url>/2021/07/25/%E6%87%82%E4%BA%8B%E4%B9%8B%E5%89%8D%EF%BC%8C%E6%83%85%E5%8A%A8%E4%BB%A5%E5%90%8E/</url>
    <content><![CDATA[<ul>
<li><p>组成我们生命的，从来不是枯燥的永恒，而是那些怦然心动的细节</p>
</li>
<li><p>诸行无常，缘起缘灭，极乐终有尽时</p>
</li>
<li><p>妖本薄情</p>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p>正是我们花在他身上的时间使他变得重要</p>
</li>
<li><p>姑娘，如果你想要一个暖男，就请你拥有配得上这份温暖的温柔</p>
</li>
<li><p>愿赌服输，这真是爱情里最高尚的品德</p>
</li>
<li><p>只是自此以后，悠悠岁月，好像了无牵挂，滚滚红尘，不过一堆白骨</p>
</li>
<li><p>痛苦是人生的本质，痛苦的来源并不是一切苦痛，而是你对人生本质的看不透</p>
</li>
<li><p>祝你最终找到一个既能陪你吃泡面，又能伴你吃烛光晚餐的姑娘</p>
</li>
<li><p>失去喜欢的人，就是恋爱这门课最高昂的学费</p>
</li>
<li><p>很多故事是假的，但道理是真的</p>
</li>
<li><p>讲故事的人假正经，听故事的人最无情</p>
</li>
<li><p>初见心动，再见依然</p>
</li>
</ul>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>我依然爱你，我只是不喜欢你了</title>
    <url>/2021/07/24/%E6%88%91%E4%BE%9D%E7%84%B6%E7%88%B1%E4%BD%A0%EF%BC%8C%E6%88%91%E5%8F%AA%E6%98%AF%E4%B8%8D%E5%96%9C%E6%AC%A2%E4%BD%A0%E4%BA%86/</url>
    <content><![CDATA[<ol>
<li>时光酿成的佳缘，虽百转千回，终成美眷</li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>我人生中最幸运的两件事：一件是时间终于将我对你的爱消耗殆尽，另一件是很久以前我遇到你</p>
</li>
<li><p>我不认为一辈子只爱一个人是件可惜的事，也不认为一辈子爱过很多人就是一件不道德的事</p>
</li>
<li><p>日本禅师铃木大拙的《禅者的初心》有一段话：“因为迷失了自己，烦恼对你来说就会成为真正的烦恼。当你没有迷失自己，哪怕你碰到麻烦，都不会觉得它们是什么烦恼。”</p>
</li>
<li><p>在没有见到巨龙之前，每个勇士都会认为自己会是那个屠龙的英雄</p>
</li>
<li><p>爱情这东西，时间很关键。认识得太早或太晚，都不行</p>
</li>
<li><p>依然祝你，平安幸福</p>
</li>
<li><p>一个人若要完全理解另一个人，大概必须有过类似的处境，受过类似的痛苦，或者有过类似的觉醒体验，而这却是非常罕见的</p>
</li>
<li><p>只要我知道你在，一切就都很好</p>
</li>
<li><p>叔本华的哲学理论看不进去，但他的随笔还是很精彩的，写了那么多，无非强调一点——所谓人生，不过是摇摆于痛苦与无聊之间的一座钟摆，或者因欲望不能满足而痛苦，或者因满足后的空虚而无聊。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>我喜欢你</title>
    <url>/2021/08/04/%E6%88%91%E5%96%9C%E6%AC%A2%E4%BD%A0/</url>
    <content><![CDATA[<ol>
<li><p>阳光从叶子的怀抱里穿梭，影子斑驳，岁月晶莹</p>
</li>
<li><p>我喜欢你，你喜欢我吗？</p>
</li>
<li><p>女生说，你要帮我。<br>男生说，好。<br>女生说，不要骗我。<br>男生说，好。</p>
</li>
</ol>
<span id="more"></span>

<ol start="4">
<li><p>你为谁冲锋陷阵，谁为你捡拾骸骨</p>
</li>
<li><p>真正的爱无需表白，所有成功的表白不过是双方早已写好剧本的一场戏而已</p>
</li>
<li><p>我爱你，若你不爱我，那么去你（哔）的</p>
</li>
<li><p>大丈夫行事，论是非，不论利害；论顺逆，不论成败；论万世，不论一生     ——黄宗羲</p>
</li>
<li><p>每个女孩都是我们人生的烛火，照亮了我们每段时期疯狂追求爱情的动人姿态，帮助我们这些男孩，一步一步，成为像样的男子汉。我们所要做的，就是再多喜欢那女孩一点。再多一点，再多一点一点。只要够喜欢，就没有办不到的等待。</p>
</li>
<li><p>等待，要有一个最简单的理由，就够了</p>
</li>
<li><p>逃避，就一直是输家。唯有面对，才熟要赢的第一步</p>
</li>
<li><p>当世界年纪还小的时候，洋葱、萝卜和西红柿，不相信世界上有南瓜这种东西。它们认为那是一种空想。南瓜不说话，默默地成长着</p>
</li>
<li><p>你怎么就不明白呢？这个世界是不会为你而改变的。我和这个世界一样，是不会为你而改变的      ——《牯岭街少年杀人事件》</p>
</li>
<li><p>《牯岭街少年杀人事件》有这么一句台词，我和这个世界一样，这个世界是不会改变的。我不这么认为。我会变，这个世界也会变。有可能有个人因为读了某篇文章，受到某个人观点的影响，就真的改变了世界</p>
</li>
<li><p>我们现在所经历的迷茫和窘境，其实就归咎于过去不愿面对的改变或多年来不曾根治的恶习，如果因为做一件事而无法坚持，那么到了20多岁需要对外界承担一份责任时，就欠自己一个交代</p>
</li>
<li><p>别给自己找太多放弃的理由，因为比你好的人还在坚持。而这个世界上所有的坚持，都是因为热爱</p>
</li>
<li><p>祝我们再遇见，都能比现在过得更好</p>
</li>
<li><p>以后还有很漫长很漫长的路途，都要一个人走完。都要靠自己，凭借自己的能力去完成，而不是依靠谁      ——《千与千寻》</p>
</li>
<li><p>我只是想告诉你，如果你一无所长，脑子里什么东西都没有，你以后还会碰到无数个许言言，但是你一个都抓不住</p>
</li>
<li><p>世界上有那么多人，这么对我的，偏偏不是许言言。她像一把刀子，我用她来搅动我的心。虽然痛但是却乐此不疲</p>
</li>
<li><p>一个人在没有成为最好的自己之前，也不配拥有最好的对方</p>
</li>
<li><p>而那一条没有风，没有人的街，就像我们如今的内心。它曾经人来人往过，热闹过，可是每当夜晚来临，它却只是一个人卧在黑暗里，静静地想，什么时候，只要有一盏路灯亮，一盏就好了</p>
</li>
<li><p>总有一天，会有一个人，看你写过的所有状态，读完写的所有微博，看你从小到大的所有照片，甚至去别的地方寻找关于你的信息，甚至听你听的歌，走你走过的地方，看你喜欢看的书，品尝你总是大呼好吃的东西……只是想弥补上，你的青春——他迟到的时光</p>
</li>
<li><p>七岁那年，我抓住一只蝉，以为抓住了整个夏天。十七岁的那年，我吻过他的脸，就以为能和她永远</p>
</li>
<li><p>每当我找不到存在的意义，每当我迷失在黑夜里，夜空中最亮的星，请照亮我前行</p>
</li>
<li><p>真爱的第一个征兆，在男孩身上是胆怯，在女孩身上是大胆</p>
</li>
<li><p>坐在前桌的某某，你是我十七岁时爱上的女孩，如今，各自安好，我不打扰，致我那美好的高三岁月</p>
</li>
<li><p>我们都生活在阴沟里，但仍然有人仰望星空<br>We are all in the gutter, but some of us are looking at the star</p>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>手机摄影教程@贾树森（大树）</title>
    <url>/2021/05/09/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%95%99%E7%A8%8B-%E8%B4%BE%E6%A0%91%E6%A3%AE%EF%BC%88%E5%A4%A7%E6%A0%91%EF%BC%89/</url>
    <content><![CDATA[<h1 id="第4课-摄影之眼是怎样炼成的？"><a href="#第4课-摄影之眼是怎样炼成的？" class="headerlink" title="第4课 摄影之眼是怎样炼成的？"></a>第4课 摄影之眼是怎样炼成的？</h1><ol>
<li>好照片的标准：明确的主题，主体突出，画面简洁</li>
<li>学会发现生活中的没，提高自己的摄影眼力</li>
</ol>
<span id="more"></span>

<h1 id="第8课：不同环境中如何运用光线？"><a href="#第8课：不同环境中如何运用光线？" class="headerlink" title="第8课：不同环境中如何运用光线？"></a>第8课：不同环境中如何运用光线？</h1><ol>
<li>正确认知和把握光线能够拍出好照片</li>
</ol>
<ul>
<li>顺光——光感均匀但是比较平</li>
<li>侧光——立体感、质感、突出照片主体</li>
<li>逆光——剪影、画面氛围感</li>
<li>顶光(骷髅光) ——室内光、中午的太阳光、不推荐</li>
<li>曝光——亮的时候调高，暗的时候调低</li>
</ul>
<ol start="2">
<li>由静到动由浅入深有助于熟练运用光线</li>
<li>日出后俩小时、日落前俩小时是黄金时间，尽量不在正午室外拍照</li>
<li>室内拍照尽量靠近窗户，光源明亮、稳定  营造多种光线（顺光、逆光、侧光），拉上纱窗光线更柔和。或者打开室内灯光</li>
</ol>
<h1 id="第10课：手机摄影构图有哪些？"><a href="#第10课：手机摄影构图有哪些？" class="headerlink" title="第10课：手机摄影构图有哪些？"></a>第10课：手机摄影构图有哪些？</h1><ol>
<li>对角线构图具有强烈的动感视觉冲击</li>
<li>中心构图简单直接，主体突出</li>
<li>对称式构图有助于表现比较平衡稳定的画面</li>
<li>三分法构图是获得黄金视觉的简单方法</li>
<li>框架式构图有助于屏蔽杂乱背景，突出主体，增加画面趣味性</li>
</ol>
<h1 id="第11课：如何在复杂背景下突出拍摄主体？"><a href="#第11课：如何在复杂背景下突出拍摄主体？" class="headerlink" title="第11课：如何在复杂背景下突出拍摄主体？"></a>第11课：如何在复杂背景下突出拍摄主体？</h1><ol>
<li>线条可以充当引导线，将视线引导到视觉中心（主体）</li>
<li>用好前景有助于表现画面的纵深感</li>
<li>背景选择是照片成败的关键</li>
<li>构图的实质是想方设法突出主体</li>
</ol>
<h1 id="第12课：照片的横平竖直是怎么回事儿？"><a href="#第12课：照片的横平竖直是怎么回事儿？" class="headerlink" title="第12课：照片的横平竖直是怎么回事儿？"></a>第12课：照片的横平竖直是怎么回事儿？</h1><ol>
<li>横平竖直的照片看起来比较舒服</li>
<li>依靠取景边框以及参考线作为辅助有助于拍出横平竖直的照片</li>
<li>横平和竖直可以分开满足</li>
<li>绝大部分的照片需要遵循横平竖直这一基本原则</li>
</ol>
<h1 id="第15课：怎样才能拍出视角独特的照片？"><a href="#第15课：怎样才能拍出视角独特的照片？" class="headerlink" title="第15课：怎样才能拍出视角独特的照片？"></a>第15课：怎样才能拍出视角独特的照片？</h1><ol>
<li>复牌有利于表现地平面上的景物层次、数量、位置等等，能够给人一种辽阔、深远的感受</li>
<li>仰拍有利于突出被摄体高达的气势，适合表现上部空间</li>
<li>平拍时被摄对象不变形，会使人感到平等和亲切</li>
<li>尝试从仰拍俯拍以及平拍多个角度去拍摄，容易寻找到不寻常的视角</li>
</ol>
<h1 id="第16课：如何拍出刷爆朋友圈的美食？"><a href="#第16课：如何拍出刷爆朋友圈的美食？" class="headerlink" title="第16课：如何拍出刷爆朋友圈的美食？"></a>第16课：如何拍出刷爆朋友圈的美食？</h1><ol>
<li>拍摄美食尽量选择靠窗的位置获得良好光线，侧光和逆光有助于更好的表现美食，构图时注意景别的变化</li>
<li>美食摄影的APP推荐：foodie美食相机</li>
</ol>
<h1 id="第17课：怎样在不同环境下把人像拍美？"><a href="#第17课：怎样在不同环境下把人像拍美？" class="headerlink" title="第17课：怎样在不同环境下把人像拍美？"></a>第17课：怎样在不同环境下把人像拍美？</h1><ol>
<li>采取“动起来”的方式，可以使拍摄的人像照片不死板</li>
<li>靠近被摄对象，采取低角度仰拍会使腿显得修长</li>
<li>选择和环境颜色差异大的服装有助于突出主体</li>
<li>特写人像主要突出人物面部轮廓及表情，全身人像囊括更多的风景，半身人像则兼而得之</li>
</ol>
<h1 id="第18课：如何拍摄活泼好动的孩子？"><a href="#第18课：如何拍摄活泼好动的孩子？" class="headerlink" title="第18课：如何拍摄活泼好动的孩子？"></a>第18课：如何拍摄活泼好动的孩子？</h1><ol>
<li>在光线明亮处拍照，拍照时稳住手机，光线不好时不拍快速激烈的动作等，会让拍孩子的照片不虚</li>
<li>熟练手机拍照各项功能，让自己处于时刻可以拍照的状态有助于抓住孩子的精彩瞬间</li>
<li>搭配服装时，颜色不宜过多，尽量选择跟背景差异比较大的颜色衣服</li>
</ol>
<h1 id="第19课：怎样自拍好看又不落俗套？"><a href="#第19课：怎样自拍好看又不落俗套？" class="headerlink" title="第19课：怎样自拍好看又不落俗套？"></a>第19课：怎样自拍好看又不落俗套？</h1><ol>
<li>手持相机自拍时，可以采取闭眼睛，拍影子，通过镜子自拍等方法让自拍照与众不同</li>
<li>使用自拍杆进行自拍时，通过尽力少露或不露自拍杆使照片跟生活照有所区别</li>
<li>把手机固定在三脚架上进行自拍，可以进行跳跃等各种富有创意的自拍</li>
<li>矿泉水瓶，杯子等都可以临时充当三脚架来进行自拍</li>
</ol>
<h1 id="第20课：如何拍好花卉？"><a href="#第20课：如何拍好花卉？" class="headerlink" title="第20课：如何拍好花卉？"></a>第20课：如何拍好花卉？</h1><ol>
<li>通过虚实对比，色彩对比，明暗对比和选择尽量干净的背景可以使花朵更突出</li>
<li>最适合拍花的光线是侧光、侧逆光、逆光和局部光线</li>
<li>拍花忌构图太满，可以采取疏密有致、留白、对角线构图等</li>
<li>拍花除了采用干净背景，更要把现场背景有机搭配，丰富画面</li>
<li>通过变幻视角，拍摄花的影子甚至是水中倒影等使照片别具一格</li>
</ol>
<h1 id="第21课：怎样拍好全家福？"><a href="#第21课：怎样拍好全家福？" class="headerlink" title="第21课：怎样拍好全家福？"></a>第21课：怎样拍好全家福？</h1><ol>
<li>拍摄全家福要选择干净的背景，明亮均匀的光线</li>
<li>使用三脚架拍摄全家福方便取景</li>
<li>焦点放在前排中间人的面部，并锁定焦点和曝光</li>
<li>服装穿着要讲究</li>
<li>对待不爱拍照的孩子要有耐心，不能心急勉强</li>
</ol>
<h1 id="第22课：雨雪天气怎么拍？"><a href="#第22课：雨雪天气怎么拍？" class="headerlink" title="第22课：雨雪天气怎么拍？"></a>第22课：雨雪天气怎么拍？</h1><ol>
<li>“恶劣”天气的光线特点是光线亮度比较低，光线均匀，反差小</li>
<li>建议：</li>
</ol>
<ul>
<li>采用框架式和留白构图</li>
<li>拍摄阴天的天空，拍摄水中的倒影，拍摄玻璃上的水珠</li>
<li>运用鲜艳的色彩</li>
</ul>
<h1 id="第25课：如何让照片具有故事性？"><a href="#第25课：如何让照片具有故事性？" class="headerlink" title="第25课：如何让照片具有故事性？"></a>第25课：如何让照片具有故事性？</h1><ol>
<li>尽量横构图，拍摄有故事的场景，设定一个剧情，拍摄背景，拍摄身体的某一部分，只拍眼睛，明暗对比，动静结合，拍摄情绪，尝试不同视角，利用组照等</li>
<li>建议大家平时多看电影，从中汲取营养，提高用照片讲故事的能力</li>
</ol>
<h1 id="第26课：怎么拍摄剪影类型的照片？"><a href="#第26课：怎么拍摄剪影类型的照片？" class="headerlink" title="第26课：怎么拍摄剪影类型的照片？"></a>第26课：怎么拍摄剪影类型的照片？</h1><ol>
<li>主体处于逆光，并且主体和背景有比较的高度差适合拍摄剪影</li>
<li>拍摄剪影时最好提前对焦并锁定焦点，同事按照背景的亮度调整曝光</li>
<li>明亮并且简洁无遮挡的背景适合拍摄剪影</li>
<li>拍摄剪影时需要主体的轮廓或形状要好看</li>
<li>拍摄半剪影照片时要注意控制曝光，使之兼顾主体的背景</li>
</ol>
<h1 id="第27课：旅行时如何避免“游客照”？"><a href="#第27课：旅行时如何避免“游客照”？" class="headerlink" title="第27课：旅行时如何避免“游客照”？"></a>第27课：旅行时如何避免“游客照”？</h1><ol>
<li>可以采取蹲下，改变摄影方向和地点来避开游人</li>
<li>随时改变拍摄地点和视角，避免照片单调</li>
<li>把焦点放在吃穿住行以及所见所闻等诸多方面</li>
</ol>
<h1 id="第28课：全景和夜景怎么拍？"><a href="#第28课：全景和夜景怎么拍？" class="headerlink" title="第28课：全景和夜景怎么拍？"></a>第28课：全景和夜景怎么拍？</h1><ol>
<li>全景拍摄不仅可以横着拍，也可以竖着拍，还可以玩同一画面有多个自己的创意</li>
<li>拍摄夜景需要三脚架，充电宝等辅助器材，日落前到达拍摄地做好准备，在拍摄夜景“黄金时刻”到来的前后抓紧时间连续拍摄</li>
</ol>
<h1 id="第30课：如何拍日出日落？"><a href="#第30课：如何拍日出日落？" class="headerlink" title="第30课：如何拍日出日落？"></a>第30课：如何拍日出日落？</h1><ol>
<li>拍摄日出和日落最好事先踩点，选好合适的地面景物配合天空</li>
<li>拍摄日出要“早出”，拍摄日落要“晚归”</li>
<li>拍摄日出和日落曝光要以天空为主，兼顾地面景物的层次</li>
<li>选用合适的前景来烘托气氛，利用倒影，拍摄剪影，拍摄第一缕阳光和在飞机上拍摄等，会让日出日落的照片不俗</li>
</ol>
<h1 id="第31课：手机能拍月亮么？"><a href="#第31课：手机能拍月亮么？" class="headerlink" title="第31课：手机能拍月亮么？"></a>第31课：手机能拍月亮么？</h1><ol>
<li>相比于晚上，早晨和傍晚才熟拍月亮的最佳时机</li>
<li>拍月亮时曝光要以月亮为基准，打开HDR功能</li>
<li>拍月亮时对焦要仔细，如果月亮很难对焦，可以寻找适合的参照物</li>
<li>使用手机拍月亮要寻找适当的前景，让画面更丰富</li>
</ol>
<h1 id="第32课：追随拍摄如何操作？"><a href="#第32课：追随拍摄如何操作？" class="headerlink" title="第32课：追随拍摄如何操作？"></a>第32课：追随拍摄如何操作？</h1><ol>
<li>技术要领是三同：同一方向，同一速度，同时快门</li>
<li>适合追拍的光线是逆光，侧逆光和测光。使用手机追拍需要比较暗的光线</li>
<li>学习追随拍摄要循序渐进，先从比较简单的定点追拍开始</li>
</ol>
<h1 id="第33课：怎样延时拍摄和拍摄视频？"><a href="#第33课：怎样延时拍摄和拍摄视频？" class="headerlink" title="第33课：怎样延时拍摄和拍摄视频？"></a>第33课：怎样延时拍摄和拍摄视频？</h1><ol>
<li>需要将手机架在三脚架上，光线变化比较大的时候不要锁定焦点和曝光</li>
<li>用手机拍摄视频时最重要是稳定画面，正确使用推拉摇移</li>
<li>后期可以用Vue、美拍、小影等来剪辑视频</li>
</ol>
<h1 id="第37课：照片怎么调黑白？"><a href="#第37课：照片怎么调黑白？" class="headerlink" title="第37课：照片怎么调黑白？"></a>第37课：照片怎么调黑白？</h1><p>适合调黑白的条件：</p>
<ul>
<li>阴影占大部分</li>
<li>摆脱干扰因素，如背景（颜色过于强烈）</li>
<li>主体涉及纹理，砖瓦线条</li>
<li>表达情绪</li>
</ul>
<h1 id="第40课：如何去掉照片中的路人甲？"><a href="#第40课：如何去掉照片中的路人甲？" class="headerlink" title="第40课：如何去掉照片中的路人甲？"></a>第40课：如何去掉照片中的路人甲？</h1><p>TouchRetouch抠图软件</p>
<ul>
<li>删除物体</li>
<li>快速修复</li>
<li>线条删除</li>
<li>克隆印章</li>
</ul>
<h1 id="第41课：照片如何调出虚化效果？"><a href="#第41课：照片如何调出虚化效果？" class="headerlink" title="第41课：照片如何调出虚化效果？"></a>第41课：照片如何调出虚化效果？</h1><p>AfterFocus景深处理软件，支持“镜头模糊”和“运动模糊”两种效果</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>摄影笔记</title>
    <url>/2022/11/03/%E6%91%84%E5%BD%B1%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="测光模式"><a href="#测光模式" class="headerlink" title="测光模式"></a>测光模式</h1><h2 id="中央重点测光"><a href="#中央重点测光" class="headerlink" title="中央重点测光"></a>中央重点测光</h2><ol>
<li>中央重点测光:中央平均测光是采用最多的一种测光模式，几乎所有的相机生产厂商都将中央平均测光作为相机默认的测光方式。如下图，测光偏重于取景器中央，然后平均到整个场景。</li>
<li>中央重点测光的应用：中央重点测光是一种传统测光方式，大多数相机的测光算法是重视画面中央约2/3的位置，对周围也予于某些程度的考虑。对于习惯使用中央重点测光的摄影者，用这种方式测光比使用多区评价测光方式更加容易控制效果。适用拍摄用途:个人旅游照片，特殊风景照片等。</li>
</ol>
<span id="more"></span>

<h2 id="局部测光"><a href="#局部测光" class="headerlink" title="局部测光"></a>局部测光</h2><ol>
<li>局部测光:局部测光方式是对画面的某一局部进行测光。中央部分测光和中央平均测光是两种不同的测光方式，中央平均测光是以中央区域为主其他区域为辅助的测光方式，而中央部分测光则是只对画面中央的一块区域进行测光，测光范围大约是百分之三至百分之十二进行测光。</li>
<li>局部测光的应用：局部测光方式是对画面的某一局部进行测光。当被摄主体与背景有着强烈明暗反差，而且被摄主体所占画面的比例不大时，运用这种测光方式最合适;在这种情况下，局部测光比第一二种测光方式准确，又不象点测光方式那样由于测光点太狭小需要一定测光经验才不容易失误。适用拍摄用途:特定条件下需要准确的测光，测光范围比点测光更大时。</li>
</ol>
<h2 id="评价测光"><a href="#评价测光" class="headerlink" title="评价测光"></a>评价测光</h2><ol>
<li>评价测光：评价测光(或称分割测光/矩阵测光/多分区测光)测光方式是一种比较新的测光技术，出现时间不超过20年，最早由尼康(Nikon)公司率先开发这种独特的分割测光方式。评价测光(或称分割测光)测光方式与中央重点测光最大的不同就是评价测光(或称分割测光)将取景画面分割为若干个测光区域，每个区域独立测光后在整体整合加权计算出一个整体的曝光值。</li>
<li>评价测光的应用：拍摄光源比较正、光照比较均匀的场景时效果最好，目前已经成为许多摄影师和摄影爱好者最常用的测光方式。适用拍摄用途:团体照片，家庭合影，一般的风景照片等。</li>
</ol>
<h2 id="点测光"><a href="#点测光" class="headerlink" title="点测光"></a>点测光</h2><ol>
<li>点测光：中央平均测光(中央重点平均测光)虽然可以充分的表现整个画面的光线反应，但是也有许多不足之处，例如需要精准的小范围物体曝光准确时，中央平均测光(中央重点平均测光)就不那么好使了，即使是中央部分测光(局部测光)有时范围也有些大。</li>
<li>点测光的应用：点测光只对很小的区域准确测光，区域外景物的明暗对测光无影响，所以测光精度很高，其用途主要是可对远处特定的小区域测光。掌握这种测光方式一是要求摄影者对所使用相机的点测特性有一定了解，懂得选定反射率为18%左右的测光点，或能对高于或低于18%反射率的测光点凭经验作出曝光补偿。点测方式主要供专业摄影师或对摄影技术很了解的人使用。点测方式使用不当会添乱。适用拍摄用途:舞台摄影，个人艺术照，新闻特写照片等。</li>
</ol>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>有一个可以想念的人</title>
    <url>/2021/07/28/%E6%9C%89%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E6%83%B3%E5%BF%B5%E7%9A%84%E4%BA%BA/</url>
    <content><![CDATA[<ol>
<li><p>什么事都以功利的眼光去衡量，人生未免太无趣了</p>
</li>
<li><p>有一个可以想念的人，就是幸福</p>
</li>
<li><p>你从身边走过，却改变了我的季节</p>
</li>
</ol>
<span id="more"></span>

<ol start="4">
<li><p>所有你乐于挥霍的时间都不能算作浪费</p>
</li>
<li><p>没有了安全感，爱情便什么都不是</p>
</li>
<li><p>人生的很多甚至大部分痛苦来自于对于自我的错误认识</p>
</li>
<li><p>我对你好，但也请你，对我好一点</p>
</li>
<li><p>你希望这个世界如何并不重要，重要的是你认清这个世界事实上是怎么样的，并在接受这样的事实前提下努力去做一点事情</p>
</li>
<li><p>在你没有变成你想成为的人的时候，你所遇到的永远不是对的人</p>
</li>
<li><p>草在结他的籽，树在摇他的叶，我们站着，不说话，就十分美好</p>
</li>
<li><p>你是什么样的人，你就拥有什么样的世界</p>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2019/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="第二章-线性表"><a href="#第二章-线性表" class="headerlink" title="第二章 线性表"></a>第二章 线性表</h1><h2 id="线性表的顺序表示"><a href="#线性表的顺序表示" class="headerlink" title="线性表的顺序表示"></a>线性表的顺序表示</h2><h3 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h3><ol>
<li>静态分配</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MaxSize 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    Elemtype data[MaxSize];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;Sqlist;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>动态分配</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> InitSize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType *data;</span><br><span class="line">    <span class="keyword">int</span> MaxSize,length;</span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C初始动态分配</span></span><br><span class="line">L.data = (ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*InitSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++初始动态分配</span></span><br><span class="line">L.data = <span class="keyword">new</span> ElemType[InitSize];</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="顺序表基本操作的实现"><a href="#顺序表基本操作的实现" class="headerlink" title="顺序表基本操作的实现"></a>顺序表基本操作的实现</h3><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i, ElemType e)</span> <span class="comment">//将元素e插入到顺序表L中的第i个位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L.length+<span class="number">1</span>)    <span class="comment">//无效范围</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(L.length&gt;MaxSize)     <span class="comment">//空间已满</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=L.length;j&gt;=i;j--)   <span class="comment">//将第i个元素及之后的元素后移</span></span><br><span class="line">        L.data[j]=L.data[j<span class="number">-1</span>];</span><br><span class="line">    L.data[i<span class="number">-1</span>]=e;     <span class="comment">//第i个位置放入e</span></span><br><span class="line">    L.length++;        <span class="comment">//线性表长度+1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><pre><code class="c">bool ListDelete(SqList &amp;L, int i, Elemtype &amp;e)&#123;
    //删除顺序表L中的第i个位置元素，使用引用变量e返回
    if(i&lt;1||i&gt;L.length)    //无效范围
        return false;
    e = L.data[i-1];      //赋值给e
    for(int j=i;j&lt;L.length;j++)   //将第i个位置后的元素前移
        L.data[j-1] = L.data[j];
    L.length--;           //线性表长度-1
    return true;
&#125;

#### 按值查找

```c
int LocateElem(SqList L, ElemType e)&#123;
    //查找第一个值等于e的元素，返回位序
    int i;
    for(i=0;i&lt;L.length;i++)
        if(L.data[i]==e)
            return i+1;   //下标为i的元素值等于e，返回其位序i+1
    return 0   //没找到
&#125;
</code></pre>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>考研，数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>有的人吧</title>
    <url>/2021/07/29/%E6%9C%89%E7%9A%84%E4%BA%BA%E5%90%A7/</url>
    <content><![CDATA[<ol>
<li><p>有的人吧，他可以选锦衣玉食，也可以选粗茶淡饭，可以选咖啡红酒，也可以选白开水。这样的人，他说喜欢喝白开水，那就是真的喜欢喝白开水。有的人，买不起锦衣玉食，选不了咖啡红酒，他说喜欢喝白开水，但是哪天你哪怕在他面前放一杯可乐，他都会扔掉那杯白开水</p>
</li>
<li><p>所谓恋爱啊，只要参加了就是有意义的，即使是没有结局。当你喜欢上一个人的那一霎，是永远都不会消失的。这都将会变成你活下去的勇气，而且会变成你在黑暗中的一线曙光。我一直相信，你一定会喜欢上我的</p>
</li>
<li><p>不是常常有机会遇到可以爱他一生的人的，不过喜欢上的话就是另外一回事了，所以…所以我很珍惜爱过你的一切回忆，我真的这么想哦！爱过你的回忆，被你爱过的回忆，一直都好好地在这儿（心口）。不是能想着明天爱情会变得怎么样而谈着恋爱的，就是有那时候的我，才有现在的自己。我真的能够对自己这么说：你做得真好。不管在做什么，我就是我自己</p>
</li>
</ol>
<span id="more"></span>

<ol start="4">
<li><p>在这个城市里，我坚持的相信一定会有那么一个人，想着同样的事情，怀着相似的频率，在某站寂寞的出口，安排好了与我相遇</p>
</li>
<li><p>是的，所有关注这个话题，所有点赞所有评论的人，无论说了什么，心里都是舍不得放不下【真心】的人。我们男人同女人一样，渴望真心，渴望挚爱，渴望付出。我们没有看破红尘，没有绝望，我们一直在希望，在等待，等待这漫长漫长的黑夜终有光亮的一天</p>
</li>
<li><p>我们都想，得一人心足矣</p>
</li>
<li><p>不可胜在己，可胜在敌。胜不可为</p>
</li>
<li><p>紧张一个人，一件事，就是因为你在乎。有多在乎，就有多紧张</p>
</li>
<li><p>做事靠谱是一个毕业生最可贵的素质，没有之一</p>
</li>
<li><p>就像童话中两个贪心的人挖地下的财宝，结果挖出一个人的骸骨，虽然迅速埋上了，甚至在上面种了树，栽了花，但都清楚地知道底下埋的是什么。看见树，看见花，想的却是地下的那具骸骨</p>
</li>
<li><p>曾经亲手盖过一栋漂亮的房子，突然有一天莫名其妙的崩塌，露出了地基下的森森白骨，我又亲手清理了破碎的砖瓦，却不敢再盖房子，只能种上鲜花。每年花开的时候，我都会来这里，别人都以为我在看花，其实我看到的只有白骨</p>
</li>
<li><p>只是缘分尽了而已，缘起自有缘灭，和万物的最终结局一样</p>
</li>
<li><p>想象有两个世界，一个世界有你，一个世界没有你，两者之间的不同就是你生命的意义</p>
</li>
<li><p>死亡是无法战胜的东西，而生前的陪伴，可以让死亡变得不那么可怕</p>
</li>
<li><p>为了一个不知能否实现的愿望，人有时会豁出一辈子的。笑其愚蠢的人，毕竟只是人生中的过客而已</p>
</li>
<li><p>不要那么孤独，请相信，这个世界上真的有人在过着你想要的生活</p>
</li>
<li><p>爱是两情相悦，你情我愿，又不是在自由市场挑西红柿，非要找性能价格比最合理的</p>
</li>
<li><p>她想要的，不过是一个能在寒夜里带给她温暖和希望，拉着她的手带着她穿山越岭，让她无惧荒郊黑夜的男人</p>
</li>
<li><p>如果我不曾见过太阳，我本可以忍受黑暗</p>
</li>
<li><p>喜欢你甚于昨日，略匮明朝</p>
</li>
<li><p>你不能在拥有爱情时惧怕失去爱情，更不能像我一样，在失去爱情以后憎恨爱情</p>
</li>
<li><p>我对世界骄傲，但不介意对你温柔，而你的快乐，就是我们的快乐</p>
</li>
<li><p>你这种年轻人我见的多啦，懂一点武功就以为可以横行天下，其实走江湖是一件很痛苦的事。会武功，有很多东西不能做。你不想耕田吧？又不耻去打劫，更不想抛头露面在街头卖艺，你怎么生活？</p>
</li>
<li><p>和一个自己爱的人去争什么输赢，吵赢了有怎样，低头认输又怎样</p>
</li>
<li><p>让我有最原始的生理冲动接近她，又有最高级的心理状态想去保护她</p>
</li>
<li><p>最恐怖的不是鬼神，而是人心</p>
</li>
<li><p>庭有枇杷树，吾妻死之年所手植也，今已亭亭如盖矣</p>
</li>
<li><p>婚姻不是为了获取，而是为了更好的付出</p>
</li>
<li><p>遇见，就不要错过。珍惜且珍惜</p>
</li>
<li><p>毕竟既然生命中有过一个女孩如此对你，你这辈子就不可以堕落。你得告诉所有人，她当年爱过的人，值得她爱</p>
</li>
<li><p>其实我想说的是，这世界上没有任何人值得你为了不回短信而苦恼的（除非你担心她出了什么意外），所有人或早或晚都会离你而去，或者你离他们而去，人生就是一部不知什么时候会被砍掉的美剧</p>
</li>
<li><p>如果你喜欢一个事，又有这样的才干，那就把整个人都投入进去，就要像一把刀扎下去直到刀柄一样，不要问为什么，也不要管会碰到什么</p>
</li>
<li><p>女孩子青春何其宝贵，那些时光交付给你，除了寄望于与你长相厮守外，只为最好的年华和一个值得的人一起走过，换取在一起的快乐回忆，留待日后珍藏；只要一起快乐过，那些青春便不算浪掷</p>
</li>
<li><p>如果真的有个曾经喜欢你，却最后没能在一起的姑娘让你心存歉意，至少为了她，也请你努力一点；因为你能为了她做最好的事，就是让自己配得上她的青春，让她想起你会觉得骄傲，而不是年轻时的一场荒唐。到最后，感情分崩离析，唯有旧时光不可辜负。我们都希望自己爱过的是个美好的人，哪怕是在我们看不见的地方</p>
</li>
<li><p>许多东西记下来，就是在心里生根。日后触景生情，总会懂的</p>
</li>
<li><p>你走，我不送你。你来，无论多大风多大雨，我要去接你。你要走便走，我不会留</p>
</li>
<li><p>人生而趋利避害，所谓人的感情，也不过是遵从这个趋利避害的基础上，更加显得有人情味一点罢了</p>
</li>
<li><p>在这个时间被微博微信碎片化的时代，还是有一些事值得我们单线程地事前花心思计划，事中用心执行，事后细细回味的。因为这些事情能给我们带来无法言说并且不能复制的美妙体验</p>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫笔记01 - 数据解析</title>
    <url>/2019/02/17/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B001/</url>
    <content><![CDATA[<h1 id="Xpath"><a href="#Xpath" class="headerlink" title="Xpath"></a>Xpath</h1><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>使用//获取整个页面中的元素，然后写标签名，然后在写谓词进行提取。比如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//div[@class=&#x27;abc&#x27;]</span><br></pre></td></tr></table></figure>

<h3 id="选取节点"><a href="#选取节点" class="headerlink" title="选取节点"></a>选取节点</h3><table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">描述</th>
<th align="center">示例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">nodename</td>
<td align="center">选取此节点的所有子节点</td>
<td align="center">bookstroe</td>
<td align="center">选取bookstore下的所有子节点</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">如果是在最前面，代表从根节点选取。<br>否则选择某节点下的某个节点</td>
<td align="center">/bookstore</td>
<td align="center">选取根元素下所有的bookstore节点</td>
</tr>
<tr>
<td align="center">//</td>
<td align="center">从全局节点中选择节点，随便在哪个位置</td>
<td align="center">//book</td>
<td align="center">从全局节点中找到所有的book节点</td>
</tr>
<tr>
<td align="center">@</td>
<td align="center">选取某个节点的属性</td>
<td align="center">//book[@price]</td>
<td align="center">选择所有拥有price属性的book节点</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">当前节点</td>
<td align="center">./a</td>
<td align="center">选取当前节点下的a标签</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="谓语"><a href="#谓语" class="headerlink" title="谓语"></a>谓语</h3><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点，被嵌在方括号中。</p>
<table>
<thead>
<tr>
<th>路径表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>/bookstore/book[1]</td>
<td>选取bookstore下的第一个子元素</td>
</tr>
<tr>
<td>/bookstore/book[last()]</td>
<td>选取bookstore下最后一个book元素</td>
</tr>
<tr>
<td>bookstore/book[position()&lt;3]</td>
<td>选取bookstore下前面两个子元素</td>
</tr>
<tr>
<td>//book[@price]</td>
<td>选取拥有price属性的book元素</td>
</tr>
<tr>
<td>//book[@price=10]</td>
<td>选取所有属性price等于10的book元素</td>
</tr>
</tbody></table>
<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><table>
<thead>
<tr>
<th>通配符</th>
<th>描述</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配任意节点</td>
<td>/bookstore/*</td>
<td>选取bookstore下的所有子元素</td>
</tr>
<tr>
<td>@*</td>
<td>匹配节点中的任何属性</td>
<td>//book[@*]</td>
<td>选取所有带有属性的book元素</td>
</tr>
</tbody></table>
<h3 id="选取多个路径"><a href="#选取多个路径" class="headerlink" title="选取多个路径"></a>选取多个路径</h3><p>通过在路径表达式中使用<code>|</code>运算符，可以选取若干个路径。示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选取所有book元素以及book元素下所有的title元素</span></span><br><span class="line">//bookstore/book | //book/title</span><br></pre></td></tr></table></figure>

<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>可以使用<code>and</code>，<code>or</code>，<code>=</code>，<code>&gt;</code>等，太多就不全列了，用到再说</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//dl[@class=&#x27;job_detail&#x27; and @id=&#x27;job_detail&#x27;]</span><br></pre></td></tr></table></figure>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li><code>/</code>和<code>//</code>的区别：<code>/</code>代表只获取直接子节点。<code>//</code>获取子孙节点。<code>//</code>用的多。</li>
<li><code>contains</code>：有时候某个属性中包含了多个值，可以使用<code>contains</code>函数：</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//div[contains(@class,&#x27;job_tail&#x27;)]</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>谓词的下标是从1开始的，不是0开始</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>XPath</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫笔记02 - 数据存储</title>
    <url>/2019/02/18/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B002/</url>
    <content><![CDATA[<h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><h2 id="什么是json"><a href="#什么是json" class="headerlink" title="什么是json"></a>什么是json</h2><p>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript (w3c制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p>
<span id="more"></span>

<h2 id="JSON支持数据格式"><a href="#JSON支持数据格式" class="headerlink" title="JSON支持数据格式"></a>JSON支持数据格式</h2><ol>
<li>对象（字典）。使用花括号。</li>
<li>数组（列表）。使用方括号。</li>
<li>整形、浮点型、布尔类型还有null类型。</li>
<li>字符串类型（字符串必须要用双引号，不能用单引号）。</li>
</ol>
<p>多个数据之间使用逗号分开。<br><strong>注意</strong>：json本质上就是一个字符串。</p>
<h2 id="字典和列表转JSON"><a href="#字典和列表转JSON" class="headerlink" title="字典和列表转JSON"></a>字典和列表转JSON</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">books = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;钢铁是怎样练成的&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;price&#x27;</span>: <span class="number">9.8</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;红楼梦&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;price&#x27;</span>: <span class="number">9.9</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">json_str = json.dumps(books,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(json_str)</span><br></pre></td></tr></table></figure>

<p>因为<code>json</code>在<code>dump</code>的时候，只能存放<code>ascii</code>的字符，因此会将中文进行转义，这时候我们可以使用<code>ensure_ascii=False</code>关闭这个特性。<br>在<code>Python</code>中。只有基本数据类型才能转换成<code>JSON</code>格式的字符串。也即：<code>int</code>、<code>float</code>、<code>str</code>、<code>list</code>、<code>dict</code>、<code>tuple</code>。</p>
<h2 id="将json数据直接dump到文件中"><a href="#将json数据直接dump到文件中" class="headerlink" title="将json数据直接dump到文件中"></a>将<code>json</code>数据直接<code>dump</code>到文件中</h2><p><code>json</code>模块中除了<code>dumps</code>函数，还有一个<code>dump</code>函数，这个函数可以传入一个文件指针，直接将字符串<code>dump</code>到文件中。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;钢铁是怎样练成的&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;price&#x27;</span>: <span class="number">9.8</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;红楼梦&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;price&#x27;</span>: <span class="number">9.9</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json.dump(books,fp)</span><br></pre></td></tr></table></figure>

<h2 id="将一个json字符串load成Python对象"><a href="#将一个json字符串load成Python对象" class="headerlink" title="将一个json字符串load成Python对象"></a>将一个json字符串load成Python对象</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意编码格式</span></span><br><span class="line">json_str = <span class="string">&#x27;[&#123;&quot;title&quot;: &quot;钢铁是怎样练成的&quot;, &quot;price&quot;: 9.8&#125;, &#123;&quot;title&quot;: &quot;红楼梦&quot;, &quot;price&quot;: 9.9&#125;]&#x27;</span></span><br><span class="line">books = json.loads(json_str,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(books))   <span class="comment">#字典类型</span></span><br><span class="line"><span class="built_in">print</span>(books)</span><br></pre></td></tr></table></figure>

<h2 id="直接从文件中读取json"><a href="#直接从文件中读取json" class="headerlink" title="直接从文件中读取json"></a>直接从文件中读取json</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意编码格式</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json_str = json.load(fp)</span><br><span class="line">    <span class="built_in">print</span>(json_str)</span><br></pre></td></tr></table></figure>

<h1 id="MySQL数据库操作"><a href="#MySQL数据库操作" class="headerlink" title="MySQL数据库操作"></a>MySQL数据库操作</h1><h2 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h2><p>数据库连接之前。首先先确认以下工作完成，这里我们以一个<code>pymysql_test</code>数据库.以下将介绍连接<code>mysql</code>的示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># port必须是int类型</span></span><br><span class="line">db = pymysql.connect(</span><br><span class="line">    host=<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    database=<span class="string">&#x27;pymysql_test&#x27;</span>,</span><br><span class="line">    port=<span class="number">3306</span></span><br><span class="line">)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">cursor.execute(<span class="string">&quot;select 1&quot;</span>)</span><br><span class="line">data = cursor.fetchone()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(</span><br><span class="line">    host=<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    database=<span class="string">&#x27;pymysql_test&#x27;</span>,</span><br><span class="line">    port=<span class="number">3306</span></span><br><span class="line">)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">insert into user(</span></span><br><span class="line"><span class="string">    id,username,gender,age,password</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">    values(null,&#x27;abc&#x27;,1,18,&#x27;111111&#x27;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.commit()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<p>如果在数据还不能保证的情况下，可以使用以下方式来插入数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">insert into user(</span></span><br><span class="line"><span class="string">    id,username,gender,age,password</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">    values(null,%s,%s,%s,%s);   # 都是%s，无论mysql表里是什么类型，pymysql处理</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql,(<span class="string">&#x27;spider&#x27;</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="string">&#x27;222222&#x27;</span>))  <span class="comment">#元组</span></span><br></pre></td></tr></table></figure>

<h2 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h2><p>使用<code>pymysql</code>查询数据。可以使用<code>fetch*</code>方法。</p>
<ol>
<li><code>fetchone()</code>：这个方法每次之获取一条数据。</li>
<li><code>fetchall()</code>：这个方法接收全部的返回结果。</li>
<li><code>fetchmany(size)</code>：可以获取指定条数的数据。</li>
</ol>
<p>示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">select * from user</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    result = cursor.fetchone()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<p>或者是直接使用<code>fetchall</code>，一次性可以把所有满足条件的数据都取出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">select * from user</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">results = cursor.fetchall()</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<p>或者是使用<code>fetchmany</code>，指定获取多少条数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">select * from user</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">results = cursor.fetchmany(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一定加where条件</span></span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">delete from user where id=1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.commit()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conn = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;root&#x27;</span>,database=<span class="string">&#x27;pymysql_demo&#x27;</span>,port=<span class="number">3306</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">update user set username=&#x27;aaa&#x27; where id=1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="comment"># 插入、删除、更新，都需要执行commit操作</span></span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h2 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h2><table>
<thead>
<tr>
<th>SQL术语/概念</th>
<th>MongoDB术语/概念</th>
<th>解释/说明</th>
</tr>
</thead>
<tbody><tr>
<td>database</td>
<td>database</td>
<td>数据库</td>
</tr>
<tr>
<td>table</td>
<td>collection</td>
<td>数据库表/集合</td>
</tr>
<tr>
<td>row</td>
<td>document</td>
<td>数据记录行/文档</td>
</tr>
<tr>
<td>column</td>
<td>field</td>
<td>数据字段/域</td>
</tr>
<tr>
<td>index</td>
<td>index</td>
<td>索引</td>
</tr>
<tr>
<td>joins</td>
<td>joins</td>
<td>表连接，MongoDB不支持</td>
</tr>
<tr>
<td>primary key</td>
<td>primary key</td>
<td>主键，MongoDB自动将_id字段设置为主键</td>
</tr>
</tbody></table>
<h2 id="MongoDB三元素"><a href="#MongoDB三元素" class="headerlink" title="MongoDB三元素"></a>MongoDB三元素</h2><p>数据库、集合、文档</p>
<ol>
<li>文档（document）：就是关系型数据库中的一行。文档是一个对象，由键值对构成，是<code>json</code>的扩展形式。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>集合（collection）：就是关系型数据库中的表。可以存储多个文档，结构可以不固定。如可以存储如下文档在一个集合中：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;title&quot;</span>:<span class="string">&quot;yyy&quot;</span>,<span class="string">&quot;price&quot;</span>:<span class="number">20.9</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MongoDB基本操作命令"><a href="#MongoDB基本操作命令" class="headerlink" title="MongoDB基本操作命令"></a>MongoDB基本操作命令</h2><ol>
<li>db：查看当前的数据库</li>
<li>show dbs：查看所有的数据库</li>
<li>use 数据库名：切换数据库。如果数据库不存在，则创建一个。（创建完成后需要插入数据库才算创建成功）</li>
<li>db.dropDatabase()：删除当前指向的数据库</li>
<li>db.集合名.insert(value)：添加数据到指定的集合中</li>
<li>db.集合名.find()：从指定的集合中查找数据</li>
</ol>
<h2 id="python操作MongoDB"><a href="#python操作MongoDB" class="headerlink" title="python操作MongoDB"></a>python操作MongoDB</h2><h3 id="安装pymongo"><a href="#安装pymongo" class="headerlink" title="安装pymongo"></a>安装pymongo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pymongo</span><br></pre></td></tr></table></figure>

<h3 id="连接MongoDB"><a href="#连接MongoDB" class="headerlink" title="连接MongoDB"></a>连接MongoDB</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取连接的对象</span></span><br><span class="line">client = pymongo.MongoClient(<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">27017</span>)</span><br><span class="line"><span class="comment"># 获取数据库</span></span><br><span class="line">db = client.zhihu</span><br><span class="line"><span class="comment"># 获取集合（表）</span></span><br><span class="line">collection = db.qa</span><br><span class="line"><span class="comment"># 插入一条数据到集合中</span></span><br><span class="line">collection.insert_one(&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Object ID</td>
<td>文档ID</td>
</tr>
<tr>
<td>String</td>
<td>字符串，最常用，必须是有效的UTF-8</td>
</tr>
<tr>
<td>Boolean</td>
<td>存储一个布尔值，True和False</td>
</tr>
<tr>
<td>Integer</td>
<td>整数可以是32位或64位，取决于服务器</td>
</tr>
<tr>
<td>Double</td>
<td>存储浮点值</td>
</tr>
<tr>
<td>Arrays</td>
<td>数组或列表，多个值存储到一个键</td>
</tr>
<tr>
<td>Object</td>
<td>用于嵌入式的文档，即一个值为一个文档</td>
</tr>
<tr>
<td>Null</td>
<td>存储Null值</td>
</tr>
<tr>
<td>Timestamp</td>
<td>时间戳，表示从1970-1-1 到现在的总秒数</td>
</tr>
<tr>
<td>Date</td>
<td>存储当前日期或时间的UNIX时间格式</td>
</tr>
</tbody></table>
<h3 id="操作MongoDB"><a href="#操作MongoDB" class="headerlink" title="操作MongoDB"></a>操作MongoDB</h3><ol>
<li><code>insert_one</code>：加入一条文档数据到集合中</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection.insert_one(&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>:<span class="string">&quot;abc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>insert_many</code>：加入多条文档数据到集合中</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection.insert_many(&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;11111&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;bbbb&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;2222&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>find_one</code>：查找一条文档对象</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = collection.find_one()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者指定条件</span></span><br><span class="line">result = collection.find_one(&#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;abc&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><code>update_one</code>：更新一条文档对象</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection.update_one(&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;abc&quot;</span>&#125;,&#123;<span class="string">&quot;$set&quot;</span>:&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;aaa&quot;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><code>update_many</code>：更新多条文档对象</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection.update_many(&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;abc&quot;</span>&#125;,&#123;<span class="string">&quot;$set&quot;</span>:&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;aaa&quot;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><code>delete_one</code>：删除一条文档对象</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection.delete_one(&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;abc&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><code>delete_many</code>：删除多条文档对象</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection.delete_one(&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;abc&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫笔记03 - 网络请求</title>
    <url>/2019/02/19/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B003/</url>
    <content><![CDATA[<h1 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h1><p><code>urllib</code>库是<code>Python</code>中一个最基本的网络请求库。可以模拟浏览器的行为，向指定的服务器发送一个请求，并可以保存服务器返回的数据。</p>
<span id="more"></span>

<h2 id="urlopen函数"><a href="#urlopen函数" class="headerlink" title="urlopen函数"></a>urlopen函数</h2><p>在<code>Python3</code>的<code>urllib</code>库中，所有和网络请求相关的方法，都被集到<code>urllib.request</code>模块下面了，以先来看下<code>urlopen</code>函数基本的使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">resp = request.urlopen(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp.read())</span><br></pre></td></tr></table></figure>

<p><code>urlopen</code>函数参数为：</p>
<ul>
<li><code>url</code>：请求的url。</li>
<li><code>data</code>：请求的data，如果设置了这个值，那么将变成post请求。</li>
</ul>
<p><code>urlopen</code>的返回值是一个<code>http.client.HTTPResponse</code>对象，这个对象是一个类文件句柄对象。有<code>read(size)</code>、<code>readline</code>、<code>readlines</code>以及<code>getcode</code>等方法。</p>
<h2 id="urlretrieve函数"><a href="#urlretrieve函数" class="headerlink" title="urlretrieve函数"></a>urlretrieve函数</h2><p>这个函数可以方便的将网页上的一个文件保存到本地。以下代码可以非常方便的将百度的首页下载到本地：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">request.urlretrieve(<span class="string">&#x27;http://www.baidu.com/&#x27;</span>,<span class="string">&#x27;baidu.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="urlencode函数"><a href="#urlencode函数" class="headerlink" title="urlencode函数"></a>urlencode函数</h2><p>用浏览器发送请求的时候，如果<code>url</code>中包含了中文或者其他特殊字符，那么浏览器会自动的给我们进行编码。而如果使用代码发送请求，那么就必须手动的进行编码，这时候就应该使用<code>urlencode</code>函数来实现。<code>urlencode</code>可以把字典数据转换为<code>URL</code>编码的数据。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;爬虫基础&#x27;</span>,<span class="string">&#x27;greet&#x27;</span>:<span class="string">&#x27;hello world&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">100</span>&#125;</span><br><span class="line">qs = parse.urlencode(data)</span><br><span class="line"><span class="built_in">print</span>(qs)</span><br></pre></td></tr></table></figure>

<h2 id="parse-qs函数"><a href="#parse-qs函数" class="headerlink" title="parse_qs函数"></a>parse_qs函数</h2><p>可以将经过编码后的url参数进行解码。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">qs = <span class="string">&quot;name=%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80&amp;greet=hello+world&amp;age=100&quot;</span></span><br><span class="line"><span class="built_in">print</span>(parse.parse_qs(qs))</span><br></pre></td></tr></table></figure>

<h2 id="urlparse和urlsplit"><a href="#urlparse和urlsplit" class="headerlink" title="urlparse和urlsplit"></a><code>urlparse</code>和<code>urlsplit</code></h2><p>有时候拿到一个url，想要对这个url中的各个组成部分进行分割，那么这时候就可以使用<code>urlparse</code>或者是<code>urlsplit</code>来进行分割。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/s?username=zhiliao&#x27;</span></span><br><span class="line"></span><br><span class="line">result = parse.urlsplit(url)</span><br><span class="line"><span class="comment"># result = parse.urlparse(url)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;scheme:&#x27;</span>,result.scheme)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;netloc:&#x27;</span>,result.netloc)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;path:&#x27;</span>,result.path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;query:&#x27;</span>,result.query)</span><br></pre></td></tr></table></figure>

<p><code>urlparse</code>和<code>urlsplit</code>基本上是一模一样的。唯一不一样的地方是，<code>urlparse</code>里面多了一个<code>params</code>属性，而<code>urlsplit</code>没有这个<code>params</code>属性。比如有一个url为：<code>url = &#39;http://www.baidu.com/s;hello?wd=python&amp;username=abc#1&#39;</code>，那么<code>urlparse</code>可以获取到<code>hello</code>，而<code>urlsplit</code>不可以获取到。<code>url</code>中的<code>params</code>也用得比较少。</p>
<h2 id="request-Request类"><a href="#request-Request类" class="headerlink" title="request.Request类"></a>request.Request类</h2><p>如果想要在请求的时候增加一些请求头，那么就必须使用<code>request.Request</code>类来实现。比如要增加一个<code>User-Agent</code>，示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(<span class="string">&quot;http://www.baidu.com/&quot;</span>,headers=headers)</span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line"><span class="built_in">print</span>(resp.read())</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>urllib</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫笔记04 - 进阶</title>
    <url>/2019/02/21/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B004/</url>
    <content><![CDATA[<h1 id="动态网页数据抓取"><a href="#动态网页数据抓取" class="headerlink" title="动态网页数据抓取"></a>动态网页数据抓取</h1><h2 id="AJAX简介"><a href="#AJAX简介" class="headerlink" title="AJAX简介"></a>AJAX简介</h2><p><code>AJAX（Asynchronouse JavaScript And XML）</code>异步<code>JavaScript</code>和<code>XML</code>。过在后台与服务器进行少量数据交换，<code>Ajax</code> 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用<code>Ajax</code>）如果需要更新内容，必须重载整个网页页面。因为传统的在传输数据格式方面，使用的是<code>XML</code>语法。因此叫做<code>AJAX</code>，其实现在数据交互基本上都是使用<code>JSON</code>。使用<code>AJAX</code>加载的数据，即使使用了<code>JS</code>，将数据渲染到了浏览器中，在右键-&gt;查看网页源代码还是不能看到通过<code>ajax</code>加载的数据，只能看到使用这个<code>url</code>加载的<code>html</code>代码。</p>
<span id="more"></span>

<h2 id="获取ajax数据的方式"><a href="#获取ajax数据的方式" class="headerlink" title="获取ajax数据的方式"></a>获取ajax数据的方式</h2><ol>
<li>直接分析<code>ajax</code>调用的接口。然后通过代码请求这个接口。</li>
<li>使用<code>Selenium+chromedriver</code>模拟浏览器行为获取数据。</li>
</ol>
<table>
<thead>
<tr>
<th>方式</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>分析接口</td>
<td>直接可以请求到数据。不需要做一些解析工作。<br>代码量少，性能高</td>
<td>分析接口比较复杂，特别是一些通过js混淆的接口，<br>要有一定的js功底。容易被发现是爬虫</td>
</tr>
<tr>
<td>selenium</td>
<td>直接模拟浏览器的行为。浏览器能请求到的，<br>使用selenium也能请求到。爬虫更稳定</td>
<td>代码量多。性能低</td>
</tr>
</tbody></table>
<h2 id="Selenium-chromedriver获取动态数据"><a href="#Selenium-chromedriver获取动态数据" class="headerlink" title="Selenium+chromedriver获取动态数据"></a>Selenium+chromedriver获取动态数据</h2><p><code>Selenium</code>相当于是一个机器人。可以模拟人类在浏览器上的一些行为，自动处理浏览器上的一些行为，比如点击，填充数据，删除<code>cookie</code>等。<code>chromedriver</code>是一个驱动<code>Chrome</code>浏览器的驱动程序，使用他才可以驱动浏览器。当然针对不同的浏览器有不同的<code>driver</code>。以下列出了不同浏览器及其对应的<code>driver</code>：</p>
<ol>
<li>Chrome：<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">下载地址</a></li>
<li>Firefox：<a href="https://github.com/mozilla/geckodriver/releases">下载地址</a></li>
<li>Edge：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">下载地址</a></li>
<li>Safari：<a href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/">下载地址</a></li>
</ol>
<h2 id="安装Selenium和chromedriver"><a href="#安装Selenium和chromedriver" class="headerlink" title="安装Selenium和chromedriver"></a>安装Selenium和chromedriver</h2><ol>
<li>安装<code>Selenium</code>：Selenium有很多语言的版本，有java、ruby、python等。我们下载python版本的就可以了。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装<code>chromedriver</code>：下载完成后，放到不需要权限的纯英文目录下就可以了。</li>
</ol>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># chromedriver的绝对路径</span></span><br><span class="line">driver_path = <span class="string">r&#x27;D:\ProgramApp\chromedriver\chromedriver.exe&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化一个driver，并且指定chromedriver的路径</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line"><span class="comment"># 请求网页</span></span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line"><span class="comment"># 通过page_source获取网页源代码</span></span><br><span class="line"><span class="built_in">print</span>(driver.page_source)</span><br><span class="line"></span><br><span class="line">html = etree.HTML(driver.page_source)</span><br><span class="line">html.xpath(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<ol>
<li>如果只是想要解析网页中的数据，那么推荐将网页源代码扔给<code>lxml</code>来解析。因为<code>lxml</code>底层使用的是c语言，所以解析效率会更高。</li>
<li>如果是想要对元素进行一些操作，比如给一个文本框输入值，或者是点击某个按钮，那么就必须使用<code>selenium</code>提供的查找元素的方法。</li>
</ol>
<h1 id="selenium常用操作"><a href="#selenium常用操作" class="headerlink" title="selenium常用操作"></a>selenium常用操作</h1><h2 id="关闭界面"><a href="#关闭界面" class="headerlink" title="关闭界面"></a>关闭界面</h2><ol>
<li><code>driver.close()</code>：关闭当前页面。</li>
<li><code>driver.quit()</code>：退出整个浏览器。</li>
</ol>
<h2 id="定位元素"><a href="#定位元素" class="headerlink" title="定位元素"></a>定位元素</h2><ol>
<li><code>find_element_by_id</code>：根据<code>id</code>来查找某个元素。等价于：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">submitTag = driver.find_element_by_id(<span class="string">&#x27;su&#x27;</span>)</span><br><span class="line">submitTag1 = driver.find_element(By.ID,<span class="string">&#x27;su&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>find_element_by_class_name</code>：根据类名查找元素。 等价于：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">submitTag = driver.find_element_by_class_name(<span class="string">&#x27;su&#x27;</span>)</span><br><span class="line">submitTag1 = driver.find_element(By.CLASS_NAME,<span class="string">&#x27;su&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>find_element_by_name</code>：根据<code>name</code>属性的值来查找元素。等价于：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">submitTag = driver.find_element_by_name(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">submitTag1 = driver.find_element(By.NAME,<span class="string">&#x27;email&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><code>find_element_by_tag_name</code>：根据标签名来查找元素。等价于：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">submitTag = driver.find_element_by_tag_name(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">submitTag1 = driver.find_element(By.TAG_NAME,<span class="string">&#x27;div&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><code>find_element_by_xpath</code>：根据<code>xpath</code>语法来获取元素。等价于：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">submitTag = driver.find_element_by_xpath(<span class="string">&#x27;//div&#x27;</span>)</span><br><span class="line">submitTag1 = driver.find_element(By.XPATH,<span class="string">&#x27;//div&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><code>find_element_by_css_selector</code>：根据<code>css选择器</code>选择元素。等价于：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">submitTag = driver.find_element_by_css_selector(<span class="string">&#x27;//div&#x27;</span>)</span><br><span class="line">submitTag1 = driver.find_element(By.CSS_SELECTOR,<span class="string">&#x27;//div&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>要注意，<code>find_element</code>是获取第一个满足条件的元素。<code>find_elements</code>是获取所有满足条件的元素。</p>
<h2 id="操作表单元素"><a href="#操作表单元素" class="headerlink" title="操作表单元素"></a>操作表单元素</h2><h3 id="操作输入框"><a href="#操作输入框" class="headerlink" title="操作输入框"></a>操作输入框</h3><p>第一步：找到这个元素。<br>第二步：使用<code>send_keys(value)</code>，将数据填充进去。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inputTag = driver.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line">inputTag.send_keys(<span class="string">&#x27;python&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>使用<code>clear</code>方法可以清除输入框中的内容。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inputTag.clear()</span><br></pre></td></tr></table></figure>

<h3 id="操作checkbox"><a href="#操作checkbox" class="headerlink" title="操作checkbox"></a>操作checkbox</h3><p>因为要选中<code>checkbox</code>标签，在网页中是通过鼠标点击的。因此想要选中<code>checkbox</code>标签，那么先选中这个标签，然后执行<code>click</code>事件。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rememberTag = driver.find_element_by_name(<span class="string">&quot;rememberMe&quot;</span>)</span><br><span class="line">rememberTag.click()</span><br></pre></td></tr></table></figure>

<h3 id="选择select"><a href="#选择select" class="headerlink" title="选择select"></a>选择select</h3><p><code>select</code>元素不能直接点击。因为点击后还需要选中元素。这时候<code>selenium</code>就专门为<code>select</code>标签提供了一个类<code>selenium.webdriver.support.ui.Select</code>。将获取到的元素当成参数传到这个类中，创建这个对象。以后就可以使用这个对象进行选择了。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选中这个标签，然后使用Select创建对象</span></span><br><span class="line">selectTag = Select(driver.find_element_by_name(<span class="string">&quot;jumpMenu&quot;</span>))</span><br><span class="line"><span class="comment"># 根据索引选择</span></span><br><span class="line">selectTag.select_by_index(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 根据值选择</span></span><br><span class="line">selectTag.select_by_value(<span class="string">&quot;http://www.95yueba.com&quot;</span>)</span><br><span class="line"><span class="comment"># 根据可视的文本选择</span></span><br><span class="line">selectTag.select_by_visible_text(<span class="string">&quot;95秀客户端&quot;</span>)</span><br><span class="line"><span class="comment"># 取消选中所有选项</span></span><br><span class="line">selectTag.deselect_all()</span><br></pre></td></tr></table></figure>

<h3 id="操作按钮"><a href="#操作按钮" class="headerlink" title="操作按钮"></a>操作按钮</h3><p>操作按钮有很多种方式。比如单击、右击、双击等。这里讲一个最常用的。就是点击。直接调用<code>click</code>函数就可以了。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inputTag = driver.find_element_by_id(<span class="string">&#x27;su&#x27;</span>)</span><br><span class="line">inputTag.click()</span><br></pre></td></tr></table></figure>

<h3 id="行为链"><a href="#行为链" class="headerlink" title="行为链"></a>行为链</h3><p>有时候在页面中的操作可能要有很多步，那么这时候可以使用鼠标行为链类<code>ActionChains</code>来完成。比如现在要将鼠标移动到某个元素上并执行点击事件。那么示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inputTag = driver.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line">submitTag = driver.find_element_by_id(<span class="string">&#x27;su&#x27;</span>)</span><br><span class="line"></span><br><span class="line">actions = ActionChains(driver)</span><br><span class="line">actions.move_to_element(inputTag)</span><br><span class="line">actions.send_keys_to_element(inputTag,<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">actions.move_to_element(submitTag)</span><br><span class="line">actions.click(submitTag)</span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure>

<p>还有更多的鼠标相关的操作。</p>
<ul>
<li><code>click_and_hold(element)</code>：点击但不松开鼠标。</li>
<li><code>context_click(element)</code>：右键点击。</li>
<li><code>double_click(element)</code>：双击。</li>
</ul>
<h2 id="Cookie操作"><a href="#Cookie操作" class="headerlink" title="Cookie操作"></a>Cookie操作</h2><h3 id="获取所有的cookie"><a href="#获取所有的cookie" class="headerlink" title="获取所有的cookie"></a>获取所有的cookie</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> driver.get_cookies():</span><br><span class="line">    <span class="built_in">print</span>(cookie)</span><br></pre></td></tr></table></figure>

<h3 id="根据cookie的key获取value："><a href="#根据cookie的key获取value：" class="headerlink" title="根据cookie的key获取value："></a>根据cookie的key获取value：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">value = driver.get_cookie(key)</span><br></pre></td></tr></table></figure>

<h3 id="删除所有的cookie"><a href="#删除所有的cookie" class="headerlink" title="删除所有的cookie"></a>删除所有的cookie</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.delete_all_cookies()</span><br></pre></td></tr></table></figure>

<h3 id="删除某个cookie："><a href="#删除某个cookie：" class="headerlink" title="删除某个cookie："></a>删除某个cookie：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.delete_cookie(key)</span><br></pre></td></tr></table></figure>

<h2 id="页面等待"><a href="#页面等待" class="headerlink" title="页面等待"></a>页面等待</h2><p>现在的网页越来越多采用了<code>Ajax</code>技术，这样程序便不能确定何时某个元素完全加载出来了。如果实际页面等待时间过长导致某个元素还没出来，但是你的代码直接使用了这个<code>WebElement</code>，那么就会抛出<code>NullPointer</code>的异常。为了解决这个问题。所以<code>Selenium</code>提供了两种等待方式：一种是隐式等待、一种是显式等待。</p>
<h3 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h3><p>调用<code>driver.implicitly_wait</code>。那么在获取不可用的元素之前，会先等待10秒中的时间。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 请求网页</span></span><br><span class="line">driver.get(<span class="string">&quot;https://www.douban.com/&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="显示等待"><a href="#显示等待" class="headerlink" title="显示等待"></a>显示等待</h3><p>显示等待是表明某个条件成立后才执行获取元素的操作。也可以在等待的时候指定一个最大的时间，如果超过这个时间那么就抛出一个异常。显示等待应该使用<code>selenium.webdriver.support.excepted_conditions</code>期望的条件和<code>selenium.webdriver.support.ui.WebDriverWait</code>来配合完成。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;http://somedomain/url_that_delays_loading&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    element = WebDriverWait(driver, <span class="number">10</span>).until(</span><br><span class="line">        EC.presence_of_element_located((By.ID, <span class="string">&quot;myDynamicElement&quot;</span>))</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure>

<p>一些其他的等待条件：</p>
<ul>
<li><code>presence_of_element_located</code>：某个元素已经加载完毕了。</li>
<li><code>presence_of_all_emement_located</code>：网页中所有满足条件的元素都加载完毕了。</li>
<li><code>element_to_be_cliable</code>：某个元素是可以点击了。</li>
</ul>
<h2 id="切换页面"><a href="#切换页面" class="headerlink" title="切换页面"></a>切换页面</h2><p>有时候窗口中有很多子<code>tab</code>页面。这时候肯定是需要进行切换的。<code>selenium</code>提供了一个叫做<code>switch_to_window</code>来进行切换，具体切换到哪个页面，可以从<code>driver.window_handles</code>中找到。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开一个新的页面</span></span><br><span class="line">self.driver.execute_script(<span class="string">&quot;window.open(&#x27;&quot;</span>+url+<span class="string">&quot;&#x27;)&quot;</span>)</span><br><span class="line"><span class="comment"># 切换到这个新的页面中</span></span><br><span class="line">self.driver.switch_to_window(self.driver.window_handles[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<h2 id="设置代理ip"><a href="#设置代理ip" class="headerlink" title="设置代理ip"></a>设置代理ip</h2><p>有时候频繁爬取一些网页。服务器发现你是爬虫后会封掉你的ip地址。这时候我们可以更改代理ip。更改代理ip，不同的浏览器有不同的实现方式。这里以Chrome浏览器为例来讲解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">&quot;--proxy-server=http://110.73.2.248:8123&quot;</span>)</span><br><span class="line">driver_path = <span class="string">r&quot;D:\ProgramApp\chromedriver\chromedriver.exe&quot;</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path,chrome_options=options)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&#x27;http://httpbin.org/ip&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="WebElement元素："><a href="#WebElement元素：" class="headerlink" title="WebElement元素："></a>WebElement元素：</h2><p><code>from selenium.webdriver.remote.webelement import WebElement</code>类是每个获取出来的元素的所属类。<br>有一些常用的属性：</p>
<ul>
<li><code>get_attribute</code>：这个标签的某个属性的值。</li>
<li><code>screentshot</code>：获取当前页面的截图。这个方法只能在<code>driver</code>上使用。</li>
</ul>
<p><code>driver</code>的对象类，也是继承自<code>WebElement</code>。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>爱情来的太迟</title>
    <url>/2021/07/27/%E7%88%B1%E6%83%85%E6%9D%A5%E7%9A%84%E5%A4%AA%E8%BF%9F/</url>
    <content><![CDATA[<ol>
<li><p>爱情来的太迟，再来的人已经看不见我当初的美好和倔强，分享不了我年轻的愿望。<br>如果再迟些，也将错过我的青春和柔情，触碰不到我年轻的神态以及柔软的微笑，感受不到我如今炙热、生动并且强烈的情感</p>
</li>
<li><p>千里迢迢背井离乡，下了火车正是傍晚，万家灯火，没有一盏是为我点亮</p>
</li>
<li><p>我希望你别难过太久，希望你以后也能吃很多饭，希望你不要回头看我，希望你那晴天很多，希望你每天都能睡得熟，希望我们即使偶尔想念彼此也不要再问候，希望你走得越远就有更好的风景。希望，一别两宽，各生欢喜</p>
</li>
</ol>
<span id="more"></span>

<ol start="4">
<li><p>哪里会有人喜欢孤独，不过是不喜欢失望罢了     ——《挪威的森林》</p>
</li>
<li><p>后来我终于知道，它并不是我的花，我只是恰好途经了它的盛放</p>
</li>
<li><p>最甜的蜜糖，可以使味觉麻木。不太热烈的爱情才能维持久远       ——莎士比亚</p>
</li>
<li><p>爱情就像瓶子里的酒，倒一次少一点，直至倒完，却不会再生</p>
</li>
<li><p>我愿此生心里都有阳光。如果有多余的，再分给别人一点</p>
</li>
<li><p>为天地立心，为生民立命，为往圣继绝学，为万世开太平</p>
</li>
<li><p>某天，你无端端想起一个人，她曾让你对明天有所期许，但她却完完全全没有出现在你的明天里</p>
</li>
<li><p>我无法控制自己对你的难以忘怀，可是我关于你的一切已经再没有了期待</p>
</li>
<li><p>与恶龙缠斗过久，自身亦成恶龙；凝视深渊过久，深渊将回以凝视      ——尼采</p>
</li>
<li><p>上帝没有那么好心，不可能送给你一个你完全喜欢的人。合适的人不是靠遇见的，是上帝给足够成熟，愿意付出和相互改变的两个人的真贵的礼物。像榫和卯，没天生的，都是雕刻和彼此痛苦的改变之后的一种契合</p>
</li>
<li><p>其实，一段刻骨铭心的爱情有两个步骤。一是遇见，二是相处。遇见需要缘分，相处需要智慧</p>
</li>
<li><p>人事在世如身处荆棘之中，心不动，人不妄动，不动则不伤；如心动则人妄动，伤其身痛其骨，于是体会到世间诸般痛苦</p>
</li>
<li><p>对一个你明知道他喜欢你，而你又不喜欢他的人，请记得至少做到，不要在寂寞的时候找他。这是对感情的尊重，也是对别人的放过</p>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>那时候爱上一个人</title>
    <url>/2021/08/14/%E9%82%A3%E6%97%B6%E5%80%99%E7%88%B1%E4%B8%8A%E4%B8%80%E4%B8%AA%E4%BA%BA/</url>
    <content><![CDATA[<ol>
<li><p>老了，就是对身边的事情逐渐习以为常       ——茨威格</p>
</li>
<li><p>那时候爱上一个人不是因为你有车有房，而是那天下午阳光很好，你穿了一件白衬衣</p>
</li>
<li><p>我是一个不愿意给别人添麻烦的人</p>
</li>
</ol>
<span id="more"></span>

<ol start="4">
<li><p>不管你对多少异性失望，你都没有理由对爱情失望。因为爱情本身就是希望，永远是生命的一种希望。爱情是你自己的品质，是你自己的心魄，是你自己的处境，与别人无关     ——史铁生</p>
</li>
<li><p>一个人的性格决定他的际遇。如果你喜欢保持你的性格，那么你就无权拒绝你的际遇       ——罗曼·罗兰</p>
</li>
<li><p>那一刻，我有些淡淡的心酸</p>
</li>
<li><p>世间最难得的事是，恰好在这个时间，你喜欢我，我也喜欢你</p>
</li>
<li><p>从来都是因为不爱，我们才敢肆无忌惮</p>
</li>
<li><p>爱情就是因为有人把你视若珍宝费劲心机才会这样动人</p>
</li>
<li><p>如果少年时代听得进过来人的建议，那少年便不为少年，世间也不再会有那么多重复的烦恼</p>
</li>
<li><p>你怕不怕，你一个转身，你最亲的人就跟你擦肩而过，再也不能见了呢？</p>
</li>
<li><p>我以为我的眼里会出现别人，但除了她再也没有别人了</p>
</li>
<li><p>在其位，谋其职</p>
</li>
<li><p>世界是道德的世界，人却非道德之人    ——尼采</p>
</li>
<li><p>我赢了全世界又如何？偏偏负了你</p>
</li>
<li><p>质量是设计制造出来的，不是检验出来的。如果能关注每一个细节，就可以实现零缺陷的目标</p>
</li>
<li><p>凡有的，还要加给他，叫他有余；没有的，连他所有的也要夺过来      ——《圣经·马太福音》</p>
</li>
<li><p>天之道，损有余而补不足；人之道则不然，损不足以奉有余        ——《道德经》</p>
</li>
<li><p>有些人注定是要一生孤独的</p>
</li>
<li><p>看尽世间悲凉，更感人生可贵</p>
</li>
<li><p>表虽已枯，其心不灭</p>
</li>
<li><p>为政以德，譬如北辰，居其所而众星共之    ——孔子</p>
</li>
<li><p>七月繁花夏中央，晴丝千尺挽韶光</p>
</li>
<li><p>看清这个世界，然后爱她      ——罗曼·罗兰</p>
</li>
<li><p>情之所钟，心之所梦</p>
</li>
<li><p>我不是归人，只是过客</p>
</li>
<li><p>当你们出门，到世界上去走走，不要忘了，手拉手紧挨在一起</p>
</li>
<li><p>陌路伊始，相爱无期</p>
</li>
<li><p>道路是曲折的，但前途是光明的</p>
</li>
<li><p>安好，勿念，各自精彩</p>
</li>
<li><p>The world is small and the city is big.People who lack for luck would not see one another again for the rest of life.<br>世界很小，城市很大，欠缺缘分的人也许终生也不会再见了。</p>
</li>
<li><p>这个世界很小，我们就这样遇见。这个世界很大，分开就很难再见</p>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>django笔记03 - 模板</title>
    <url>/2019/01/14/django%E7%AC%94%E8%AE%B003/</url>
    <content><![CDATA[<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p>模板放在根目录的<code>templates</code>文件夹下，如果找不到可能要修改<code>settings.py</code>文件，具体的之后再说</p>
<h2 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h2><ol>
<li><code>render_to_string</code></li>
</ol>
<p>将模板编译后，渲染成python的字符串格式，最后通过<code>HttpResponse</code>类包装成一个<code>HttpResponse</code>对象返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template.loader <span class="keyword">import</span> render_to_string</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    html = render_to_string(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>render</code>更简单</li>
</ol>
<p>将模板渲染成字符串和包装成HttpResponse对象一部到位完成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="模板查找路径"><a href="#模板查找路径" class="headerlink" title="模板查找路径"></a>模板查找路径</h2><p><code>settings.py</code>文件的<code>templates</code>部分进行配置</p>
<ol>
<li><p><code>DIRS</code>列表：，在这个列表中可以存放所有的模板路径，以后在视图中使用render或者render_to_string渲染模板的时候，会在这个列表的路径中查找模板</p>
</li>
<li><p><code>APP_DIRS</code>：默认为<code>True</code>，这个设置为<code>True</code>后，会在<code>INSTALLED_APPS</code>（已安装的APP）下的<code>templates</code>文件夹中查找模板，文件夹名必须为<code>templates</code></p>
</li>
<li><p>查找顺序：优先级为，<code>DIRS</code>-&gt; 当前APP的<code>templates</code>文件夹-&gt; 其它<code>INSTALLED_APPS</code>的<code>templates</code>文件夹。比如代码render(‘list.html’)。先会在DIRS这个列表中依次查找路径下有没有这个模板，如果有，就返回。如果DIRS列表中所有的路径都没有找到，那么会先检查当前这个视图所处的app是否已经安装，如果已经安装了，那么就先在当前这个app下的templates文件夹中查找模板，如果没有找到，那么会在其他已经安装了的app中查找。如果所有路径下都没有找到，那么会抛出一个TemplateDoesNotExist的异常。</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&quot;templates&quot;</span>)],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="模板变量"><a href="#模板变量" class="headerlink" title="模板变量"></a>模板变量</h2><ol>
<li>视图中，以字典的形式传入模板</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, context=context) <span class="comment">#context是字典</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在模板中使用变量，以<code>{{ 变量 }}</code>的形式</li>
<li>访问对象的属性，通过<code>对象.属性名</code>来访问，如访问<code>person</code>对象的<code>username</code>属性，通过<code>person.username</code></li>
<li>访问字典的<code>key</code>对应的<code>value</code>，通过<code>字典.key</code>的方式访问，不能通过中括号<code>[]</code>的形式访问，不能使用字典本身的属性名作为<code>key</code>，防止自身属性被忽略，无法访问</li>
<li>列表和元组，同样使用点<code>.</code>的方式访问，不能通过中括号<code>[]</code>，<code>{{ person.0 }}</code></li>
</ol>
<h2 id="模板标签"><a href="#模板标签" class="headerlink" title="模板标签"></a>模板标签</h2><h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a><code>if</code>标签</h3><ol>
<li>所有的标签都是在<code>{% %}</code>之间</li>
<li><code>if</code>标签有闭合标签，<code>{% endif %}</code></li>
<li><code>if</code>标签的判断运算符，与<code>python</code>相同，<code>==、!=、&lt;、&lt;=、&gt;、&gt;=、in、not in、is、is not</code>等</li>
<li>还可以使用<code>elif</code>,<code>else</code>等标签</li>
</ol>
<h3 id="for-in-标签"><a href="#for-in-标签" class="headerlink" title="for...in...标签"></a><code>for...in...</code>标签</h3><p>类似于<code>Python</code>中的<code>for...in...</code>。可以遍历列表、元组、字符串、字典等一切可以遍历的对象。<br>没有<code>continue</code>和<code>break</code>语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> person <span class="keyword">in</span> persons %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; person.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>如果想要反向遍历，那么在遍历的时候就加上一个<code>reversed</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> person <span class="keyword">in</span> persons <span class="built_in">reversed</span> %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; person.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>遍历字典的时候，需要使用<code>items</code>、<code>keys</code>和<code>values</code>等方法。在DTL中，执行一个方法不能使用圆括号的形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> key,value <span class="keyword">in</span> person.items %&#125;</span><br><span class="line">    &lt;p&gt;key：&#123;&#123; key &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;value：&#123;&#123; value &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>for</code>循环中，DTL提供了一些变量可供使用。这些变量如下：</p>
<ul>
<li><code>forloop.counter</code>：当前循环的下标。以1作为起始值。</li>
<li><code>forloop.counter0</code>：当前循环的下标。以0作为起始值。</li>
<li><code>forloop.revcounter</code>：当前循环的反向下标值。比如列表有5个元素，那么第一次遍历这个属性是等于5，第二次是4，以此类推。并且是以1作为最后一个元素的下标。</li>
<li><code>forloop.revcounter0</code>：类似于<code>forloop.revcounter</code>。不同的是最后一个元素的下标是从0开始。</li>
<li><code>forloop.first</code>：是否是第一次遍历。</li>
<li><code>forloop.last</code>：是否是最后一次遍历。</li>
<li><code>forloop.parentloop</code>：如果有多个循环嵌套，那么这个属性代表的是上一级的for循环。</li>
</ul>
<h4 id="for…in…empty标签"><a href="#for…in…empty标签" class="headerlink" title="for…in…empty标签"></a>for…in…empty标签</h4><p>这个标签使用跟<code>for...in...</code>是一样的，只不过是在遍历的对象如果没有元素的情况下，会执行empty中的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> person <span class="keyword">in</span> persons %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; person &#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;% empty %&#125;</span><br><span class="line">    暂时还没有任何人</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="with标签"><a href="#with标签" class="headerlink" title="with标签"></a>with标签</h3><ol>
<li>在模板中，通过<code>with</code>语句来定义变量</li>
<li><code>with</code>语句有两种使用方式，一种是<code>with xx=xxx</code>的形式（<code>=</code>左右没有空格），第二种是<code>with xxx as xx</code>的形式</li>
<li>定义的变量只能在with语句块中使用，在<code>with</code>语句块外面取不到这个变量</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">with</span> person<span class="number">.0</span>  <span class="keyword">as</span> zs %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; zs &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; zs &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; zs &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="url标签"><a href="#url标签" class="headerlink" title="url标签"></a>url标签</h3><p>在模版中，我们经常要写一些url，比如某个a标签中需要定义href属性。通过硬编码的方式直接将这个url写死的话，对于以后项目维护不方便。因此建议使用这种反转的方式来实现，类似于django中的reverse一样</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;% url &#x27;book:list&#x27; %&#125;&quot;&gt;图书列表页面&lt;/a&gt;  #book可能是app名，或命名空间的名，有待验证。一般直接写name就好</span><br></pre></td></tr></table></figure>

<p>如果<code>url</code>反转的时候需要传递参数，那么可以在后面传递。但是参数分位置参数和关键字参数。位置参数和关键字参数不能同时使用</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># path部分</span></span><br><span class="line">path(<span class="string">&#x27;detail/&lt;book_id&gt;/&#x27;</span>,views.book_detail,name=<span class="string">&#x27;detail&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># url反转，使用位置参数</span></span><br><span class="line">&lt;a href=&quot;&#123;% url &#x27;book:detail&#x27; 1 %&#125;&quot;&gt;图书详情页面&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># url反转，使用关键字参数</span></span><br><span class="line">&lt;a href=&quot;&#123;% url &#x27;book:detail&#x27; book_id=1 %&#125;&quot;&gt;图书详情页面&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>如果想要在使用<code>url</code>标签反转的时候要传递查询字符串的参数，那么必须要手动在在后面添加</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;% url &#x27;book:detail&#x27; book_id=1 %&#125;?page=1&quot;&gt;图书详情页面&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>如果需要传递多个参数，那么通过空格的方式进行分隔</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;% url &#x27;book:detail&#x27; book_id=1 page=2 %&#125;&quot;&gt;图书详情页面&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="autosecape标签"><a href="#autosecape标签" class="headerlink" title="autosecape标签"></a>autosecape标签</h3><ol>
<li>模板中默认开启自动转义。自动转义是可以将一些特殊的字符,转义成html语法能识别的字符，比如<code>&lt;</code>会被转义成<code>&amp;lt</code>，而<code>&gt;</code>会被自动转义成<code>&amp;gt</code>。</li>
<li>如果变量确实是可信任的，可以使用<code>autoescape</code>标签来关掉自动转义</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% autoescape off %&#125;</span><br><span class="line">    &#123;% info %&#125;</span><br><span class="line">&#123;%  endautoescape %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="verbatim标签："><a href="#verbatim标签：" class="headerlink" title="verbatim标签："></a>verbatim标签：</h3><p>默认在DTL模板中是会去解析那些特殊字符的。比如<code>{%</code>和<code>%}</code>以及`{{`等。如果你在某个代码片段中不想使用DTL的解析引擎。那么你可以把这个代码片段放在`verbatim`标签中

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% verbatim %&#125;</span><br><span class="line">    &#123;&#123;<span class="keyword">if</span> dying&#125;&#125;Still alive.&#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line">&#123;% endverbatim %&#125;</span><br></pre></td></tr></table></figure>

## 模板过滤器

在模版中，有时候需要对一些数据进行处理以后才能使用。一般在Python中我们是通过函数的形式来完成的。DTL中，不支持函数的调用形式'()'，需要通过过滤器来实现的，而过滤器其实就是一个函数，可以对需要的参数进行处理，并且还可以额外接受一个参数（即最多有两个参数）。过滤器使用的是`|`来使用。

### add过滤器

将传进来的参数添加到原来的值上面。这个过滤器会尝试将值和参数转换成整形然后进行相加。如果转换成整形过程中失败了，那么会将值和参数进行拼接。如果是字符串，那么会拼接成字符串，如果是列表，那么会拼接成一个列表。

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value|add:<span class="string">&quot;2&quot;</span> &#125;&#125;</span><br></pre></td></tr></table></figure>

如果`value`是等于4，那么结果将是6。如果`value`是等于一个普通的字符串，比如`abc`，那么结果将是`abc2`。`add`过滤器的源代码如下：

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">value, arg</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add the arg to the value.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(value) + <span class="built_in">int</span>(arg)</span><br><span class="line">    <span class="keyword">except</span> (ValueError, TypeError):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> value + arg</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

### cut过滤器

移除值中所有指定的字符串。类似于`python`中的`replace(args,"")`

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value|cut:<span class="string">&quot; &quot;</span> &#125;&#125;</span><br></pre></td></tr></table></figure>

以上示例将会移除value中所有的空格字符。cut过滤器的源代码如下：

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut</span>(<span class="params">value, arg</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Remove all values of arg from the given string.&quot;&quot;&quot;</span></span><br><span class="line">    safe = <span class="built_in">isinstance</span>(value, SafeData)</span><br><span class="line">    value = value.replace(arg, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> safe <span class="keyword">and</span> arg != <span class="string">&#x27;;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> mark_safe(value)</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure>

### date过滤器

将一个日期按照指定的格式，格式化成字符串

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据</span></span><br><span class="line">context = &#123;</span><br><span class="line">    <span class="string">&quot;birthday&quot;</span>: datetime.now()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模版</span></span><br><span class="line">&#123;&#123; birthday|date:<span class="string">&quot;Y/m/d&quot;</span> &#125;&#125;</span><br></pre></td></tr></table></figure>

那么将会输出2018/02/01。其中`Y`代表的是四位数字的年份，`m`代表的是两位数字的月份，`d`代表的是两位数字的日

| 格式字符 | 描述 | 示例 |
| :------: | :------: | :------: |
| Y | 四位数字的年份 | 2018 |
| m | 两位数字的月份 | 01-12 |
| n | 月份，1-9前面没有0前缀 | 1-12 |
| d | 两位数字的天 | 01-31 |
| j | 天，但是1-9前面没有0前缀 | 1-31 |
| g | 小时，12小时格式的，1-9前面没有0前缀 | 1-12 |
| h | 小时，12小时格式的，1-9前面有0前缀 | 01-12 |
| G | 小时，24小时格式的，1-9前面没有0前缀 | 1-23 |
| H | 小时，24小时格式的，1-9前面有0前缀 | 01-23 |
| i | 分钟，1-9前面有0前缀 | 00-59 |
| s | 秒，1-9前面有0前缀 | 00-59 |

### default过滤器

如果值被评估为False。比如`[]`，`""`，`None`，`{}`等这些在`if`判断中为`False`的值，都会使用`default`过滤器提供的默认值。示例代码如下：

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value|default:<span class="string">&quot;nothing&quot;</span> &#125;&#125;</span><br></pre></td></tr></table></figure>

如果`value`是等于一个空的字符串。比如`""`，那么以上代码将会输出`nothing`

### default_if_none

如果值是`None`，那么将会使用`default_if_none`提供的默认值。这个和`default`有区别，`default`是所有被评估为`False`的都会使用默认值。而`default_if_none`则只有这个值是等于`None`的时候才会使用默认值。示例代码如下：

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value|default_if_none:<span class="string">&quot;nothing&quot;</span> &#125;&#125;</span><br></pre></td></tr></table></figure>

如果`value`是等于`""`即空字符串，那么以上会输出空字符串。如果`value`是一个`None`值，以上代码才会输出`nothing`

### first

返回列表/元组/字符串中的第一个元素

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value|first &#125;&#125;</span><br></pre></td></tr></table></figure>

如果`value`是等于`['a','b','c']`，那么输出将会是`a`

### last

返回列表/元组/字符串中的最后一个元素

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value|last &#125;&#125;</span><br></pre></td></tr></table></figure>

如果`value`是等于`['a','b','c']`，那么输出将会是`c`

### floatformat

使用四舍五入的方式格式化一个浮点类型。如果这个过滤器没有传递任何参数。那么只会在小数点后保留一个小数，如果小数后面全是0，那么只会保留整数。当然也可以传递一个参数，标识具体要保留几个小数。

1. 没有传递参数

| value | 模版代码 | 输出 |
| --- | --- | --- |
| 34.23234 | {{ value\|floatformat }} | 34.2 |<br>| 34.000 | {{ value\|floatformat }} | 34 |<br>| 34.260 | {{ value\|floatformat }} | 34.3 |</p>
<ol start="2">
<li>传递参数</li>
</ol>
<table>
<thead>
<tr>
<th>value</th>
<th>模版代码</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td>34.23234</td>
<td>{{value\|floatformat:3}}</td>
<td>34.232</td>
</tr>
<tr>
<td>34.0000</td>
<td>{{value\|floatformat:3}}</td>
<td>34.000</td>
</tr>
<tr>
<td>34.26000</td>
<td>{{value\|floatformat:3}}</td>
<td>34.260</td>
</tr>
</tbody></table>
<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>类似与<code>Python</code>中的<code>join</code>，将列表/元组/字符串用指定的字符进行拼接。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value|join:<span class="string">&quot;/&quot;</span> &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>如果<code>value</code>是等于<code>[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</code>，那么以上代码将输出<code>a/b/c</code>。</p>
<h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>获取一个列表/元组/字符串/字典的长度。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value|length &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>如果<code>value</code>是等于<code>[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</code>，那么以上代码将输出<code>3</code>。如果<code>value</code>为<code>None</code>，那么以上将返回<code>0</code>。</p>
<h3 id="lower"><a href="#lower" class="headerlink" title="lower"></a>lower</h3><p>将值中所有的字符全部转换成小写。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value|lower &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>如果value是等于Hello World。那么以上代码将输出hello world。</p>
<h3 id="upper"><a href="#upper" class="headerlink" title="upper"></a>upper</h3><p>类似于<code>lower</code>，只不过是将指定的字符串全部转换成大写。</p>
<h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><p>在被给的列表/字符串/元组中随机的选择一个值。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value|random &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>如果<code>value</code>是等于<code>[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</code>，那么以上代码会在列表中随机选择一个。</p>
<h3 id="safe"><a href="#safe" class="headerlink" title="safe"></a>safe</h3><p>标记一个字符串是安全的。也即会关掉这个字符串的自动转义。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;value|safe&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>如果value是一个不包含任何特殊字符的字符串，比如<code>&lt;a&gt;</code>这种，那么以上代码就会把字符串正常的输入。如果<code>value</code>是一串html代码，那么以上代码将会把这个html代码渲染到浏览器中。</p>
<h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>类似于Python中的切片操作。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; some_list|<span class="built_in">slice</span>:<span class="string">&quot;2:&quot;</span> &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码将会给<code>some_list</code>从<code>2</code>开始做切片操作。</p>
<h3 id="stringtags"><a href="#stringtags" class="headerlink" title="stringtags"></a>stringtags</h3><p>删除字符串中所有的<code>html</code>标签。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value|striptags &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>如果<code>value</code>是<code>&lt;strong&gt;hello world&lt;/strong&gt;</code>，那么以上代码将会输出<code>hello world</code>。</p>
<h3 id="truncatechars"><a href="#truncatechars" class="headerlink" title="truncatechars"></a>truncatechars</h3><p>如果给定的字符串长度超过了过滤器指定的长度。那么就会进行切割，并且会拼接三个点来作为省略号。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value|truncatechars:<span class="number">5</span> &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>如果<code>value</code>是等于<code>北京欢迎您~</code>，那么输出的结果是<code>北京...</code>。可能你会想，为什么不会<code>北京欢迎您...</code>呢。因为三个点也占了三个字符，所以<code>北京</code>+三个点的字符长度就是5。</p>
<h3 id="truncatechars-html"><a href="#truncatechars-html" class="headerlink" title="truncatechars_html"></a>truncatechars_html</h3><p>类似于<code>truncatechars</code>，只不过是不会切割<code>html</code>标签。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value|truncatechars_html:<span class="number">5</span> &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>如果<code>value</code>是等于<code>&lt;p&gt;北京欢迎您~&lt;/p&gt;</code>，那么输出将是<code>&lt;p&gt;北京...&lt;/p&gt;</code></p>
<h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><ol>
<li>首先在某个app中，创建一个python包，名为<code>templatetags</code>，必须是这个名，不然找不到。</li>
<li>在<code>templatetags</code>包下面，创建一个python文件来存储过滤器</li>
<li>自定义的过滤器（也就是函数），这个函数的第一个参数永远是被过滤的那个值，还可以再定义另一个参数，过滤器最多只有2个参数</li>
<li>写完过滤器（函数）后，要使用<code>django.template.Library.filter</code>进行注册</li>
<li>将过滤器所在的app添加到<code>settings.py</code>的<code>INSTALLED_APPS</code>列表中，不然Django也找不到这个过滤器</li>
<li>在模板中使用<code>load</code>标签加载过滤器所在的python文件，就可以用了</li>
<li><code>django.template.Library.filter</code>还可以当做装饰器来使用，如果<code>filter</code>函数没有传递参数，默认使用函数名字作为过滤器名字，也可以传递<code>name</code>参数作为过滤器名字</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 某app的templatetags文件夹下的my_fliter.py文件</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"></span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.filter(<span class="params"><span class="string">&#x27;my_greet&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">value, word</span>):</span></span><br><span class="line">    <span class="keyword">return</span> value + word</span><br><span class="line"></span><br><span class="line"><span class="comment">#register.filter(&#x27;greet&#x27;, greet)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板文件 --&gt;</span></span><br><span class="line">&#123;% load my_fliter %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123; value|greet:&#x27; 你好&#x27; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="模板结构优化"><a href="#模板结构优化" class="headerlink" title="模板结构优化"></a>模板结构优化</h2><h3 id="include标签"><a href="#include标签" class="headerlink" title="include标签"></a>include标签</h3><ol>
<li>重复使用的模板代码，可以单独抽取出来，用到的地方使用<code>include</code>调用</li>
<li><code>include</code>的模板，可以直接使用当前模板传递进来的变量。也可以使用<code>with xx=xxx</code>传递参数</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% include <span class="string">&#x27;header.html&#x27;</span> <span class="keyword">with</span> username=<span class="string">&#x27;John&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><p>在前端页面开发中。有些代码是需要重复使用的。这种情况可以使用include标签来实现。也可以使用另外一个比较强大的方式来实现，那就是模版继承。模版继承类似于Python中的类，在父类中可以先定义好一些变量和方法，然后在子类中实现。模版继承也可以在父模版中先定义好一些子模版需要用到的代码，然后子模版直接继承就可以了。并且因为子模版肯定有自己的不同代码，因此可以在父模版中定义一个block接口，然后子模版再去实现。以下是父模版的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;style.css&#x27; %&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;我的站点&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">        &#123;% block sidebar %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/blog/&quot;</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个模版，我们取名叫做base.html，定义好一个简单的html骨架，然后定义好两个block接口，让子模版来根据具体需求来实现。子模板然后通过extends标签来实现，示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% extends <span class="string">&quot;base.html&quot;</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;博客列表&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &#123;% <span class="keyword">for</span> entry <span class="keyword">in</span> blog_entries %&#125;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; entry.title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; entry.body &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li><code>extends</code>标签必须放在模版的第一行。</li>
<li>子模板中的代码必须放在<code>block</code>中，否则将不会被渲染。</li>
</ul>
<p><code>block</code>默认会覆盖父模板的内容，如果在某个<code>block</code>中需要使用父模版的内容，那么可以使用<code>{{block.super}}</code>来继承。比如上例，<code>{%block title%}</code>，如果想要使用父模版的title，那么可以在子模版的<code>title block</code>中使用<code>{{ block.super }}</code>来实现。</p>
<p>在定义<code>block</code>的时候，除了在<code>block</code>开始的地方定义这个<code>block</code>的名字，还可以在<code>block</code>结束的时候定义名字。比如<code>{% block title %}{% endblock title %}</code>。这在大型模版中显得尤其有用，能让你快速的看到<code>block</code>包含在哪里。</p>
<h2 id="加载静态文件"><a href="#加载静态文件" class="headerlink" title="加载静态文件"></a>加载静态文件</h2><p>在一个网页中，不仅仅只有一个<code>html</code>骨架，还需要<code>css</code>样式文件，<code>js</code>执行文件以及一些图片等。因此在<code>DTL</code>中加载静态文件是一个必须要解决的问题。在DTL中，使用<code>static</code>标签来加载静态文件。要使用<code>static</code>标签，首先需要<code>{% load static %}</code>。加载静态文件的步骤如下：</p>
<ol>
<li>首先确保<code>django.contrib.staticfiles</code>已经添加到<code>settings.INSTALLED_APPS</code>中。（默认有）</li>
<li>确保在<code>settings.py</code>中设置了<code>STATIC_URL</code>。（默认有）</li>
<li>在已经安装了的<code>app</code>下创建一个文件夹叫做<code>static</code>，然后再在这个<code>static</code>文件夹下创建一个当前<code>app</code>的名字的文件夹，再把静态文件放到这个文件夹下。例如你的<code>app</code>叫做<code>book</code>，有一个静态文件叫做<code>zhiliao.jpg</code>，那么路径为<code>book/static/book/zhiliao.jpg</code>。创建<code>app</code>同名文件夹的目的是，避免多个<code>app</code>的静态文件名相同，调用时发生混淆。</li>
<li>如果有一些静态文件是不和任何<code>app</code>挂钩的。那么可以在<code>settings.py</code>中添加<code>STATICFILES_DIRS</code>，以后DTL就会在这个列表的路径中查找静态文件。比如可以设置为</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根目录下，与templates同级</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">&quot;static&quot;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在模版中使用<code>load</code>标签加载<code>static</code>标签。比如要加载在项目的<code>static</code>文件夹下的<code>style.css</code>的文件。那么示例代码如下：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;style.css&#x27; %&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>如果不想每次在模版中加载静态文件都使用<code>load</code>加载<code>static</code>标签，那么可以在<code>settings.py</code>中的<code>TEMPLATES/OPTIONS</code>添加<code>&#39;builtins&#39;:[&#39;django.templatetags.static&#39;]</code>，这样以后在模版中就可以直接使用<code>static</code>标签，而不用手动的<code>load</code>了。</p>
</li>
<li><p>如果没有在<code>settings.INSTALLED_APPS</code>中添加<code>django.contrib.staticfiles</code>。那么我们就需要手动的将请求静态文件的<code>url</code>与静态文件的路径进行映射了。很少用到。示例代码如下：</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 其他的url映射</span></span><br><span class="line">] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>恋爱咨询记录</title>
    <url>/2022/11/05/%E6%81%8B%E7%88%B1%E5%92%A8%E8%AF%A2%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a394982f5d7585949953bc10fa37652a192894e9b274bc61249b4020d757b86f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>DoDo好想恋爱小组</category>
      </categories>
      <tags>
        <tag>DoDo好想恋爱小组</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫笔记 - scrapy</title>
    <url>/2019/02/17/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="安装scrapy框架"><a href="#安装scrapy框架" class="headerlink" title="安装scrapy框架"></a>安装<code>scrapy</code>框架</h1><ol>
<li>安装<code>scrapy</code>：<code>pip install scrapy</code></li>
<li>windows下，还需要安装<code>pypiwin32</code>，防止报错。<code>pip install scrapy</code>。报<code>Visual C++ 14.0 is required</code>错误的话，安装<code>Visual C++ Build Tools</code>，<a href="https://blogs.msdn.microsoft.com/pythonengineering/2016/04/11/unable-to-find-vcvarsall-bat/">Visual C++ Build Tools 2015下载地址</a>，下载链接在网页的中间位置</li>
</ol>
<h1 id="创建项目和爬虫"><a href="#创建项目和爬虫" class="headerlink" title="创建项目和爬虫"></a>创建项目和爬虫</h1><ol>
<li>创建项目：<code>scapy startproject [项目名称]</code></li>
<li>创建爬虫：命令行下，进入项目所在的路径，执行命令<code>scapy genspider [爬虫名字] [爬取的域名]</code>。注意：爬虫的名字不能和项目名字一样。</li>
</ol>
<span id="more"></span>

<h1 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h1><ol>
<li><code>items.py</code>：用来存放爬虫爬取下来数据的模型。</li>
<li><code>middlewares.py</code>：用来存放各种中间件的文件。</li>
<li><code>pipelines.py</code>：用来将items的模型存储到本地磁盘中。</li>
<li><code>settings.py</code>：本爬虫的一些配置信息（比如请求头、多久发送一次请求、ip代理池等）。</li>
<li><code>scrapy.cfg</code>：项目的配置文件。</li>
<li><code>spiders包</code>：以后所有的爬虫，都是存放到这个里面。</li>
</ol>
<h1 id="修改settings-py代码"><a href="#修改settings-py代码" class="headerlink" title="修改settings.py代码"></a>修改<code>settings.py</code>代码</h1><p>在做一个爬虫之前，一定要记得修改<code>setttings.py</code>中的设置。两个地方是强烈建议设置的。</p>
<ol>
<li><code>ROBOTSTXT_OBEY</code>设置为<code>False</code>。默认是<code>True</code>。即遵守机器协议，那么在爬虫的时候，<code>scrapy</code>首先去找<code>robots.txt</code>文件，如果没有找到。则直接停止爬取。</li>
<li><code>DEFAULT_REQUEST_HEADERS</code>添加<code>User-Agent</code>。这个也是告诉服务器，我这个请求是一个正常的请求，不是一个爬虫。</li>
<li>如果要激活<code>pipeline</code>，应该在<code>settings.py</code>中，设置<code>ITEM_PIPELINES</code>。</li>
<li>设置延时时间，<code>DOWNLOAD_DELAY = 1</code></li>
</ol>
<h1 id="运行scrapy项目"><a href="#运行scrapy项目" class="headerlink" title="运行scrapy项目"></a>运行scrapy项目</h1><p>运行<code>scrapy</code>项目。需要在终端，进入项目所在的路径，然后<code>scrapy crawl [爬虫名字]</code>即可运行指定的爬虫。如果不想每次都在命令行中运行，那么可以把这个命令写在一个文件中。以后就在<code>pycharm</code>中执行运行这个文件就可以了。比如现在新创建一个文件叫做<code>start.py</code>，然后在这个文件中填入以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"></span><br><span class="line">cmdline.execute(<span class="string">&quot;scrapy crawl qsbk&quot;</span>.split())</span><br></pre></td></tr></table></figure>

<h1 id="糗事百科Scrapy爬虫笔记"><a href="#糗事百科Scrapy爬虫笔记" class="headerlink" title="糗事百科Scrapy爬虫笔记"></a>糗事百科Scrapy爬虫笔记</h1><ol>
<li><code>response</code>是一个<code>scrapy.http.response.html.HtmlResponse</code>对象。可以执行<code>xpath</code>和<code>css</code>语法提取数据。</li>
<li>提取出来的数据，是一个<code>Selector</code>或者是一个<code>SelectorList</code>对象。如果想要获取其中的字符串。使用<code>getall</code>或者<code>get</code>方法。</li>
<li><code>getall</code>方法：获取<code>Selector</code>中的所有文本。返回的是一个列表。</li>
<li><code>get</code>方法：获取的是<code>Selector</code>中的第一个文本。返回的是一个<code>str</code>类型。</li>
<li>如果数据解析回来，要传给<code>pipeline</code>处理。那么可以使用<code>yield</code>来返回。或者是收集所有的<code>item</code>。最后统一使用return返回。</li>
<li><code>item</code>：建议在<code>items.py</code>中定义好模型。以后就不要使用字典。</li>
<li><code>pipeline</code>：这个是专门用来保存数据的。其中有三个方法是会经常用的。<ul>
<li><code>open_spider(self,spider)</code>：当爬虫被打开的时候执行</li>
<li><code>process_item(self,item,spider</code>)：当爬虫有item传过来的时候会被调用</li>
<li><code>close_spider(self,spider)</code>：当爬虫关闭的时候会被调用</li>
</ul>
</li>
</ol>
<p>要激活<code>pipeline</code>，应该在<code>settings.py</code>中，设置<code>ITEM_PIPELINES</code>。示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;qsbk.pipelines.QsbkPipeline&#x27;</span>: <span class="number">300</span>, <span class="comment">#数字小，优先级高</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JsonItemExporter和JsonLinesItemExporter："><a href="#JsonItemExporter和JsonLinesItemExporter：" class="headerlink" title="JsonItemExporter和JsonLinesItemExporter："></a>JsonItemExporter和JsonLinesItemExporter：</h2><p>保存<code>json</code>数据的时候，可以使用这两个类，让操作变得更简单。</p>
<h3 id="JsonItemExport"><a href="#JsonItemExport" class="headerlink" title="JsonItemExport"></a>JsonItemExport</h3><p>每次把数据添加到内存中。最后统一写到磁盘中。</p>
<ul>
<li>优点：存储的数据是一个满足json规则的数据</li>
<li>缺点：如果数据量比较大，比较耗内存</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.exporters <span class="keyword">import</span> JsonItemExporter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&#x27;duanzi.json&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        self.exporter = JsonItemExporter(self.fp, ensure_ascii=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        self.exporter.start_exporting()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self,spider</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;爬虫开始&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        self.exporter.export_item(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.exporter.finish_exporting()</span><br><span class="line">        self.fp.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;爬虫结束&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="JsonLinesItemExporter"><a href="#JsonLinesItemExporter" class="headerlink" title="JsonLinesItemExporter"></a>JsonLinesItemExporter</h3><p>每次调用<code>export_item</code>的时候把这个<code>item</code>存在到磁盘中</p>
<ul>
<li>优点：每次处理数据的时候，直接存储到磁盘中，不耗内存。数据也比较安全。</li>
<li>缺点：每一个字典是一行，整个文件不是一个满足<code>json</code>格式的文件。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.exporters <span class="keyword">import</span> JsonLinesItemExporter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&#x27;duanzi.json&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self,spider</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;爬虫开始&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        self.exporter.export_item(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.fp.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;爬虫结束&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="CrawlSpider"><a href="#CrawlSpider" class="headerlink" title="CrawlSpider"></a>CrawlSpider</h1><p>可以实现，只要满足某个条件的<code>url</code>，都进行爬取。<code>CrawlSpider</code>继承自<code>Spider</code>，只不过是在之前的基础之上增加了新的功能，可以定义爬取的<code>url</code>的规则，以后<code>scrapy</code>碰到满足条件的<code>url</code>都进行爬取，而不用手动的<code>yield Request</code>。</p>
<h2 id="创建CrawlSpider爬虫"><a href="#创建CrawlSpider爬虫" class="headerlink" title="创建CrawlSpider爬虫"></a>创建<code>CrawlSpider</code>爬虫</h2><p>之前创建爬虫的方式是通过<code>scrapy genspider [爬虫名字] [域名]</code>的方式创建的。如果想要创建<code>CrawlSpider</code>爬虫，那么应该通过以下命令创建：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scrapy genspider -t crawl [爬虫名字] [域名]</span><br></pre></td></tr></table></figure>

<h2 id="LinkExtractors链接提取器"><a href="#LinkExtractors链接提取器" class="headerlink" title="LinkExtractors链接提取器"></a>LinkExtractors链接提取器</h2><p>使用<code>LinkExtractors</code>可以不用程序员自己提取想要的<code>url</code>，然后发送请求。这些工作都可以交给<code>LinkExtractors</code>，他会在所有爬的页面中找到满足规则的<code>url</code>，实现自动的爬取。以下对<code>LinkExtractors</code>类做一个简单的介绍：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">linkextractors</span>.<span class="title">LinkExtractor</span>(<span class="params"></span></span></span><br><span class="line"><span class="class"><span class="params">    allow = (<span class="params"></span>),</span></span></span><br><span class="line"><span class="class"><span class="params">    deny = (<span class="params"></span>),</span></span></span><br><span class="line"><span class="class"><span class="params">    allow_domains = (<span class="params"></span>),</span></span></span><br><span class="line"><span class="class"><span class="params">    deny_domains = (<span class="params"></span>),</span></span></span><br><span class="line"><span class="class"><span class="params">    deny_extensions = <span class="literal">None</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    restrict_xpaths = (<span class="params"></span>),</span></span></span><br><span class="line"><span class="class"><span class="params">    tags = (<span class="params"><span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;area&#x27;</span></span>),</span></span></span><br><span class="line"><span class="class"><span class="params">    attrs = (<span class="params"><span class="string">&#x27;href&#x27;</span></span>),</span></span></span><br><span class="line"><span class="class"><span class="params">    canonicalize = <span class="literal">True</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    unique = <span class="literal">True</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    process_value = <span class="literal">None</span></span></span></span><br><span class="line"><span class="class"><span class="params"></span>)</span></span><br></pre></td></tr></table></figure>

<p>主要参数讲解：</p>
<ul>
<li><code>allow</code>：允许的url。所有满足这个正则表达式的url都会被提取。</li>
<li><code>deny</code>：禁止的url。所有满足这个正则表达式的url都不会被提取。</li>
<li><code>allow_domains</code>：允许的域名。只有在这个里面指定的域名的url才会被提取。</li>
<li><code>deny_domains</code>：禁止的域名。所有在这个里面指定的域名的url都不会被提取。</li>
<li><code>restrict_xpaths</code>：严格的xpath。和allow共同过滤链接。</li>
</ul>
<h2 id="Rule规则类"><a href="#Rule规则类" class="headerlink" title="Rule规则类"></a>Rule规则类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">spiders</span>.<span class="title">Rule</span>(<span class="params"></span></span></span><br><span class="line"><span class="class"><span class="params">    link_extractor, </span></span></span><br><span class="line"><span class="class"><span class="params">    callback = <span class="literal">None</span>, </span></span></span><br><span class="line"><span class="class"><span class="params">    cb_kwargs = <span class="literal">None</span>, </span></span></span><br><span class="line"><span class="class"><span class="params">    follow = <span class="literal">None</span>, </span></span></span><br><span class="line"><span class="class"><span class="params">    process_links = <span class="literal">None</span>, </span></span></span><br><span class="line"><span class="class"><span class="params">    process_request = <span class="literal">None</span></span></span></span><br><span class="line"><span class="class"><span class="params"></span>)</span></span><br></pre></td></tr></table></figure>

<p>主要参数讲解：</p>
<ul>
<li><code>link_extractor</code>：一个<code>LinkExtractor</code>对象，用于定义爬取规则。</li>
<li><code>callback</code>：满足这个规则的url，应该要执行哪个回调函数。因为<code>CrawlSpider</code>使用了<code>parse</code>作为回调函数，因此不要覆盖<code>parse</code>作为回调函数自己的回调函数。</li>
<li><code>follow</code>：指定根据该规则从response中提取的链接是否需要跟进。</li>
<li><code>process_links</code>：从<code>link_extractor</code>中获取到链接后会传递给这个函数，用来过滤不需要爬取的链接。</li>
</ul>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p><code>LinkExtractor</code>和<code>Rule</code>决定爬虫的具体走向。</p>
<ol>
<li><code>allow</code>设置规则的方法：能够限制在我们想要的url上，不与其它的url相同的正则表达式即可。</li>
<li><code>follow</code>使用场景：如果在爬取页面的时候，需要将满足当前条件的url再进行跟进，那么就设置为<code>True</code>。否则设置为<code>False</code>。</li>
<li><code>callback</code>使用场景：如果这个url对应的页面，只是为了获取更多的url，并不需要里面的数据，可以不指定callback。如果想获取url对应页面中的数据，那么久需要制定一个callback。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> wxapp.items <span class="keyword">import</span> WxappItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WxappSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;wxapp_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;wxapp-union.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.wxapp-union.com/portal.php?mod=list&amp;catid=2&amp;page=1&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;.+mod=list&amp;catid=2&amp;page=/d&#x27;</span>), follow=<span class="literal">True</span>),</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;.+article-.+\.html&#x27;</span>), callback=<span class="string">&#x27;parse_detail&#x27;</span>, follow=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        title = response.xpath(<span class="string">&quot;//h1[@class=&#x27;ph&#x27;]/text()&quot;</span>).get()</span><br><span class="line">        author_p = response.xpath(<span class="string">&quot;//p[@class=&#x27;authors&#x27;]&quot;</span>)</span><br><span class="line">        author = author_p.xpath(<span class="string">&quot;./a/text()&quot;</span>).get()</span><br><span class="line">        pub_time = author_p.xpath(<span class="string">&quot;./span/text()&quot;</span>).get()</span><br><span class="line">        article_content = response.xpath(<span class="string">&quot;//td[@id=&#x27;article_content&#x27;]//text()&quot;</span>).getall()</span><br><span class="line">        content = <span class="string">&#x27;&#x27;</span>.join(article_content).strip()</span><br><span class="line">        item = WxappItem(author=author, title=title, pub_time=pub_time,content=content)</span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>

<h1 id="Scrapy-Shell"><a href="#Scrapy-Shell" class="headerlink" title="Scrapy Shell"></a>Scrapy Shell</h1><p>我们想要在爬虫中使用<code>xpath</code>、<code>beautifulsoup</code>、<code>正则表达式</code>、<code>css选择器</code>等来提取想要的数据。但是因为<code>scrapy</code>是一个比较重的框架。每次运行起来都要等待一段时间。因此要去验证我们写的提取规则是否正确，是一个比较麻烦的事情。因此<code>scrapy</code>提供了一个<code>shell</code>，用来方便的测试规则。当然也不仅仅局限于这一个功能。</p>
<h2 id="打开Scrapy-Shell"><a href="#打开Scrapy-Shell" class="headerlink" title="打开Scrapy Shell"></a>打开Scrapy Shell</h2><ol>
<li>打开<code>cmd</code>终端，进入到<code>scrapy</code>框架所在的虚拟环境中，输入命令<code>scrapy shell [链接]</code>。就会进入到<code>scrapy</code>的<code>shell</code>环境中。在这个环境中，你可以跟在爬虫的<code>parse</code>方法中一样使用了</li>
<li>如果想读取某个项目的配置信息，应先进入到这个项目目录，再执行<code>scrapy shell</code>命令</li>
</ol>
<h1 id="Request和Response对象"><a href="#Request和Response对象" class="headerlink" title="Request和Response对象"></a>Request和Response对象</h1><h2 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h2><p><code>Request</code>对象在我们写爬虫，爬取一页的数据需要重新发送一个请求的时候调用。这个类需要传递一些参数，其中比较常用的参数有：</p>
<ol>
<li><code>url</code>：这个<code>request</code>对象发送请求的<code>url</code>。</li>
<li><code>callback</code>：在下载器下载完成相应的数据后执行的回调函数</li>
<li><code>method</code>：请求的方法。默认为<code>GET</code>方法，可以设置为其它方法。</li>
<li><code>headers</code>：请求头，对于一些固定的设置，放在<code>settings.py</code>中指定就可以了。对于那些非固定的，可以在发送请求的时候指定。</li>
<li><code>meta</code>：比较常用。用于在不同的请求之间传递数据用的</li>
<li><code>encoding</code>：编码。默认为<code>utf-8</code>，使用默认的即可。</li>
<li><code>dot_filter</code>：表示不由调度器过滤。在执行多次重复的请求时用得比较多。</li>
<li><code>errback</code>：在发生错误时执行的函数。</li>
</ol>
<h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><p><code>Response</code>对象一般是由<code>Scrapy</code>自动构建的。因此开发者不需要关心如何创建<code>Response</code>对象，而是要了解如何使用。<code>Response</code>对象有很多属性，可以用来提取数据：</p>
<ol>
<li><code>meta</code>：从其它请求传过来的<code>meta</code>属性，可以用来保持多个请求之间的数据连接。</li>
<li><code>encoding</code>：返回当前字符串编码和解码的格式</li>
<li><code>text</code>：将返回来的数据作为<code>Unicode</code>字符串返回</li>
<li><code>body</code>：将返回的数据作为<code>bytes</code>字符串返回</li>
<li><code>xpath</code>：<code>xpath</code>选择器</li>
<li><code>css</code>：<code>css</code>选择器</li>
</ol>
<h1 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a>发送POST请求</h1><p>有时候想要在请求数据的时候发送<code>post</code>请求，那么这时候需要使用<code>Request</code>的子类<code>FormRequest</code>来实现。如果想要在爬虫一开始的时候就发送<code>POST</code>请求，需要在爬虫类中重写<code>start_request(self)</code>方法，并且不再调用<code>start_urls</code>里的<code>url</code>。</p>
<h1 id="下载文件和图片"><a href="#下载文件和图片" class="headerlink" title="下载文件和图片"></a>下载文件和图片</h1><p><code>Scrapy</code>为下载<code>item</code>中包含的文件（比如图片）提供了一个可重用的<code>item pipelines</code>。这些<code>pipeline</code>有些共同的方法和结构（我们称之为<code>media pipeline</code>）。一般来说会使用<code>Files Pipeline</code>或<code>Images Pipeline</code>。</p>
<h2 id="scrapy内置下载文件方法的优点"><a href="#scrapy内置下载文件方法的优点" class="headerlink" title="scrapy内置下载文件方法的优点"></a>scrapy内置下载文件方法的优点</h2><ol>
<li>避免重新下载最近已经下载过的数据</li>
<li>可以方便的指定文件存储的路径</li>
<li>可以将下载的图片转换成通用的格式。比如<code>png</code>或<code>jpg</code>。</li>
<li>可以方便的生成缩略图</li>
<li>可以方便的检测图片的宽和高，确保他们满足最小限制</li>
<li>异步下载，效率非常高</li>
</ol>
<h2 id="下载文件的Files-Pipline"><a href="#下载文件的Files-Pipline" class="headerlink" title="下载文件的Files Pipline"></a>下载文件的Files Pipline</h2><p>当使用<code>Files Pipline</code>下载文件的时候，按照以下步骤来完成：</p>
<ol>
<li>定义好一个<code>Item</code>，然后在这个<code>Item</code>中定义两个属性，分别为<code>file_urls</code>以及<code>files</code>。<code>file_urls</code>是用来存储需要下载的图片的<code>url</code>链接，需要给一个列表</li>
<li>当文件下载完成后，会把文件下载的相关信息存储到<code>item</code>的<code>files</code>属性中。比如下载路径、下载的url和文件的校验码等</li>
<li>在配置文件<code>settings.py</code>中配置<code>FILES_STORE</code>，这个配置是用来设置文件下载下来的路径</li>
<li>启动<code>pipeline</code>：在<code>ITEM_PIPELINES</code>中设置<code>scrapy.pipeline.files.FilesPipeline: 1</code></li>
</ol>
<h2 id="下载图片的Images-Pipeline"><a href="#下载图片的Images-Pipeline" class="headerlink" title="下载图片的Images Pipeline"></a>下载图片的Images Pipeline</h2><p>当使用<code>Images Pipeline</code>下载文件的时候，按照以下步骤来完成：</p>
<ol>
<li>定义好一个<code>Item</code>，然后再这个<code>item</code>中定义两个属性，分别为<code>image_urls</code>以及<code>images</code>。<code>image_urls</code>是用来存储需要下载的图片的<code>url</code>链接，需要给一个列表</li>
<li>当文件下载完成后，会把文件下载的相关细信息存储到<code>item</code>的<code>images</code>属性中。比如下载路径、下载的<code>url</code>和图片的校验码等。</li>
<li>在配置文件<code>settings.py</code>中配置<code>IMAGES_STORE</code>，这个配置是用来设置图片下载下来的路径。</li>
<li>启动<code>pipeline</code>：在<code>ITEM_PIPELINES</code>中设置<code>scrapy.pipelines.images.ImagesPipeline: 1</code></li>
</ol>
<h1 id="Downloader-Middlewares（下载器中间件）"><a href="#Downloader-Middlewares（下载器中间件）" class="headerlink" title="Downloader Middlewares（下载器中间件）"></a>Downloader Middlewares（下载器中间件）</h1><p>下载器中间件是引擎和下载器之间通信的中间件。在这个中间件中可以设置代理、更换请求头等来达到反反爬虫的目的。要写下载器中间件，可以在下载器中实现两个方法。一个是<code>process_request(self, request, spider)</code>，这个方法是在请求发送之前会执行，还有一个是<code>process_response(self, request, response, spider)</code>，这个方法是数据下载到引擎之前执行。</p>
<h2 id="process-request-self-request-spider-："><a href="#process-request-self-request-spider-：" class="headerlink" title="process_request(self, request, spider)："></a>process_request(self, request, spider)：</h2><p>这个方法是下载器在发送请求之前会执行的。一般可以在这个里面设置随机代理ip等。</p>
<ol>
<li>参数：</li>
</ol>
<ul>
<li><code>request</code>：发送请求的request对象</li>
<li><code>spider</code>：发送请求的spider对象</li>
</ul>
<ol start="2">
<li>返回值：</li>
</ol>
<ul>
<li>返回<code>None</code>：如果返回<code>None</code>，<code>Scrapy</code>将继续处理该<code>request</code>，执行其它中间件中的相应方法，知道合适的下载器处理函数被调用，</li>
<li>返回<code>Response</code>对象：<code>Scrapy</code>将不会调用任何其它的<code>process_request</code>方法，将直接返回这个<code>response</code>对象。已经激活的中间件的<code>process_response()</code>方法则会在每个<code>response</code>返回时调用。(有疑问)</li>
<li>返回<code>Request</code>对象：不在使用之前的<code>request</code>对象去下载数据，而是根据现在返回的<code>request</code>对象返回数据。</li>
<li>如果这个方法中抛出了异常，则会调用<code>process_exception</code>方法</li>
</ul>
<h2 id="process-response-self-request-response-spider"><a href="#process-response-self-request-response-spider" class="headerlink" title="process_response(self, request, response, spider)"></a>process_response(self, request, response, spider)</h2><p>这个是下载器下载的数据到引擎中间会执行的方法</p>
<ol>
<li>参数：</li>
</ol>
<ul>
<li>request：request对象</li>
<li>response：被处理的response对象</li>
<li>spider：spider对象</li>
</ul>
<ol start="2">
<li>返回值：</li>
</ol>
<ul>
<li>返回<code>Response</code>对象：会将这个新的<code>response</code>对象传给其它中间件，最终传给爬虫</li>
<li>返回<code>Request</code>对象：下载器链被切断，返回的<code>request</code>会重新被下载器调度下载</li>
<li>如果抛出一个异常，那么调用<code>request</code>的<code>errback</code>方法，如果没有指定这个方法，那么会抛出一个异常。</li>
</ul>
<h2 id="随机请求头中间件"><a href="#随机请求头中间件" class="headerlink" title="随机请求头中间件"></a>随机请求头中间件</h2><p>爬虫在频繁访问一个页面的时候，这个请求头如果一直保持一直。那么很容易被服务器发现，从而禁止这个请求头的访问。因此我们要在访问这个页面之前随机的更改请求头，这样才可以避免爬虫被抓。随机更改请求头，可以在下载器中间件中实现。在请求发送给服务器之前，随机的选择一个请求头。示例代码如下：</p>
<p><img data-src="https://developers.whatismybrowser.com/" alt="User_Agent网站"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAgentDownloadMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    USER_AGENT = [</span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        user_agent = random.choice(self.USER_AGENT)</span><br><span class="line">        request.headers[<span class="string">&#x27;user-agent&#x27;</span>] = user_agent</span><br></pre></td></tr></table></figure>

<h2 id="ip代理池中间件"><a href="#ip代理池中间件" class="headerlink" title="ip代理池中间件"></a>ip代理池中间件</h2><h3 id="购买代理"><a href="#购买代理" class="headerlink" title="购买代理"></a>购买代理</h3><p>芝麻地理，太阳代理等</p>
<h3 id="使用ip代理池"><a href="#使用ip代理池" class="headerlink" title="使用ip代理池"></a>使用ip代理池</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 中间件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IPProxyDownloadMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    PROXIES = [</span><br><span class="line">        <span class="string">&#x27;111.177.188.158:9999&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;117.191.11.102:8080&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request,spider</span>):</span></span><br><span class="line">        proxy = random.choice(self.PROXIES)</span><br><span class="line">        request.meta[<span class="string">&#x27;proxy&#x27;</span>] = <span class="string">&#x27;http://&#x27;</span> + proxy</span><br></pre></td></tr></table></figure>

<p>使用独享代理的话：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 中间件</span></span><br><span class="line"><span class="comment"># 快代理，独享代理</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IPProxyDownloadMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request,spider</span>):</span></span><br><span class="line">        proxy = <span class="string">&#x27;121.199.6.124:16816&#x27;</span></span><br><span class="line">        user_password = <span class="string">&#x27;970138076: reessc13&#x27;</span></span><br><span class="line">        request.meta[<span class="string">&#x27;proxy&#x27;</span>] = <span class="string">&#x27;http://&#x27;</span> + proxy  <span class="comment">#教程里没加&#x27;http://&#x27;</span></span><br><span class="line">        b64_user_password = base64.b64encode(user_password.encode(utf-<span class="number">8</span>))</span><br><span class="line">        request.headers[<span class="string">&#x27;Proxy-Authorization&#x27;</span>] = <span class="string">&#x27;Basic&#x27;</span> + b64_user_password.decode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment">#不明白为什么要先编码再解码</span></span><br></pre></td></tr></table></figure>

<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><p><code>redis</code>是一种支持分布式的<code>nosql</code>数据库,他的数据是保存在内存中，同时<code>redis</code>可以定时把内存数据同步到磁盘，即可以将数据持久化，并且他比<code>memcached</code>支持更多的数据结构(<code>string</code>,<code>list列表[队列和栈]</code>,<code>set[集合]</code>,<code>sorted set[有序集合]</code>,<code>hash(hash表)</code>)。相关参考文档：<a href="http://redisdoc.com/index.html">Redis 命令参考</a></p>
<h2 id="redis使用场景："><a href="#redis使用场景：" class="headerlink" title="redis使用场景："></a>redis使用场景：</h2><ol>
<li>登录会话存储：存储在<code>redis</code>中，与<code>memcached</code>相比，数据不会丢失。</li>
<li>排行版/计数器：比如一些秀场类的项目，经常会有一些前多少名的主播排名。还有一些文章阅读量的技术，或者新浪微博的点赞数等。</li>
<li>作为消息队列：比如<code>celery</code>就是使用<code>redis</code>作为中间人。</li>
<li>当前在线人数：还是之前的秀场例子，会显示当前系统有多少在线人数。</li>
<li>一些常用的数据缓存：比如我们的BBS论坛，板块不会经常变化的，但是每次访问首页都要从<code>mysql</code>中获取，可以在<code>redis</code>中缓存起来，不用每次请求数据库。</li>
<li>把前200篇文章缓存或者评论缓存：一般用户浏览网站，只会浏览前面一部分文章或者评论，那么可以把前面200篇文章和对应的评论缓存起来。用户访问超过的，就访问数据库，并且以后文章超过200篇，则把之前的文章删除。</li>
<li>好友关系：微博的好友关系使用redis实现。</li>
<li>发布和订阅功能：可以用来做聊天软件。</li>
</ol>
<h2 id="redis和memcached的比较"><a href="#redis和memcached的比较" class="headerlink" title="redis和memcached的比较"></a>redis和memcached的比较</h2><table>
<thead>
<tr>
<th></th>
<th>memecached</th>
<th>redis</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>纯内存数据库</td>
<td>内存磁盘同步数据库</td>
</tr>
<tr>
<td>数据类型</td>
<td>在定义value时就要固定数据类型</td>
<td>不需要</td>
</tr>
<tr>
<td>虚拟内存</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>过期策略</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>存储数据安全</td>
<td>不支持</td>
<td>可以将数据同步到dump.db中</td>
</tr>
<tr>
<td>灾难恢复</td>
<td>不支持</td>
<td>可以将磁盘中的数据恢复到内存中</td>
</tr>
<tr>
<td>分布式</td>
<td>支持</td>
<td>主从同步</td>
</tr>
<tr>
<td>订阅与发布</td>
<td>不支持</td>
<td>支持</td>
</tr>
</tbody></table>
<h2 id="其它机器访问本机redis服务器"><a href="#其它机器访问本机redis服务器" class="headerlink" title="其它机器访问本机redis服务器"></a>其它机器访问本机redis服务器</h2><p>想要让其他机器访问本机的<code>redis</code>服务器。那么要修改<code>redis.conf</code>的配置文件，将<code>bind</code>改成<code>bind [自己的ip地址或者0.0.0.0]</code>，其他机器才能访问。<br><strong>注意</strong>：<code>bind</code>绑定的是本机网卡的ip地址，而不是想让其他机器连接的ip地址。如果有多块网卡，那么可以绑定多个网卡的ip地址。如果绑定到额是<code>0.0.0.0</code>，那么意味着其他机器可以通过本机所有的ip地址进行访问。</p>
<h2 id="对redis的操作"><a href="#对redis的操作" class="headerlink" title="对redis的操作"></a>对redis的操作</h2><p>对<code>redis</code>的操作可以用两种方式，第一种方式采用<code>redis-cli</code>，第二种方式采用编程语言，比如<code>Python</code>、<code>PHP</code>和<code>JAVA</code>等。下面使用<code>redis-cli</code>对<code>redis</code>进行操作。</p>
<h3 id="字符串操作："><a href="#字符串操作：" class="headerlink" title="字符串操作："></a>字符串操作：</h3><p>启动redis：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service redis-server start</span><br></pre></td></tr></table></figure>

<p>连接上redis-server：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli -h [ip] -p [端口]</span><br></pre></td></tr></table></figure>

<p>添加：<code>set key value</code>。将字符串值<code>value</code>关联到<code>key</code>。如果<code>key</code>已经持有其他值，<code>set</code>命令就覆写旧值，无视其类型。并且默认的过期时间是永久，即永远不会过期。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set username xiaotuo</span><br></pre></td></tr></table></figure>

<p>删除：<code>del key</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">del username</span><br></pre></td></tr></table></figure>

<p>设置过期时间：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">expire key timeout(单位为秒)</span><br></pre></td></tr></table></figure>

<p>也可以在设置值的时候，一同指定过期时间：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set key value EX timeout</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或下面的写法</span></span><br><span class="line">setex key timeout value</span><br></pre></td></tr></table></figure>

<p>查看过期时间：<code>ttl key</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ttl username</span><br></pre></td></tr></table></figure>

<p>查看当前<code>redis</code>中的所有<code>key</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure>

<h3 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h3><p>在列表左边添加元素：将值<code>value</code>插入到列表<code>key</code>的表头。如果<code>key</code>不存在，一个空列表会被创建并执行<code>lpush</code>操作。当<code>key</code>存在但不是列表类型时，将返回一个错误。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">lpush key <span class="keyword">value</span></span><br></pre></td></tr></table></figure>

<p>在列表右边添加元素：将值<code>value</code>插入到列表<code>key</code>的表尾。如果<code>key</code>不存在，一个空列表会被创建并执行<code>rpush</code>操作。当<code>key</code>存在但不是列表类型时，返回一个错误。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">rpush key <span class="keyword">value</span></span><br></pre></td></tr></table></figure>

<p>查看列表中的元素：返回列表<code>key</code>中指定区间内的元素，区间以偏移量<code>start</code>和<code>stop</code>指定,如果要左边的第一个到最后的一个<code>lrange key 0 -1</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lrange key start stop</span><br></pre></td></tr></table></figure>

<p>移除列表中的元素：</p>
<p>移除并返回列表key的头元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lpop key</span><br></pre></td></tr></table></figure>

<p>移除并返回列表的尾元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpop key</span><br></pre></td></tr></table></figure>

<p>移除并返回列表<code>key</code>的中间元素：将删除key这个列表中，值为value的元素，count为指定个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lrem key count value</span><br></pre></td></tr></table></figure>

<p>指定返回第几个元素：将返回<code>key</code>这个列表中，索引为<code>index</code>的这个元素。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lindex key index</span><br></pre></td></tr></table></figure>

<p>获取列表中的元素个数：<code>llen key</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">llen languages</span><br></pre></td></tr></table></figure>

<p>删除指定的元素：<code>lrem key count value</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lrem languages 0 php</span><br></pre></td></tr></table></figure>

<p>根据参数<code>count</code>的值，移除列表中与参数<code>value</code>相等的元素。<code>count</code>的值可以是以下几种：</p>
<ul>
<li>count &gt; 0：从表头开始向表尾搜索，移除与<code>value</code>相等的元素，数量为<code>count</code>。</li>
<li>count &lt; 0：从表尾开始向表头搜索，移除与<code>value</code>相等的元素，数量为<code>count</code>的绝对值。</li>
<li>count = 0：移除表中所有与<code>value</code>相等的值。</li>
</ul>
<h3 id="set集合的操作"><a href="#set集合的操作" class="headerlink" title="set集合的操作"></a>set集合的操作</h3><p>添加元素：<code>sadd set value1 value2....</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sadd team xiaotuo datuo</span><br></pre></td></tr></table></figure>

<p>查看元素：<code>smembers set</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">smembers team</span><br></pre></td></tr></table></figure>

<p>移除元素：<code>srem set member...</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srem team xiaotuo datuo</span><br></pre></td></tr></table></figure>

<p>查看集合中的元素个数：<code>scard set</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scard team1</span><br></pre></td></tr></table></figure>

<p>获取多个集合的交集：<code>sinter set1 set2</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sinter team1 team2</span><br></pre></td></tr></table></figure>

<p>获取多个集合的并集：<code>sunion set1 set2</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sunion team1 team2</span><br></pre></td></tr></table></figure>

<p>获取多个集合的差集：<code>sdiff set1 set2</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sdiff team1 team2</span><br></pre></td></tr></table></figure>

<h3 id="hash哈希操作"><a href="#hash哈希操作" class="headerlink" title="hash哈希操作"></a>hash哈希操作</h3><p>添加一个新值：<code>hset key field value</code>。将哈希表<code>key</code>中的域<code>field</code>的值设为<code>value</code>。如果<code>key</code>不存在，一个新的哈希表被创建并进行<code>hset</code>操作。如果域<code>field</code>已经存在于哈希表中，旧值将被覆盖。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hset website baidu baidu.com</span><br></pre></td></tr></table></figure>

<p>获取哈希中的<code>field</code>对应的值：<code>hget key field</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hget website baidu</span><br></pre></td></tr></table></figure>

<p>删除<code>field</code>中的某个<code>field</code>：<code>hdel key field</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdel website baidu</span><br></pre></td></tr></table></figure>

<p>获取某个哈希中所有的<code>field</code>和<code>value</code>：<code>hgetall key</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hgetall website</span><br></pre></td></tr></table></figure>

<p>获取某个哈希中所有的<code>field</code>：<code>hkeys key</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hkeys website</span><br></pre></td></tr></table></figure>

<p>获取某个哈希中所有的值：<code>hvals key</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hvals website</span><br></pre></td></tr></table></figure>

<p>判断哈希中是否存在某个<code>field</code>：<code>hexists key field</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexists website baidu</span><br></pre></td></tr></table></figure>

<p>获取哈希中键值对的数量：<code>hlen field</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hlen website</span><br></pre></td></tr></table></figure>

<p>其它知识点用到再补充</p>
<h1 id="Scrapy-Redis分布式爬虫组件"><a href="#Scrapy-Redis分布式爬虫组件" class="headerlink" title="Scrapy-Redis分布式爬虫组件"></a>Scrapy-Redis分布式爬虫组件</h1><p><code>Scrapy</code>是一个框架，他本身是不支持分布式的。如果我们想要做分布式的爬虫，就需要借助一个组件叫做<code>Scrapy-Redis</code>，这个组件正是利用了<code>Redis</code>可以分布式的功能，集成到<code>Scrapy</code>框架中，使得爬虫可以进行分布式。可以充分的利用资源（多个ip、更多带宽、同步爬取）来提高爬虫的爬行效率。</p>
<h1 id="分布式爬虫的优点"><a href="#分布式爬虫的优点" class="headerlink" title="分布式爬虫的优点"></a>分布式爬虫的优点</h1><ol>
<li>可以充分利用多台机器的带宽。</li>
<li>可以充分利用多台机器的ip地址。</li>
<li>多台机器做，爬取效率更高。</li>
</ol>
<h1 id="分布式爬虫必须要解决的问题"><a href="#分布式爬虫必须要解决的问题" class="headerlink" title="分布式爬虫必须要解决的问题"></a>分布式爬虫必须要解决的问题</h1><ol>
<li>分布式爬虫是好几台机器在同时运行，如何保证不同的机器爬取页面的时候不会出现重复爬取的问题。</li>
<li>同样，分布式爬虫在不同的机器上运行，在把数据爬完后如何保证保存在同一个地方。</li>
</ol>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>通过<code>pip install scrapy-redis</code>即可安装。</p>
<h1 id="Scrapy-Redis架构"><a href="#Scrapy-Redis架构" class="headerlink" title="Scrapy-Redis架构"></a>Scrapy-Redis架构</h1><p>这块少图，有空了找个高清的。</p>
<p><code>Item Pipeline</code>在接收到数据后发送给了<code>Redis</code>、<code>Scheduler</code>调度器调度数据也是从<code>Redis</code>中来的、并且其实数据去重也是在<code>Redis</code>中做的。</p>
<h1 id="编写Scrapy-Redis分布式爬虫"><a href="#编写Scrapy-Redis分布式爬虫" class="headerlink" title="编写Scrapy-Redis分布式爬虫"></a>编写Scrapy-Redis分布式爬虫</h1><p>要将一个<code>Scrapy</code>项目变成一个<code>Scrapy-redis</code>项目只需修改以下三点就可以了：</p>
<ol>
<li>将爬虫的类从<code>scrapy.Spider</code>变成<code>scrapy_redis.spiders.RedisSpider</code>；或者是从<code>scrapy.CrawlSpider</code>变成<code>scrapy_redis.spiders.RedisCrawlSpider</code>。</li>
<li>将爬虫中的<code>start_urls</code>删掉。增加一个<code>redis_key=&quot;xxx&quot;</code>。这个<code>redis_key</code>是为了以后在<code>redis</code>中控制爬虫启动的。爬虫的第一个<code>url</code>，就是在<code>redis</code>中通过这个发送出去的。</li>
<li>在配置文件中增加如下配置：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Scrapy-Redis相关配置</span></span><br><span class="line"><span class="comment"># 确保request存储到redis中</span></span><br><span class="line">SCHEDULER = <span class="string">&quot;scrapy_redis.scheduler.Scheduler&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保所有爬虫共享相同的去重指纹</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">&quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置redis为item pipeline，之前的pipeline注释掉</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">&#x27;scrapy_redis.pipelines.RedisPipeline&#x27;</span>: <span class="number">300</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在redis中保持scrapy-redis用到的队列，不会清理redis中的队列，从而可以实现暂停和恢复的功能。</span></span><br><span class="line">SCHEDULER_PERSIST = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置连接redis信息</span></span><br><span class="line">REDIS_HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br></pre></td></tr></table></figure>

<h1 id="运行爬虫"><a href="#运行爬虫" class="headerlink" title="运行爬虫"></a>运行爬虫</h1><ol>
<li>在爬虫服务器上。进入爬虫文件所在的路径，然后输入命令：<code>scrapy runspider [爬虫名字]</code>。</li>
<li>在<code>Redis</code>服务器上，推入一个开始的<code>url</code>链接<code>：redis-cli&gt; lpush [redis_key] start_url</code>开始爬取。</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker笔记</title>
    <url>/2022/10/28/Docker%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><ul>
<li>We have a complete container solution for you - no matter who you are and where you are on your containerization journey.</li>
<li>翻译: 我们为你提供了一个完整的容器解决方案,不管你是谁,不管你在哪,你都可以开始容器的的旅程。</li>
<li>官方定义: docker是一个容器技术。</li>
</ul>
<span id="more"></span>

<ul>
<li><p>官方文档地址:<a href="https://www.docker.com/get-started">https://www.docker.com/get-started</a></p>
</li>
<li><p>中文参考手册:<a href="https://docker_practice.gitee.io/zh-cn/">https://docker_practice.gitee.io/zh-cn/</a></p>
</li>
</ul>
<hr>
<h2 id="1-什么是-Docker"><a href="#1-什么是-Docker" class="headerlink" title="1.什么是 Docker"></a>1.什么是 Docker</h2><h3 id="1-1-官方定义"><a href="#1-1-官方定义" class="headerlink" title="1.1 官方定义"></a>1.1 官方定义</h3><ul>
<li>最新官网首页</li>
</ul>
<p><img data-src="1.png" alt="1"></p>
<p><img data-src="image-20201220214210994.png" alt="image-20201220214210994"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.官方介绍</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> We have a complete container solution for you - no matter who you are and where you are on your containerization journey.</span><br><span class="line"><span class="bullet">-</span> 翻译: 我们为你提供了一个完整的容器解决方案,不管你是谁,不管你在哪,你都可以开始容器的的旅程。</span><br><span class="line"><span class="bullet">-</span> 官方定义: docker是一个容器技术。</span><br></pre></td></tr></table></figure>

<h3 id="1-2-Docker的起源"><a href="#1-2-Docker的起源" class="headerlink" title="1.2 Docker的起源"></a>1.2 Docker的起源</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以 Apache 2.0 授权协议开源，主要项目代码在 GitHub 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动 开放容器联盟（OCI）。</span><br><span class="line"></span><br><span class="line">Docker 自开源后受到广泛的关注和讨论，至今其 GitHub 项目 已经超过 5 万 7 千个星标和一万多个 fork。甚至由于 Docker 项目的火爆，在 2013 年底，dotCloud 公司决定改名为 Docker。Docker 最初是在 Ubuntu 12.04 上开发实现的；Red Hat 则从 RHEL 6.5 开始对 Docker 进行支持；Google 也在其 PaaS 产品中广泛应用 Docker。</span><br><span class="line"></span><br><span class="line">Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 OverlayFS 类的 Union FS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</span><br></pre></td></tr></table></figure>

<h2 id="2-为什么是Docker"><a href="#2-为什么是Docker" class="headerlink" title="2.为什么是Docker"></a>2.为什么是Docker</h2><ul>
<li><p><code>在开发的时候，在本机测试环境可以跑，生产环境跑不起来</code></p>
<p>这里我们拿java Web应用程序举例，我们一个java Web应用程序涉及很多东西，比如jdk、tomcat、mysql等软件环境。当这些其中某一项版本不一致的时候，可能就会导致应用程序跑不起来这种情况。Docker则将程序以及使用软件环境直接打包在一起，无论在那个机器上保证了环境一致。</p>
<p><strong>优势1:  一致的运行环境,更轻松的迁移</strong></p>
</li>
<li><p><code>服务器自己的程序挂了，结果发现是别人程序出了问题把内存吃完了，自己程序因为内存不够就挂了</code></p>
<p>这种也是一种比较常见的情况，如果你的程序重要性不是特别高的话，公司基本上不可能让你的程序独享一台服务器的，这时候你的服务器就会跟公司其他人的程序共享一台服务器，所以不可避免地就会受到其他程序的干扰，导致自己的程序出现问题。Docker就很好解决了环境隔离的问题，别人程序不会影响到自己的程序。</p>
<p><strong>优势2：对进程进行封装隔离,容器与容器之间互不影响,更高效的利用系统资源</strong></p>
</li>
<li><p><code>公司要弄一个活动，可能会有大量的流量进来，公司需要再多部署几十台服务器</code></p>
<p>在没有Docker的情况下，要在几天内部署几十台服务器，这对运维来说是一件非常折磨人的事，而且每台服务器的环境还不一定一样，就会出现各种问题，最后部署地头皮发麻。用Docker的话，我只需要将程序打包到镜像，你要多少台服务，我就给力跑多少容器，极大地提高了部署效率。</p>
<p><strong>优势3: 通过镜像复制N多个环境一致容器</strong></p>
</li>
</ul>
<hr>
<h2 id="3-Docker和虚拟机区别"><a href="#3-Docker和虚拟机区别" class="headerlink" title="3.Docker和虚拟机区别"></a>3.Docker和虚拟机区别</h2><blockquote>
<p>关于Docker与虚拟机的区别，我在网上找到的一张图，非常直观形象地展示出来，话不多说，直接上图。</p>
</blockquote>
<p><img data-src="image-20201220222456675.png" alt="image-20201220222456675"></p>
<p><code>比较上面两张图，我们发现虚拟机是携带操作系统，本身很小的应用程序却因为携带了操作系统而变得非常大，很笨重</code>。Docker是不携带操作系统的，所以Docker的应用就非常的轻巧。另外在调用宿主机的CPU、磁盘等等这些资源的时候，拿内存举例，虚拟机是利用Hypervisor去虚拟化内存，整个调用过程是虚拟内存-&gt;虚拟物理内存-&gt;真正物理内存，但是Docker是利用Docker Engine去调用宿主的的资源，这时候过程是虚拟内存-&gt;真正物理内存。</p>
<table>
<thead>
<tr>
<th></th>
<th>传统虚拟机</th>
<th>Docker容器</th>
</tr>
</thead>
<tbody><tr>
<td>磁盘占用</td>
<td>几个GB到几十个GB左右</td>
<td>几十MB到几百MB左右</td>
</tr>
<tr>
<td>CPU内存占用</td>
<td>虚拟操作系统非常占用CPU和内存</td>
<td>Docker引擎占用极低</td>
</tr>
<tr>
<td>启动速度</td>
<td>（从开机到运行项目）几分钟</td>
<td>（从开启容器到运行项目）几秒</td>
</tr>
<tr>
<td>安装管理</td>
<td>需要专门的运维技术</td>
<td>安装、管理方便</td>
</tr>
<tr>
<td>应用部署</td>
<td>每次部署都费时费力</td>
<td>从第二次部署开始轻松简捷</td>
</tr>
<tr>
<td>耦合性</td>
<td>多个应用服务安装到一起，容易互相影响</td>
<td>每个应用服务一个容器，达成隔离</td>
</tr>
<tr>
<td>系统依赖</td>
<td>无</td>
<td>需求相同或相似的内核，目前推荐是Linux</td>
</tr>
</tbody></table>
<hr>
<h2 id="4-Docker的安装"><a href="#4-Docker的安装" class="headerlink" title="4.Docker的安装"></a>4.Docker的安装</h2><h3 id="4-1-安装docker-centos7-x"><a href="#4-1-安装docker-centos7-x" class="headerlink" title="4.1 安装docker(centos7.x)"></a>4.1 安装docker(centos7.x)</h3><ul>
<li><p>卸载原始docker</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></li>
<li><p>安装docker依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils \</span></span><br><span class="line"><span class="bash">  device-mapper-persistent-data \</span></span><br><span class="line"><span class="bash">  lvm2</span></span><br></pre></td></tr></table></figure></li>
<li><p>设置docker的yum源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li>
<li><p>安装最新版的docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li>
<li><p>指定版本安装docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br><span class="line">$ sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br><span class="line">$ sudo yum install docker-ce-18.09.5-3.el7 docker-ce-cli-18.09.5-3.el7 containerd.io</span><br></pre></td></tr></table></figure></li>
<li><p>启动docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure></li>
<li><p> 关闭docker</p>
</li>
</ul>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl stop docker</span><br></pre></td></tr></table></figure>

<ul>
<li><p>测试docker安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-2-bash安装-通用所有平台"><a href="#4-2-bash安装-通用所有平台" class="headerlink" title="4.2 bash安装(通用所有平台)"></a>4.2 bash安装(通用所有平台)</h3><ul>
<li><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，CentOS 系统上可以使用这套脚本安装，另外可以通过 <code>--mirror</code> 选项使用国内源进行安装：执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker 的稳定(stable)版本安装在系统中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure></li>
<li><p>启动docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure></li>
<li><p>创建docker用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure></li>
<li><p>将当前用户加入docker组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试docker安装是否正确</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run hello-world</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-Docker-的核心架构"><a href="#5-Docker-的核心架构" class="headerlink" title="5.Docker 的核心架构"></a>5.Docker 的核心架构</h2><p><img data-src="image-20200404111908085-0291323.png" alt="image-20200404111908085"></p>
<ul>
<li><code>镜像:</code> 一个镜像代表一个应用环境,他是一个只读的文件,如 mysql镜像,tomcat镜像,nginx镜像等</li>
<li><code>容器:</code> 镜像每次运行之后就是产生一个容器,就是正在运行的镜像,特点就是可读可写</li>
<li><code>仓库:</code>用来存放镜像的位置,类似于maven仓库,也是镜像下载和上传的位置（远程，本地）</li>
<li><code>dockerFile:</code>docker生成镜像配置文件,用来书写自定义镜像的一些配置</li>
<li><code>tar:</code>一个对镜像打包的文件,日后可以还原成镜像</li>
</ul>
<h2 id="6-Docker-配置阿里镜像加速服务"><a href="#6-Docker-配置阿里镜像加速服务" class="headerlink" title="6. Docker 配置阿里镜像加速服务"></a>6. Docker 配置阿里镜像加速服务</h2><h3 id="6-1-docker-运行流程"><a href="#6-1-docker-运行流程" class="headerlink" title="6.1 docker 运行流程"></a>6.1 docker 运行流程</h3><p><img data-src="image-20200404120356784.png" alt="image-20200404120356784"></p>
<h3 id="6-2-docker配置阿里云镜像加速"><a href="#6-2-docker配置阿里云镜像加速" class="headerlink" title="6.2 docker配置阿里云镜像加速"></a>6.2 docker配置阿里云镜像加速</h3><ul>
<li><code>访问阿里云登录自己账号查看docker镜像加速服务</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://lz2nib3q.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<ul>
<li><code>验证docker的镜像加速是否生效</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker info</span><br><span class="line">		..........</span><br><span class="line">    127.0.0.0/8</span><br><span class="line">   Registry Mirrors:</span><br><span class="line">    &#x27;https://lz2nib3q.mirror.aliyuncs.com/&#x27;</span><br><span class="line">   Live Restore Enabled: false</span><br><span class="line">   Product License: Community Engine</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="7-Docker的入门应用"><a href="#7-Docker的入门应用" class="headerlink" title="7.Docker的入门应用"></a>7.Docker的入门应用</h2><h3 id="7-1-docker-的第一个程序"><a href="#7-1-docker-的第一个程序" class="headerlink" title="7.1 docker 的第一个程序"></a>7.1 docker 的第一个程序</h3><blockquote>
<p>docker  run hello-world</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run hello-world</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta"> $</span><span class="bash"> docker run -it ubuntu bash</span></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="8-常用命令"><a href="#8-常用命令" class="headerlink" title="8.常用命令"></a>8.常用命令</h2><h3 id="6-1-辅助命令"><a href="#6-1-辅助命令" class="headerlink" title="6.1 辅助命令"></a>6.1 辅助命令</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.安装完成辅助命令</span></span><br><span class="line"><span class="code">		docker version	--------------------------	查看docker的信息</span></span><br><span class="line"><span class="code">		docker info		--------------------------	查看更详细的信息</span></span><br><span class="line"><span class="code">		docker --help	--------------------------	帮助命令</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-Images-镜像命令"><a href="#6-2-Images-镜像命令" class="headerlink" title="6.2 Images 镜像命令"></a>6.2 Images 镜像命令</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.查看本机中所有镜像</span></span><br><span class="line"><span class="code">	docker images	--------------------------	列出本地所有镜像</span></span><br><span class="line"><span class="code">		-a			列出所有镜像（包含中间映像层）</span></span><br><span class="line"><span class="code">  	-q			只显示镜像id</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.搜索镜像</span></span><br><span class="line"><span class="code">	docker search [options] 镜像名	-------------------	去dockerhub上查询当前镜像</span></span><br><span class="line"><span class="code">		-s 指定值		列出收藏数不少于指定值的镜像</span></span><br><span class="line"><span class="code">  	--no-trunc	  显示完整的镜像信息</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.从仓库下载镜像</span></span><br><span class="line"><span class="code">	docker pull 镜像名[:TAG|@DIGEST]	----------------- 下载镜像</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.删除镜像</span></span><br><span class="line"><span class="code">	docker image rm -f  镜像名：tag | 镜像ID</span></span><br><span class="line"><span class="code">		-f		强制删除</span></span><br><span class="line"><span class="code">	docker rmi -f  镜像名	--------------------------  删除镜像</span></span><br><span class="line"><span class="code">		-f		强制删除</span></span><br><span class="line"><span class="code">	docker image rm -f $(docker images tomcat -q)  ------------  批量删除镜像</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-Contrainer-容器命令"><a href="#6-3-Contrainer-容器命令" class="headerlink" title="6.3 Contrainer 容器命令"></a>6.3 Contrainer 容器命令</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.运行容器</span></span><br><span class="line"><span class="code">	docker run 镜像名	--------------------------	镜像名新建并启动容器</span></span><br><span class="line"><span class="code">    --name 					别名为容器起一个名字</span></span><br><span class="line"><span class="code">    -d							启动守护式容器（在后台启动容器）</span></span><br><span class="line"><span class="code">    -p 							映射端口号：原始端口号		 指定端口号启动</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">	例：docker run -it --name myTomcat -p 8888(系统上外部端口):8080(容器内服务监听的端口) tomcat</span></span><br><span class="line"><span class="code">   	 docker run -d --name myTomcat -P tomcat</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.查看运行的容器</span></span><br><span class="line"><span class="code">	docker ps					--------------------------	列出所有正在运行的容器</span></span><br><span class="line"><span class="code">	-a			正在运行的和历史运行过的容器</span></span><br><span class="line"><span class="code">	-q			静默模式，只显示容器编号</span></span><br><span class="line"><span class="code">	-qa          返回所有容器的id</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.停止|关闭|重启容器</span></span><br><span class="line"><span class="code">	docker start   容器名字或者容器id  --------------- 开启容器</span></span><br><span class="line"><span class="code">	docker restart 容器名或者容器id    --------------- 重启容器</span></span><br><span class="line"><span class="code">	docker stop  容器名或者容器id 	    ------------------ 正常停止容器运行</span></span><br><span class="line"><span class="code">	docker kill  容器名或者容器id      ------------------ 立即停止容器运行</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.删除容器</span></span><br><span class="line"><span class="code">	docker rm -f 容器id和容器名     </span></span><br><span class="line"><span class="code">	docker rm -f $(docker ps -aq)		--------------------------	删除所有容器</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 5.查看容器内进程</span></span><br><span class="line"><span class="code">	docker top 容器id或者容器名 ------------------ 查看容器内的进程</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 6.查看查看容器内部细节</span></span><br><span class="line"><span class="code">	docker inspect 容器id 		------------------ 查看容器内部细节</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 7.查看容器的运行日志</span></span><br><span class="line"><span class="code">	docker logs [OPTIONS] 容器id或容器名	------------------ 查看容器日志</span></span><br><span class="line"><span class="code">    -t			 加入时间戳</span></span><br><span class="line"><span class="code">    -f			 跟随最新的日志打印</span></span><br><span class="line"><span class="code">    --tail 	 数字	显示最后多少条</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 8.进入容器内部</span></span><br><span class="line"><span class="code">	docker exec -it 容器id|name  bash</span></span><br><span class="line"><span class="code">	docker exec [options] 容器id 容器内命令 ------------------ 进入容器执行命令</span></span><br><span class="line"><span class="code">		-i		以交互模式运行容器，通常与-t一起使用</span></span><br><span class="line"><span class="code">         -t		分配一个伪终端    shell窗口   bash </span></span><br><span class="line"><span class="code">	exit   退出容器</span></span><br><span class="line"><span class="code"># 9.容器和宿主机之间复制文件</span></span><br><span class="line"><span class="code">	docker cp 文件|目录 容器id:容器路径           -----------------   将宿主机复制到容器内部</span></span><br><span class="line"><span class="code">	docker cp 容器id:容器内资源路径 宿主机目录路径  -----------------   将容器内资源拷贝到主机上</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 10.数据卷(volum)实现与宿主机共享目录</span></span><br><span class="line"><span class="code">	docker run -v 宿主机的路径|任意别名:/容器内的路径  镜像名</span></span><br><span class="line"><span class="code">		注意: </span></span><br><span class="line"><span class="code">				1.如果是宿主机路径必须是绝对路径,宿主机目录会覆盖容器内目录内容</span></span><br><span class="line"><span class="code">				  docker run -d -p 8081:8080 --name tomcat02 -v /root/apps:/usr/local/tomcat/webapps tomcat:8.0</span></span><br><span class="line"><span class="code">				2.如果是别名则会在docker运行容器时自动在宿主机中创建一个目录,并将容器目录文件复制到宿主机中，前提别名对应路径不能存在内容。</span></span><br><span class="line"><span class="code">				  根据别名创建目录默认在：/var/lib/docker/volumes</span></span><br><span class="line"><span class="code">				  docker run -d -p 8082:8080 --name tomcat03 -v aa:/usr/local/tomcat/webapps tomcat:8.0</span></span><br><span class="line"><span class="code">     容器内的路径:ro  ，ro 表示容器内路径是只读的</span></span><br><span class="line"><span class="code"># 11.打包镜像</span></span><br><span class="line"><span class="code">		docker save 镜像名:tag -o  名称.tar</span></span><br><span class="line"><span class="code">		docker save tomcat:8.0 -o tomcat-8.0.tar</span></span><br><span class="line"><span class="code"># 12.载入镜像</span></span><br><span class="line"><span class="code">		docker load -i   名称.tar</span></span><br><span class="line"><span class="code">		docker load -i   tomcat</span></span><br><span class="line"><span class="code"># 13.容器打包成新的镜像</span></span><br><span class="line"><span class="code">	  docker commit -m &quot;描述信息&quot; -a &quot;作者信息&quot;   （容器id或者名称）打包的镜像名称:标签</span></span><br><span class="line"><span class="code">	  docker commit -m &quot;deploy test project in tomcat &quot; -a &quot;xiaochen&quot; e77 tomcat-test:8.0</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="7-docker的镜像原理"><a href="#7-docker的镜像原理" class="headerlink" title="7.docker的镜像原理"></a>7.docker的镜像原理</h2><h3 id="7-1-镜像是什么？"><a href="#7-1-镜像是什么？" class="headerlink" title="7.1 镜像是什么？"></a>7.1 镜像是什么？</h3><blockquote>
<p>镜像是一种轻量级的，可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时所需的库、环境变量和配置文件。</p>
</blockquote>
<h3 id="7-2-为什么一个镜像会那么大？"><a href="#7-2-为什么一个镜像会那么大？" class="headerlink" title="7.2 为什么一个镜像会那么大？"></a>7.2 为什么一个镜像会那么大？</h3><p><img data-src="image-20200404142950068.png" alt="image-20200404142950068"></p>
<p><code>镜像就是花卷</code></p>
<ul>
<li><p>UnionFS（联合文件系统）:</p>
<p>Union文件系统是一种分层，轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。Union文件系统是Docker镜像的基础。这种文件系统特性:就是一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录 。    </p>
</li>
</ul>
<h3 id="7-3-Docker镜像原理"><a href="#7-3-Docker镜像原理" class="headerlink" title="7.3 Docker镜像原理"></a>7.3 Docker镜像原理</h3><blockquote>
<p><code>docker的镜像实际是由一层一层的文件系统组成。</code></p>
</blockquote>
<ul>
<li><p>bootfs（boot file system）主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统。在docker镜像的最底层就是bootfs。这一层与Linux/Unix 系统是一样的，包含boot加载器（bootloader）和内核（kernel）。当boot加载完,后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时会卸载bootfs。</p>
</li>
<li><p>rootfs（root file system），在bootfs之上，包含的就是典型的linux系统中的/dev，/proc，/bin，/etc等标准的目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu/CentOS等等。</p>
</li>
<li><p>我们平时安装进虚拟机的centos都有1到几个GB，为什么docker这里才200MB？对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令，工具，和程序库就可以了，因为底层直接使用Host的Kernal，自己只需要提供rootfs就行了。由此可见不同的linux发行版，他们的bootfs是一致的，rootfs会有差别。因此不同的发行版可以共用bootfs。</p>
</li>
</ul>
<p><img data-src="1567585172(1).jpg"></p>
<h3 id="7-4-为什么docker镜像要采用这种分层结构呢"><a href="#7-4-为什么docker镜像要采用这种分层结构呢" class="headerlink" title="7.4 为什么docker镜像要采用这种分层结构呢?"></a>7.4 为什么docker镜像要采用这种分层结构呢?</h3><blockquote>
<p><code>最大的一个好处就是资源共享</code></p>
</blockquote>
<ul>
<li>比如：有多个镜像都是从相同的base镜像构建而来的，那么宿主机只需在磁盘中保存一份base镜像。同时内存中也只需要加载一份base镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。Docker镜像都是只读的。当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称为容器层，容器层之下都叫镜像层。</li>
</ul>
<hr>
<h2 id="8-Docker安装常用服务"><a href="#8-Docker安装常用服务" class="headerlink" title="8.Docker安装常用服务"></a>8.Docker安装常用服务</h2><h3 id="8-1-安装mysql"><a href="#8-1-安装mysql" class="headerlink" title="8.1 安装mysql"></a>8.1 安装mysql</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.拉取mysql镜像到本地</span></span><br><span class="line"><span class="code">	docker pull mysql:tag (tag不加默认最新版本)</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code"># 2.运行mysql服务</span></span><br><span class="line"><span class="code">	docker run --name mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:tag  	  --没有暴露外部端口外部不能连接</span></span><br><span class="line"><span class="code">	docker run --name mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d  mysql:tag  </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.进入mysql容器</span></span><br><span class="line"><span class="code">	docker exec -it 容器名称|容器id bash</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.外部查看mysql日志</span></span><br><span class="line"><span class="code">	docker logs 容器名称|容器id</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 5.使用自定义配置参数</span></span><br><span class="line"><span class="code">	docker run --name mysql -v /root/mysql/conf.d:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=root -d mysql:tag</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 6.将容器数据位置与宿主机位置挂载保证数据安全</span></span><br><span class="line"><span class="code">	docker run --name mysql -v /root/mysql/data:/var/lib/mysql -v /root/mysql/conf.d:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql:tag</span></span><br><span class="line"><span class="code">	docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d --name mysql102 --restart=always - v /root/data:/var/lib/mysql mysql:5.6</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 7.通过其他客户端访问 如在window系统|macos系统使用客户端工具访问</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code"># 8.将mysql数据库备份为sql文件</span></span><br><span class="line"><span class="code">	docker exec mysql|容器id sh -c &#x27;exec mysqldump --all-databases -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27; &gt; /root/all-databases.sql  --导出全部数据</span></span><br><span class="line"><span class="code">	docker exec mysql sh -c &#x27;exec mysqldump --databases 库名 -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27; &gt; /root/all-databases.sql  --导出指定库数据</span></span><br><span class="line"><span class="code">	docker exec mysql sh -c &#x27;exec mysqldump --no-data --databases 库名 -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27; &gt; /root/all-databases.sql  --导出指定库数据不要数据</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 9.执行sql文件到mysql中</span></span><br><span class="line"><span class="code">	docker exec -i mysql sh -c &#x27;exec mysql -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27; &lt; /root/xxx.sql</span></span><br></pre></td></tr></table></figure>

<h3 id="8-2-安装Redis服务"><a href="#8-2-安装Redis服务" class="headerlink" title="8.2 安装Redis服务"></a>8.2 安装Redis服务</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.在docker hub搜索redis镜像</span></span><br><span class="line"><span class="code">	docker search redis</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.拉取redis镜像到本地</span></span><br><span class="line"><span class="code">	docker pull redis</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.启动redis服务运行容器</span></span><br><span class="line"><span class="code">	docker run --name redis -d redis:tag (没有暴露外部端口)</span></span><br><span class="line"><span class="code">	docker run --name redis -p 6379:6379 -d redis:tag (暴露外部宿主机端口为6379进行连接) </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.查看启动日志</span></span><br><span class="line"><span class="code">	docker logs -t -f 容器id|容器名称</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 5.进入容器内部查看</span></span><br><span class="line"><span class="code">	docker exec -it 容器id|名称 bash  </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 6.加载外部自定义配置启动redis容器</span></span><br><span class="line"><span class="code">	默认情况下redis官方镜像中没有redis.conf配置文件 需要去官网下载指定版本的配置文件</span></span><br><span class="line"><span class="code">	1. wget http://download.redis.io/releases/redis-5.0.8.tar.gz  下载官方安装包</span></span><br><span class="line"><span class="code">	2. 将官方安装包中配置文件进行复制到宿主机指定目录中如 /root/redis/redis.conf文件</span></span><br><span class="line"><span class="code">	3. 修改需要自定义的配置</span></span><br><span class="line"><span class="code">		 bind 0.0.0.0 开启远程权限</span></span><br><span class="line"><span class="code">		 appenonly yes 开启aof持久化</span></span><br><span class="line"><span class="code">	4. 加载配置启动</span></span><br><span class="line"><span class="code">	docker run --name redis -v /root/redis:/usr/local/etc/redis -p 6379:6379 -d redis redis-server /usr/local/etc/redis/redis.conf  </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 7.将数据目录挂在到本地保证数据安全</span></span><br><span class="line"><span class="code">	docker run --name redis -v /root/redis/data:/data -v /root/redis/redis.conf:/usr/local/etc/redis/redis.conf -p 6379:6379 -d redis redis-server 					/usr/local/etc/redis/redis.conf  </span></span><br></pre></td></tr></table></figure>

<h3 id="8-3-安装Nginx"><a href="#8-3-安装Nginx" class="headerlink" title="8.3 安装Nginx"></a>8.3 安装Nginx</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.在docker hub搜索nginx</span></span><br><span class="line"><span class="code">	docker search nginx</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.拉取nginx镜像到本地</span></span><br><span class="line"><span class="code">	[root@localhost ~]# docker pull nginx</span></span><br><span class="line"><span class="code">    Using default tag: latest</span></span><br><span class="line"><span class="code">    latest: Pulling from library/nginx</span></span><br><span class="line"><span class="code">    afb6ec6fdc1c: Pull complete </span></span><br><span class="line"><span class="code">    b90c53a0b692: Pull complete </span></span><br><span class="line"><span class="code">    11fa52a0fdc0: Pull complete </span></span><br><span class="line"><span class="code">    Digest: sha256:30dfa439718a17baafefadf16c5e7c9d0a1cde97b4fd84f63b69e13513be7097</span></span><br><span class="line"><span class="code">    Status: Downloaded newer image for nginx:latest</span></span><br><span class="line"><span class="code">    docker.io/library/nginx:latest</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.启动nginx容器</span></span><br><span class="line"><span class="code">		docker run -p 80:80 --name nginx01 -d nginx</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.进入容器</span></span><br><span class="line"><span class="code">		docker exec -it nginx01 /bin/bash</span></span><br><span class="line"><span class="code">		查找目录:  whereis nginx</span></span><br><span class="line"><span class="code">		配置文件:  /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 5.复制配置文件到宿主机</span></span><br><span class="line"><span class="code">		docker cp nginx01(容器id|容器名称):/etc/nginx/nginx.conf 宿主机名录</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 6.挂在nginx配置以及html到宿主机外部</span></span><br><span class="line"><span class="code">		docker run --name nginx02 -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf -v /root/nginx/html:/usr/share/nginx/html -p 80:80 -d nginx		</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="8-4-安装Tomcat"><a href="#8-4-安装Tomcat" class="headerlink" title="8.4 安装Tomcat"></a>8.4 安装Tomcat</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.在docker hub搜索tomcat</span></span><br><span class="line"><span class="code">	docker search tomcat</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.下载tomcat镜像</span></span><br><span class="line"><span class="code">	docker pull tomcat</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.运行tomcat镜像</span></span><br><span class="line"><span class="code">	docker run -p 8080:8080 -d --name mytomcat tomcat</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.进入tomcat容器</span></span><br><span class="line"><span class="code">	docker exec -it mytomcat /bin/bash</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 5.将webapps目录挂载在外部</span></span><br><span class="line"><span class="code">	docker run -p 8080:8080 -v /root/webapps:/usr/local/tomcat/webapps -d --name mytomcat tomcat</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="8-5-安装MongoDB数据库"><a href="#8-5-安装MongoDB数据库" class="headerlink" title="8.5 安装MongoDB数据库"></a>8.5 安装MongoDB数据库</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.运行mongDB</span></span><br><span class="line"><span class="code">	docker run -d -p 27017:27017 --name mymongo mongo  ---无须权限</span></span><br><span class="line"><span class="code">	docker logs -f mymongo --查看mongo运行日志</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.进入mongodb容器</span></span><br><span class="line"><span class="code">	docker exec -it mymongo /bin/bash</span></span><br><span class="line"><span class="code">		直接执行mongo命令进行操作</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.常见具有权限的容器</span></span><br><span class="line"><span class="code">	docker run --name  mymongo  -p 27017:27017  -d mongo --auth</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.进入容器配置用户名密码</span></span><br><span class="line"><span class="code">	mongo</span></span><br><span class="line"><span class="code">	use admin 选择admin库</span></span><br><span class="line"><span class="code">	db.createUser(&#123;user:&quot;root&quot;,pwd:&quot;root&quot;,roles:[&#123;role:&#x27;root&#x27;,db:&#x27;admin&#x27;&#125;]&#125;)   //创建用户,此用户创建成功,则后续操作都需要用户认证</span></span><br><span class="line"><span class="code">	exit</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 5.将mongoDB中数据目录映射到宿主机中</span></span><br><span class="line"><span class="code">	docker run -d -p 27017:27017 -v /root/mongo/data:/data/db --name mymongo mongo </span></span><br></pre></td></tr></table></figure>

<h3 id="8-6-安装ElasticSearch"><a href="#8-6-安装ElasticSearch" class="headerlink" title="8.6 安装ElasticSearch"></a>8.6 安装ElasticSearch</h3><ul>
<li><code>注意:</code><strong>调高JVM线程数限制数量</strong></li>
</ul>
<h4 id="0-拉取镜像运行elasticsearch"><a href="#0-拉取镜像运行elasticsearch" class="headerlink" title="0.拉取镜像运行elasticsearch"></a>0.拉取镜像运行elasticsearch</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.dockerhub 拉取镜像</span></span><br><span class="line"><span class="code">	docker pull elasticsearch:6.4.2</span></span><br><span class="line"><span class="code"># 2.查看docker镜像</span></span><br><span class="line"><span class="code">	docker images</span></span><br><span class="line"><span class="code"># 3.运行docker镜像</span></span><br><span class="line"><span class="code">	docker run -p 9200:9200 -p 9300:9300 elasticsearch:6.4.2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动出现如下错误</li>
<li><img data-src="image-20200602184321790.png" alt="image-20200602184321790"></li>
</ul>
<h4 id="1-预先配置"><a href="#1-预先配置" class="headerlink" title="1. 预先配置"></a>1. 预先配置</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.在centos虚拟机中，修改配置sysctl.conf</span></span><br><span class="line"><span class="code">	vim /etc/sysctl.conf</span></span><br><span class="line"><span class="code"># 2.加入如下配置</span></span><br><span class="line"><span class="code">	vm.max_map_count=262144 </span></span><br><span class="line"><span class="code"># 3.启用配置</span></span><br><span class="line"><span class="code">	sysctl -p</span></span><br><span class="line"><span class="code">	注：这一步是为了防止启动容器时，报出如下错误：</span></span><br><span class="line"><span class="code">	bootstrap checks failed max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure>

<h4 id="2-启动EleasticSearch容器"><a href="#2-启动EleasticSearch容器" class="headerlink" title="2.启动EleasticSearch容器"></a>2.启动EleasticSearch容器</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.复制容器中data目录到宿主机中</span></span><br><span class="line"><span class="code">	docker cp 容器id:/usr/share/share/elasticsearch/data /root/es</span></span><br><span class="line"><span class="code"># 1.运行ES容器 指定jvm内存大小并指定ik分词器位置</span></span><br><span class="line"><span class="code">	docker run -d --name es -p 9200:9200 -p 9300:9300 -e ES_JAVA_OPTS=&quot;-Xms128m -Xmx128m&quot; -v /root/es/plugins:/usr/share/elasticsearch/plugins -v /root/es/data:/usr/share/elasticsearch/data elasticsearch:6.4.2</span></span><br></pre></td></tr></table></figure>

<h4 id="3-安装IK分词器"><a href="#3-安装IK分词器" class="headerlink" title="3.安装IK分词器"></a>3.安装IK分词器</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.下载对应版本的IK分词器</span></span><br><span class="line"><span class="code">	wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.4.2/elasticsearch-analysis-ik-6.4.2.zip</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.解压到plugins文件夹中</span></span><br><span class="line"><span class="code">	yum install -y unzip</span></span><br><span class="line"><span class="code">	unzip -d ik elasticsearch-analysis-ik-6.4.2.zip</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.添加自定义扩展词和停用词</span></span><br><span class="line"><span class="code">	cd plugins/elasticsearch/config</span></span><br><span class="line"><span class="code">	vim IKAnalyzer.cfg.xml</span></span><br><span class="line"><span class="code">	&lt;properties&gt;</span></span><br><span class="line"><span class="code">		&lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt;</span></span><br><span class="line"><span class="code">		&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line"><span class="code">		&lt;entry key=&quot;ext_dict&quot;&gt;ext_dict.dic&lt;/entry&gt;</span></span><br><span class="line"><span class="code">		&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line"><span class="code">		&lt;entry key=&quot;ext_stopwords&quot;&gt;ext_stopwords.dic&lt;/entry&gt;</span></span><br><span class="line"><span class="code">	&lt;/properties&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.在ik分词器目录下config目录中创建ext_dict.dic文件   编码一定要为UTF-8才能生效</span></span><br><span class="line"><span class="code">	vim ext_dict.dic 加入扩展词即可</span></span><br><span class="line"><span class="code"># 5. 在ik分词器目录下config目录中创建ext_stopword.dic文件 </span></span><br><span class="line"><span class="code">	vim ext_stopwords.dic 加入停用词即可</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 6.重启容器生效</span></span><br><span class="line"><span class="code">	docker restart 容器id</span></span><br><span class="line"><span class="code"># 7.将此容器提交成为一个新的镜像</span></span><br><span class="line"><span class="code">	docker commit -a=&quot;xiaochen&quot; -m=&quot;es with IKAnalyzer&quot; 容器id xiaochen/elasticsearch:6.4.2</span></span><br></pre></td></tr></table></figure>

<h4 id="4-安装Kibana"><a href="#4-安装Kibana" class="headerlink" title="4. 安装Kibana"></a>4. 安装Kibana</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.下载kibana镜像到本地</span></span><br><span class="line"><span class="code">	docker pull kibana:6.4.2</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.启动kibana容器</span></span><br><span class="line"><span class="code">	docker run -d --name kibana -e ELASTICSEARCH_URL=http://10.15.0.3:9200 -p 5601:5601 kibana:6.4.2</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="10-Docker中出现如下错误解决方案"><a href="#10-Docker中出现如下错误解决方案" class="headerlink" title="10.Docker中出现如下错误解决方案"></a>10.Docker中出现如下错误解决方案</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># docker search mysql 或者 docker pull 这些命令无法使用</span></span><br><span class="line">Error response from daemon: Get https://index.docker.io/v1/search?q=mysql&amp;n=<span class="number">25</span>: x509: certificate has expired or is not yet valid</span><br></pre></td></tr></table></figure>

<p><img data-src="image-20200602183429286.png" alt="image-20200602183429286"></p>
<ul>
<li>注意:<strong>这个错误的原因在于是系统的时间和docker hub时间不一致,需要做系统时间与网络时间同步</strong></li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.安装时间同步</span></span><br><span class="line"><span class="code">	sudo yum -y install ntp ntpdate</span></span><br><span class="line"><span class="code"># 2.同步时间</span></span><br><span class="line"><span class="code">	sudo ntpdate cn.pool.ntp.org</span></span><br><span class="line"><span class="code"># 3.查看本机时间</span></span><br><span class="line"><span class="code">	date</span></span><br><span class="line"><span class="code"># 4.从新测试</span></span><br></pre></td></tr></table></figure>

<p><img data-src="image-20200602183718623.png" alt="image-20200602183718623"></p>
<h2 id="9-Dockerfile"><a href="#9-Dockerfile" class="headerlink" title="9.Dockerfile"></a>9.Dockerfile</h2><h3 id="9-1-什么是Dockerfile"><a href="#9-1-什么是Dockerfile" class="headerlink" title="9.1 什么是Dockerfile"></a>9.1 什么是Dockerfile</h3><p>Dockerfile可以认为是<strong>Docker镜像的描述文件，是由一系列命令和参数构成的脚本</strong>。主要作用是<strong>用来构建docker镜像的构建文件</strong>。</p>
<p><img data-src="image-20200404111908085.png" alt="image-20200404111908085"></p>
<ul>
<li><strong>通过架构图可以看出通过DockerFile可以直接构建镜像</strong></li>
</ul>
<p><strong>构建过程：</strong></p>
<ol>
<li>在指定位置创建─个Dockerfile文件<br>编写dockerfile相关语法</li>
<li>通过Dockerfile构建镜像<br>docker build -t aa: 1.0 .(指定Dockerfile文件所在位置)</li>
</ol>
<h3 id="9-2-Dockerfile解析过程"><a href="#9-2-Dockerfile解析过程" class="headerlink" title="9.2 Dockerfile解析过程"></a>9.2 Dockerfile解析过程</h3><p><img data-src="image-20200603181253804.png" alt="image-20200603181253804"></p>
<p><img data-src="Dockerfile%E7%AE%80%E4%BB%8B.png" alt="Dockerfile简介"></p>
<h3 id="9-3-Dockerfile的保留命令"><a href="#9-3-Dockerfile的保留命令" class="headerlink" title="9.3 Dockerfile的保留命令"></a>9.3 Dockerfile的保留命令</h3><ol>
<li>每条保留字指令都必须为大写，且后面都要跟至少一个参数</li>
<li>指令按照从上到下，顺序执行。</li>
<li>#表示注释</li>
<li>每条指令都会创建一个新的镜像层，并对镜像进行提交</li>
</ol>
<p>官方说明:<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p>
<table>
<thead>
<tr>
<th>保留字</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>FROM</strong></td>
<td><strong>当前镜像是基于哪个镜像的</strong> <code>第一个指令必须是FROM</code></td>
</tr>
<tr>
<td>MAINTAINER</td>
<td>镜像维护者的姓名和邮箱地址</td>
</tr>
<tr>
<td><strong>RUN</strong></td>
<td><strong>构建镜像时需要运行的指令</strong></td>
</tr>
<tr>
<td><strong>EXPOSE</strong></td>
<td><strong>声明当前容器对外暴露出的端口号</strong></td>
</tr>
<tr>
<td><strong>WORKDIR</strong></td>
<td><strong>指定在创建容器后，终端默认登录进来的工作目录，一个落脚点</strong></td>
</tr>
<tr>
<td><strong>ENV</strong></td>
<td><strong>用来在构建镜像过程中设置环境变量</strong></td>
</tr>
<tr>
<td><strong>ADD</strong></td>
<td><strong>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar包</strong></td>
</tr>
<tr>
<td><strong>COPY</strong></td>
<td><strong>类似于ADD，拷贝文件和目录到镜像中<br/>将从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置</strong></td>
</tr>
<tr>
<td><strong>VOLUME</strong></td>
<td><strong>容器数据卷，用于数据保存和持久化工作</strong></td>
</tr>
<tr>
<td><strong>CMD</strong></td>
<td><strong>指定一个容器启动时要运行的命令<br/>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</strong></td>
</tr>
<tr>
<td><strong>ENTRYPOINT</strong></td>
<td><strong>指定一个容器启动时要运行的命令<br/>ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及其参数</strong></td>
</tr>
</tbody></table>
<h4 id="9-3-1-FROM-命令"><a href="#9-3-1-FROM-命令" class="headerlink" title="9.3.1 FROM 命令"></a>9.3.1 FROM 命令</h4><ul>
<li><p>基于那个镜像进行构建新的镜像,在构建时会自动从docker hub拉取base镜像 必须作为Dockerfile的第一个指令出现</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span>  &lt;image&gt;</span><br><span class="line"><span class="keyword">FROM</span>  &lt;image&gt;[:&lt;tag&gt;]     使用版本不写为latest</span><br><span class="line"><span class="keyword">FROM</span>  &lt;image&gt;[@&lt;digest&gt;]  使用摘要</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-3-2-MAINTAINER-命令"><a href="#9-3-2-MAINTAINER-命令" class="headerlink" title="9.3.2 MAINTAINER  命令"></a>9.3.2 MAINTAINER  命令</h4><ul>
<li><p>镜像维护者的姓名和邮箱地址[废弃]</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MAINTAINER</span> &lt;name&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-3-3-RUN-命令"><a href="#9-3-3-RUN-命令" class="headerlink" title="9.3.3 RUN 命令"></a>9.3.3 RUN 命令</h4><ul>
<li><p>RUN指令将在当前映像之上的新层中执行任何命令并提交结果。生成的提交映像将用于Dockerfile中的下一步</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> &lt;<span class="built_in">command</span>&gt; (shell form, the <span class="built_in">command</span> is run <span class="keyword">in</span> a shell, <span class="built_in">which</span> by default is /bin/sh -c on Linux or cmd /S /C on Windows)</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>] (<span class="built_in">exec</span> form)</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo hello&quot;</span>]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-3-4-EXPOSE-命令"><a href="#9-3-4-EXPOSE-命令" class="headerlink" title="9.3.4 EXPOSE 命令"></a>9.3.4 EXPOSE 命令</h4><ul>
<li><p>用来指定构建的镜像在运行为容器时对外暴露的端口，仅仅为声明</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/tcp  如果没有显示指定则默认暴露都是tcp</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/udp</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-3-5-CMD-命令"><a href="#9-3-5-CMD-命令" class="headerlink" title="9.3.5 CMD 命令"></a>9.3.5 CMD 命令</h4><ul>
<li><p>用来为启动的容器指定执行的命令,在Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</p>
</li>
<li><p>注意: <strong>Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</strong></p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] (<span class="built_in">exec</span> form, this is the preferred form)</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] (as default parameters to ENTRYPOINT)</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">command</span> param1 param2 (shell form)</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 直接命令方式</span><br><span class="line">   java -jar ems.jar</span><br><span class="line"><span class="number">2</span>. json数组方法（推荐）</span><br><span class="line">   [<span class="string">&quot;json&quot;</span>，<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;ems.jar&quot;</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-3-6-WORKDIR-命令"><a href="#9-3-6-WORKDIR-命令" class="headerlink" title="9.3.6 WORKDIR 命令"></a>9.3.6 WORKDIR 命令</h4><ul>
<li><p>用来为Dockerfile中的任何RUN、CMD、ENTRYPOINT、COPY和ADD指令设置工作目录。如果WORKDIR不存在，即使它没有在任何后续Dockerfile指令中使用，它也将被创建。</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /path/to/workdir  <span class="comment"># 绝对路径</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /a</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> b</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> c</span></span><br><span class="line">`注意:<span class="keyword">WORKDIR</span><span class="bash">指令可以在Dockerfile中多次使用。如果提供了相对路径，则该路径将与先前WORKDIR指令的路径相对`</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-3-7-ENV-命令"><a href="#9-3-7-ENV-命令" class="headerlink" title="9.3.7 ENV 命令"></a>9.3.7 ENV 命令</h4><ul>
<li><p>用来为构建镜像设置环境变量。这个值将出现在构建阶段中所有后续指令的环境中。</p>
</li>
<li><p>语法：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-3-8-ADD-命令"><a href="#9-3-8-ADD-命令" class="headerlink" title="9.3.8 ADD 命令"></a>9.3.8 ADD 命令</h4><ul>
<li><p>用来从context上下文复制新文件、目录或远程文件url，并将它们添加到位于指定路径的映像文件系统中。</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> hom* /mydir/       通配符添加多个文件</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> hom?.txt /mydir/   通配符添加</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> test.txt relativeDir/  可以指定相对路径</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> test.txt /absoluteDir/ 也可以指定绝对路径</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> url </span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-3-9-COPY-命令"><a href="#9-3-9-COPY-命令" class="headerlink" title="9.3.9 COPY 命令"></a>9.3.9 COPY 命令</h4><ul>
<li><p>用来将context目录中指定文件复制到镜像的指定目录中</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> src dest</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">&quot;&lt;src&gt;&quot;</span>,... <span class="string">&quot;&lt;dest&gt;&quot;</span>]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-3-10-VOLUME-命令"><a href="#9-3-10-VOLUME-命令" class="headerlink" title="9.3.10 VOLUME 命令"></a>9.3.10 VOLUME 命令</h4><ul>
<li><p>用来定义容器运行时可以挂在到宿主机的目录，仅仅为声明</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;/data&quot;</span>]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-3-11-ENTRYPOINT命令"><a href="#9-3-11-ENTRYPOINT命令" class="headerlink" title="9.3.11 ENTRYPOINT命令"></a>9.3.11 ENTRYPOINT命令</h4><ul>
<li><p>用来指定容器启动时执行命令和CMD类似</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">  [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="built_in">command</span> param1 param2</span></span><br></pre></td></tr></table></figure>

<p>ENTRYPOINT指令，往往用于设置容器启动后的<strong>第一个命令</strong>，这对一个容器来说往往是固定的。<br>CMD指令，往往用于设置容器启动的第一个命令的<strong>默认参数</strong>，这对一个容器来说可以是变化的。</p>
</li>
<li><p>区别：</p>
<ol>
<li><p>cmd里面命令如果在运行容器时进行覆盖：</p>
<p>docker run 镜像:版本号    覆盖自己定义命令    ls /</p>
</li>
<li><p>entrypoint里面命令如何在运行容器时进行覆盖：</p>
<p>docker run – entrypoint=覆盖的指令    镜像:版本号    传递参数</p>
</li>
</ol>
</li>
<li><p>配合使用</p>
<ul>
<li>entrypoint用来书写一个容器固定的指定</li>
<li>cmd用来给entrypoint传递参数</li>
<li>注意：配合使用时必须使用json数组语法</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;ls&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/apps/data&quot;</span>]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="9-4-Dockerfile构建springboot项目部署"><a href="#9-4-Dockerfile构建springboot项目部署" class="headerlink" title="9.4 Dockerfile构建springboot项目部署"></a>9.4 Dockerfile构建springboot项目部署</h3><h5 id="1-准备springboot可运行项目"><a href="#1-准备springboot可运行项目" class="headerlink" title="1.准备springboot可运行项目"></a>1.准备springboot可运行项目</h5><p><img data-src="image-20200605172151266.png" alt="image-20200605172151266"></p>
<h5 id="2-将可运行项目放入linux虚拟机中"><a href="#2-将可运行项目放入linux虚拟机中" class="headerlink" title="2.将可运行项目放入linux虚拟机中"></a>2.将可运行项目放入linux虚拟机中</h5><p><img data-src="image-20200605172340380.png" alt="image-20200605172340380"></p>
<h5 id="3-编写Dockerfile"><a href="#3-编写Dockerfile" class="headerlink" title="3.编写Dockerfile"></a>3.编写Dockerfile</h5><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /ems</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ems.jar /ems</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8989</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;ems.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h5 id="4-构建镜像"><a href="#4-构建镜像" class="headerlink" title="4.构建镜像"></a>4.构建镜像</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ems]# docker build -t ems .</span><br></pre></td></tr></table></figure>

<h5 id="5-运行镜像"><a href="#5-运行镜像" class="headerlink" title="5.运行镜像"></a>5.运行镜像</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ems]# docker run -p 8989:8989 ems</span><br></pre></td></tr></table></figure>

<h5 id="6-访问项目"><a href="#6-访问项目" class="headerlink" title="6.访问项目"></a>6.访问项目</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://10.15.0.8:8989/ems/login.html</span><br></pre></td></tr></table></figure>

<p><img data-src="image-20200605173141636.png" alt="image-20200605173141636"></p>
<hr>
<h2 id="10-高级网络配置"><a href="#10-高级网络配置" class="headerlink" title="10.高级网络配置"></a>10.高级网络配置</h2><h3 id="10-1-说明"><a href="#10-1-说明" class="headerlink" title="10.1 说明"></a>10.1 说明</h3><p>当 Docker 启动时，会自动在主机上创建一个 <code>docker0</code> 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p>
<p>同时，Docker 随机分配一个本地未占用的私有网段（在 <a href="https://tools.ietf.org/html/rfc1918">RFC1918</a> 中定义）中的一个地址给 <code>docker0</code> 接口。比如典型的 <code>172.17.42.1</code>，掩码为 <code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p>
<p>当创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p>
<p><img data-src="image-20201125105847896.png" alt="image-20201125105847896"></p>
<ol>
<li>默认docker在创建容器时将所有容器都连接到docker0网桥上，默认在docker0网桥的容器都可以<br>使用容器内<strong>ip地址</strong>进行通信</li>
<li>默认docker在创建容器时将所有容器都连接到docker0网桥上，默认在docker0网桥的容器都可以<br>使用<strong>容器名称</strong>作为容器ip进行通信。注意：使用容器名称必须自定义网桥不能使用默认docker0</li>
</ol>
<h3 id="10-2-查看网络信息"><a href="#10-2-查看网络信息" class="headerlink" title="10.2 查看网络信息"></a>10.2 查看网络信息</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># docker network ls</span></span><br></pre></td></tr></table></figure>

<h3 id="10-3-创建一个网桥"><a href="#10-3-创建一个网桥" class="headerlink" title="10.3 创建一个网桥"></a>10.3 创建一个网桥</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># docker network create -d bridge 网桥名称  //-d bridge 为默认参数，可以不写</span></span><br><span class="line"><span class="section"># docker network create  网桥名称</span></span><br></pre></td></tr></table></figure>

<h3 id="10-4-删除一个网桥"><a href="#10-4-删除一个网桥" class="headerlink" title="10.4 删除一个网桥"></a>10.4 删除一个网桥</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># docker network rm 网桥名称</span></span><br><span class="line"><span class="section"># docker network prune 删除所有未被用到的网络</span></span><br></pre></td></tr></table></figure>

<h3 id="10-5-查看某一个网络细节"><a href="#10-5-查看某一个网络细节" class="headerlink" title="10.5 查看某一个网络细节"></a>10.5 查看某一个网络细节</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># docker network inspect 网络名</span></span><br></pre></td></tr></table></figure>

<h3 id="10-6-容器之前使用网络通信"><a href="#10-6-容器之前使用网络通信" class="headerlink" title="10.6 容器之前使用网络通信"></a>10.6 容器之前使用网络通信</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.查询当前网络配置</span></span><br><span class="line"><span class="bullet">-</span> docker network ls</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">8e424e5936b7        bridge              bridge              local</span><br><span class="line">17d974db02da        docker_gwbridge     bridge              local</span><br><span class="line">d6c326e433f7        host                host                local</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.创建桥接网络</span></span><br><span class="line"><span class="bullet">-</span> docker network create -d bridge info</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# docker network create -d bridge info</span><br><span class="line">6e4aaebff79b1df43a064e0e8fdab08f52d64ce34db78dd5184ce7aaaf550a2f</span><br><span class="line">[root@centos ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">8e424e5936b7        bridge              bridge              local</span><br><span class="line">17d974db02da        docker_gwbridge     bridge              local</span><br><span class="line">d6c326e433f7        host                host                local</span><br><span class="line">6e4aaebff79b        info                bridge              local</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.启动容器指定使用网桥</span></span><br><span class="line"><span class="bullet">-</span> docker run -d -p 8890:80 --name nginx001 --network info nginx </span><br><span class="line"><span class="bullet">-</span> docker run -d -p 8891:80 --name nginx002 --network info nginx </span><br><span class="line"><span class="code">	`注意:一旦指定网桥后--name指定名字就是主机名,多个容器指定在同一个网桥时,可以在任意一个容器中使用主机名与容器进行互通`</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# docker run -d -p 8890:80 --name nginx001 --network info nginx </span><br><span class="line">c315bcc94e9ddaa36eb6c6f16ca51592b1ac8bf1ecfe9d8f01d892f3f10825fe</span><br><span class="line">[root@centos ~]# docker run -d -p 8891:80 --name nginx002 --network info nginx</span><br><span class="line">f8682db35dd7fb4395f90edb38df7cad71bbfaba71b6a4c6e2a3a525cb73c2a5</span><br><span class="line">[root@centos ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">f8682db35dd7        nginx               &quot;/docker-entrypoint.…&quot;   3 seconds ago       Up 2 seconds        0.0.0.0:8891-&gt;80/tcp   nginx002</span><br><span class="line">c315bcc94e9d        nginx               &quot;/docker-entrypoint.…&quot;   7 minutes ago       Up 7 minutes        0.0.0.0:8890-&gt;80/tcp   nginx001</span><br><span class="line">b63169d43792        mysql:5.7.19        &quot;docker-entrypoint.s…&quot;   7 minutes ago       Up 7 minutes        3306/tcp               mysql_mysql.1.s75qe5kkpwwttyf0wrjvd2cda</span><br><span class="line">[root@centos ~]# docker exec -it f8682db35dd7 /bin/bash</span><br><span class="line">root@f8682db35dd7:/# curl http://nginx001</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4. 启动之后容器加入到某个网络中</span></span><br><span class="line"><span class="bullet">-</span> docker network connect 网络名 容器ID（name）</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="11-高级数据卷配置"><a href="#11-高级数据卷配置" class="headerlink" title="11.高级数据卷配置"></a>11.高级数据卷配置</h2><h3 id="11-1-说明"><a href="#11-1-说明" class="headerlink" title="11.1 说明"></a>11.1 说明</h3><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p>
<ul>
<li><code>数据卷</code> 可以在容器之间共享和重用</li>
<li>对 <code>数据卷</code> 的修改会立马生效</li>
<li>对 <code>数据卷</code> 的更新，不会影响镜像</li>
<li><code>数据卷</code> 默认会一直存在，即使容器被删除</li>
</ul>
<blockquote>
<p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p>
</blockquote>
<p><strong>注意</strong>：必须在容器首次启动时指定</p>
<h3 id="11-2-创建数据卷"><a href="#11-2-创建数据卷" class="headerlink" title="11.2 创建数据卷"></a>11.2 创建数据卷</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# docker volume create my-vol</span><br><span class="line">my-vol</span><br></pre></td></tr></table></figure>

<h3 id="11-3-查看数据卷"><a href="#11-3-查看数据卷" class="headerlink" title="11.3 查看数据卷"></a>11.3 查看数据卷</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker inspect 数据卷别名、网桥名称、容器名称（右侧的优先）</span><br><span class="line">docker network inspect 查看网桥详细</span><br><span class="line">docker <span class="keyword">volume</span><span class="bash"> inspect 查看数据卷详细</span></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# docker volume ls -- 所有的</span><br><span class="line">[root@centos ~]# docker volume inspect my-vol -- 某个详细信息</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2020-11-25T11:43:56+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/my-vol/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;my-vol&quot;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="11-4-挂载数据卷"><a href="#11-4-挂载数据卷" class="headerlink" title="11.4 挂载数据卷"></a>11.4 挂载数据卷</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# docker run -d -P --name web  -v my-vol:/usr/share/nginx/html  nginx</span><br><span class="line">[root@centos ~]# docker inspect web</span><br><span class="line">				&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;my-vol&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/my-vol/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/usr/share/nginx/html&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;z&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure>

<h3 id="11-5-数据卷使用-v-宿主机路径-容器内路径"><a href="#11-5-数据卷使用-v-宿主机路径-容器内路径" class="headerlink" title="11.5 数据卷使用 -v 宿主机路径:容器内路径"></a>11.5 数据卷使用 -v 宿主机路径:容器内路径</h3><p>注意：必须再容器首次启动时指定</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## a.使用绝对路径</span></span><br><span class="line">docker run -v /root/datas:/user/local/tomcat/webapp ... tomcat:8.0</span><br><span class="line"><span class="section">## b.使用别名方式数据卷</span></span><br><span class="line">docker run -v bb:/user/local/tomcat/webapp ... tomcat:8.0</span><br><span class="line"></span><br><span class="line"><span class="section">## 注意：</span></span><br><span class="line">bb代表——个数据卷别名</span><br><span class="line">bb这个数据别名可以存在，也可以不存在，不存在docker首次用到时自动创建</span><br><span class="line">第一次使用别名时将容器中原始数据保留下来，使用绝对路径方式不会保留容器中原始数据</span><br></pre></td></tr></table></figure>

<h3 id="11-6-删除数据卷"><a href="#11-6-删除数据卷" class="headerlink" title="11.6 删除数据卷"></a>11.6 删除数据卷</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume rm my-vol</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="12-Docker-Compose"><a href="#12-Docker-Compose" class="headerlink" title="12.Docker Compose"></a>12.Docker Compose</h2><h3 id="现有docker进行项目部署存在问题"><a href="#现有docker进行项目部署存在问题" class="headerlink" title="现有docker进行项目部署存在问题"></a>现有docker进行项目部署存在问题</h3><ol>
<li>为了完成一个完整项目势必用到u个多个容器配合完成项目中业务开发，—旦引入N多个容器,N多个容器之间就会形成某种依赖,也就意味某个容器某些容器运行需要其他容器优先启动之后才能正常运行</li>
</ol>
<p>​       <strong>容器编排显得至关重要</strong></p>
<ol start="2">
<li>现在这种方式使用容器,没有办法站在项目的角度将一个项目用到一组容器划分到一起，日后难点在于项目多服务器部署</li>
</ol>
<p>​       <strong>项目角度管理项目用到一组容器</strong></p>
<h3 id="12-1-简介"><a href="#12-1-简介" class="headerlink" title="12.1 简介"></a>12.1 简介</h3><p><code>Compose</code> 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。从功能上看，跟 <code>OpenStack</code> 中的 <code>Heat</code> 十分类似。</p>
<p>其代码目前在 <a href="https://github.com/docker/compose">https://github.com/docker/compose</a> 上开源。</p>
<p><code>Compose</code> 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。</p>
<p>通过第一部分中的介绍，我们知道使用一个 <code>Dockerfile</code> 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p>
<p><code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p>
<p><code>Compose</code> 中有两个重要的概念：</p>
<ul>
<li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li>
<li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li>
</ul>
<p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p>
<p><code>Compose</code> 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 <code>Compose</code> 来进行编排管理。</p>
<h3 id="12-2-安装与卸载"><a href="#12-2-安装与卸载" class="headerlink" title="12.2 安装与卸载"></a>12.2 安装与卸载</h3><h6 id="1-linux"><a href="#1-linux" class="headerlink" title="1.linux"></a>1.linux</h6><ul>
<li>在 Linux 上的也安装十分简单，从 官方 GitHub Release 处直接下载编译好的二进制文件即可。例如，在 Linux 64 位系统上直接下载对应的二进制包。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h6 id="2-macos、window"><a href="#2-macos、window" class="headerlink" title="2.macos、window"></a>2.macos、window</h6><ul>
<li>Compose 可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。<code>Docker Desktop for Mac/Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用</code>。</li>
</ul>
<h6 id="3-bash命令补全"><a href="#3-bash命令补全" class="headerlink" title="3.bash命令补全"></a>3.bash命令补全</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -L https://raw.githubusercontent.com/docker/compose/1.25.5/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span></span><br></pre></td></tr></table></figure>

<h6 id="4-卸载"><a href="#4-卸载" class="headerlink" title="4.卸载"></a>4.卸载</h6><ul>
<li>如果是二进制包方式安装的，删除二进制文件即可。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br></pre></td></tr></table></figure>

<h6 id="5-测试安装成功"><a href="#5-测试安装成功" class="headerlink" title="5.测试安装成功"></a>5.测试安装成功</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose --version</span></span><br><span class="line"> docker-compose version 1.25.5, build 4667896b</span><br></pre></td></tr></table></figure>

<h3 id="12-3-docker-compose使用"><a href="#12-3-docker-compose使用" class="headerlink" title="12.3 docker compose使用"></a>12.3 docker compose使用</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.相关概念</span></span><br></pre></td></tr></table></figure>

<p>首先介绍几个术语。</p>
<ul>
<li>服务 (<code>service</code>)：一个应用容器，实际上可以运行多个相同镜像的实例。</li>
<li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元。∂一个项目可以由多个服务（容器）关联而成，<code>Compose</code> 面向项目进行管理。</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.场景</span></span><br></pre></td></tr></table></figure>

<p>最常见的项目是 web 网站，该项目应该包含 web 应用和缓存。</p>
<ul>
<li>springboot应用</li>
<li>mysql服务</li>
<li>redis服务</li>
<li>elasticsearch服务</li>
<li>…….</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.docker-compose模板</span></span><br><span class="line"><span class="bullet">-</span> 参考文档:https://docker<span class="emphasis">_practice.gitee.io/zh-cn/compose/compose_</span>file.html</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.0&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysqldb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.19</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span>   <span class="comment"># 不建议改名</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/mysql/conf:/etc/mysql/conf.d</span>  <span class="comment"># 绝对路径要先存在</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/mysql/logs:/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/mysql/data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ems</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:4.0.14</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ems</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/redis/data:/data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">ems:</span></span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.通过docker-compose运行一组容器</span></span><br><span class="line"><span class="bullet">-</span> 参考文档:https://docker<span class="emphasis">_practice.gitee.io/zh-cn/compose/commands.html</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos ~]<span class="comment"># docker-compose up    							//前台启动一组服务</span></span><br><span class="line">[root@centos ~]<span class="comment"># docker-compose up -d 							//后台启动一组服务</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="12-4-docker-compose-模板文件"><a href="#12-4-docker-compose-模板文件" class="headerlink" title="12.4 docker-compose 模板文件"></a>12.4 docker-compose 模板文件</h3><p>模板文件是使用 <code>Compose</code> 的核心，涉及到的指令关键字也比较多。但大家不用担心，这里面大部分指令跟 <code>docker run</code> 相关参数的含义都是类似的。</p>
<p>默认的模板文件名称为 <code>docker-compose.yml</code>，格式为 YAML 格式。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">examples/web</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/data&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）等来自动构建生成镜像。</p>
<p>如果使用 <code>build</code> 指令，在 <code>Dockerfile</code> 中设置的选项(例如：<code>CMD</code>, <code>EXPOSE</code>, <code>VOLUME</code>, <code>ENV</code> 等) 将会自动被获取，无需在 <code>docker-compose.yml</code> 中重复设置。</p>
<p>下面分别介绍各个指令的用法。</p>
<h4 id="build"><a href="#build" class="headerlink" title="build"></a><code>build</code></h4><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./dir</span></span><br></pre></td></tr></table></figure>

<p>你也可以使用 <code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径。</p>
<p>使用 <code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名。</p>
<p>使用 <code>arg</code> 指令指定构建镜像时的变量。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./dir</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="command"><a href="#command" class="headerlink" title="command"></a><code>command</code></h4><p>覆盖容器启动后默认执行的命令。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">echo</span> <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a><code>container_name</code></h4><p>指定容器名称。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">docker-web-container</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p>
</blockquote>
<h4 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a><code>depends_on</code></h4><p>解决容器的依赖、启动先后的问题。以下例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<code>web</code> 服务不会等待 <code>redis</code> <code>db</code> 「完全启动」之后才启动。</p>
</blockquote>
<h4 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a><code>env_file</code></h4><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p>
<p>如果通过 <code>docker-compose -f FILE</code> 方式来指定 Compose 模板文件，则 <code>env_file</code> 中变量的路径会基于模板文件路径。</p>
<p>如果有变量名称与 <code>environment</code> 指令冲突，则按照惯例，以后者为准。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">env_file: .env</span><br><span class="line"></span><br><span class="line">env_file:</span><br><span class="line">  - ./common.env</span><br><span class="line">  - ./apps/web.env</span><br><span class="line">  - /opt/secrets.env</span><br></pre></td></tr></table></figure>

<p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># common.env: Set development environment</span></span><br><span class="line">PROG_ENV=development</span><br></pre></td></tr></table></figure>

<h4 id="environment"><a href="#environment" class="headerlink" title="environment"></a><code>environment</code></h4><p>设置环境变量。你可以使用数组或字典两种格式。</p>
<p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">  <span class="attr">SESSION_SECRET:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure>

<p>如果变量名称或者值中用到 <code>true|false，yes|no</code> 等表达 <a href="https://yaml.org/type/bool.html">布尔</a> 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">y|Y|yes|Yes|YES|n|N|no|No|NO|<span class="literal">true</span>|True|TRUE|<span class="literal">false</span>|False|FALSE|on|On|ON|off|Off|OFF</span><br></pre></td></tr></table></figure>

<h4 id="healthcheck"><a href="#healthcheck" class="headerlink" title="healthcheck"></a><code>healthcheck</code></h4><p>通过命令检查容器是否健康运行。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">healthcheck:</span></span><br><span class="line">  <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost&quot;</span>]</span><br><span class="line">  <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">retries:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h4 id="image"><a href="#image" class="headerlink" title="image"></a><code>image</code></h4><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉取这个镜像。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">ubuntu</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">orchardup/postgresql</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">a4bc65fd</span></span><br></pre></td></tr></table></figure>

<h4 id="networks"><a href="#networks" class="headerlink" title="networks"></a><code>networks</code></h4><p>配置容器连接的网络。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">some-service:</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">some-network</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">other-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">some-network:</span></span><br><span class="line">  <span class="attr">other-network:</span></span><br></pre></td></tr></table></figure>

<h4 id="ports"><a href="#ports" class="headerlink" title="ports"></a><code>ports</code></h4><p>暴露端口信息。</p>
<p>使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;49100:22&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:8001:8001&quot;</span></span><br></pre></td></tr></table></figure>

<p><em>注意：当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 <code>YAML</code> 会自动解析 <code>xx:yy</code> 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</em></p>
<h4 id="sysctls"><a href="#sysctls" class="headerlink" title="sysctls"></a><code>sysctls</code></h4><p>配置容器内核参数。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">  <span class="attr">net.core.somaxconn:</span> <span class="number">1024</span></span><br><span class="line">  <span class="attr">net.ipv4.tcp_syncookies:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">net.core.somaxconn=1024</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">net.ipv4.tcp_syncookies=0</span></span><br></pre></td></tr></table></figure>

<h4 id="ulimits"><a href="#ulimits" class="headerlink" title="ulimits"></a><code>ulimits</code></h4><p>指定容器的 ulimits 限制值。</p>
<p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ulimits:</span></span><br><span class="line">  <span class="attr">nproc:</span> <span class="number">65535</span></span><br><span class="line">  <span class="attr">nofile:</span></span><br><span class="line">    <span class="attr">soft:</span> <span class="number">20000</span></span><br><span class="line">    <span class="attr">hard:</span> <span class="number">40000</span></span><br></pre></td></tr></table></figure>

<h4 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a><code>volumes</code></h4><p>数据卷所挂载路径设置。可以设置为宿主机路径(<code>HOST:CONTAINER</code>)或者数据卷名称(<code>VOLUME:CONTAINER</code>)，并且可以设置访问模式 （<code>HOST:CONTAINER:ro</code>）。</p>
<p>该指令中路径支持相对路径。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cache/:/tmp/cache</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">~/configs:/etc/configs/:ro</span></span><br></pre></td></tr></table></figure>

<p>如果路径为数据卷名称，必须在文件中配置数据卷。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">my_src:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql_data:</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="12-5-docker-compose-常用命令"><a href="#12-5-docker-compose-常用命令" class="headerlink" title="12.5 docker-compose 常用命令"></a>12.5 docker-compose 常用命令</h3><h5 id="1-命令对象与格式"><a href="#1-命令对象与格式" class="headerlink" title="1. 命令对象与格式"></a>1. 命令对象与格式</h5><p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p>
<p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p>
<p><code>docker-compose</code> 命令的基本的使用格式是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure>

<h5 id="2-命令选项"><a href="#2-命令选项" class="headerlink" title="2. 命令选项"></a>2. 命令选项</h5><ul>
<li><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</li>
<li><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</li>
<li><code>--x-networking</code> 使用 Docker 的可拔插网络后端特性</li>
<li><code>--x-network-driver DRIVER</code> 指定网络后端的驱动，默认为 <code>bridge</code></li>
<li><code>--verbose</code> 输出更多调试信息。</li>
<li><code>-v, --version</code> 打印版本并退出。</li>
</ul>
<h5 id="3-命令使用说明"><a href="#3-命令使用说明" class="headerlink" title="3.命令使用说明"></a>3.命令使用说明</h5><h5 id="up"><a href="#up" class="headerlink" title="up"></a><code>up</code></h5><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p>
<ul>
<li><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p>
</li>
<li><p>链接的服务都将会被自动启动，除非已经处于运行状态。</p>
</li>
<li><p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p>
</li>
<li><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p>
</li>
<li><p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p>
</li>
<li><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p>
</li>
<li><p>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容</p>
</li>
</ul>
<hr>
<h5 id="down"><a href="#down" class="headerlink" title="down"></a><code>down</code></h5><ul>
<li>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</li>
</ul>
<hr>
<h5 id="exec"><a href="#exec" class="headerlink" title="exec"></a><code>exec</code></h5><ul>
<li>进入指定的容器。</li>
</ul>
<hr>
<h5 id="ps"><a href="#ps" class="headerlink" title="ps"></a><code>ps</code></h5><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p>
<p>列出项目中目前的所有容器。</p>
<p>选项：</p>
<ul>
<li><code>-q</code> 只打印容器的 ID 信息。</li>
</ul>
<hr>
<h5 id="restart"><a href="#restart" class="headerlink" title="restart"></a><code>restart</code></h5><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p>
<p>重启项目中的服务。</p>
<p>选项：</p>
<ul>
<li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li>
</ul>
<hr>
<h5 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h5><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p>
<p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p>
<p>选项：</p>
<ul>
<li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li>
<li><code>-v</code> 删除容器所挂载的数据卷。</li>
</ul>
<hr>
<h5 id="start"><a href="#start" class="headerlink" title="start"></a><code>start</code></h5><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p>
<p>启动已经存在的服务容器。</p>
<hr>
<h5 id="stop"><a href="#stop" class="headerlink" title="stop"></a><code>stop</code></h5><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p>
<p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p>
<p>选项：</p>
<ul>
<li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li>
</ul>
<hr>
<h5 id="top"><a href="#top" class="headerlink" title="top"></a><code>top</code></h5><p>查看各个服务容器内运行的进程。</p>
<hr>
<h5 id="unpause"><a href="#unpause" class="headerlink" title="unpause"></a><code>unpause</code></h5><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p>
<p>恢复处于暂停状态中的服务。</p>
<hr>
<h2 id="13-docker可视化工具"><a href="#13-docker可视化工具" class="headerlink" title="13.docker可视化工具"></a>13.docker可视化工具</h2><h4 id="13-1-安装Portainer"><a href="#13-1-安装Portainer" class="headerlink" title="13.1 安装Portainer"></a>13.1 安装Portainer</h4><p>官方安装说明：<a href="http://www.yunweipai.com/go?_=8fe4813824aHR0cHM6Ly93d3cucG9ydGFpbmVyLmlvL2luc3RhbGxhdGlvbi8=">https://www.portainer.io/installation/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ubuntu1804 ~]#docker pull  portainer/portainer</span><br><span class="line"></span><br><span class="line">[root@ubuntu1804 ~]#docker volume create portainer_data</span><br><span class="line">portainer_data</span><br><span class="line">[root@ubuntu1804 ~]#docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br><span class="line">20db26b67b791648c2ef6aee444a5226a9c897ebcf0160050e722dbf4a4906e3</span><br><span class="line">[root@ubuntu1804 ~]#docker ps </span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND             CREATED             STATUS              PORTS                                            NAMES</span><br><span class="line">20db26b67b79        portainer/portainer   &quot;/portainer&quot;        5 seconds ago       Up 4 seconds        0.0.0.0:8000-&gt;8000/tcp, 0.0.0.0:9000-&gt;9000/tcp   portainer</span><br></pre></td></tr></table></figure>

<h4 id="13-2-登录和使用Portainer"><a href="#13-2-登录和使用Portainer" class="headerlink" title="13.2 登录和使用Portainer"></a>13.2 登录和使用Portainer</h4><blockquote>
<p>用浏览器访问：<code>http://localhost:9000</code></p>
</blockquote>
<p><img data-src="image-20201223231707738.png" alt="image-20201223231707738"></p>
<hr>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL李玉婷2019版基础</title>
    <url>/2021/05/09/MySQL%E6%9D%8E%E7%8E%89%E5%A9%B72019%E7%89%88%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="七天玩转MySQL"><a href="#七天玩转MySQL" class="headerlink" title="七天玩转MySQL"></a>七天玩转MySQL</h1><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> ....</span><br><span class="line"><span class="keyword">where</span> ...</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> ...</span><br><span class="line"><span class="keyword">having</span> ...</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> ...</span><br><span class="line">limit ...;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>执行顺序：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">from</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">where</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">having</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">select</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line"><span class="number">7</span> limit</span><br></pre></td></tr></table></figure>

<h2 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h2><p>MySql从5.7版本开始默认开启<code>only_full_group_by</code>规则，规则核心原则如下，没有遵循原则的sql会被认为是不合法的sql</p>
<ol>
<li><code>order by</code>后面的列必须是在<code>select</code>后面存在的</li>
<li><code>select</code>、<code>having</code>或<code>order by</code>后面存在的非聚合列必须全部在<code>group by</code>中存在</li>
</ol>
<h2 id="count-、count-1-、count-主键-、count-字段-的区别"><a href="#count-、count-1-、count-主键-、count-字段-的区别" class="headerlink" title="count(*)、count(1)、count(主键)、count(字段)的区别"></a>count(*)、count(1)、count(主键)、count(字段)的区别</h2><p>以下，基于 InnoDB</p>
<h3 id="含义区别"><a href="#含义区别" class="headerlink" title="含义区别"></a>含义区别</h3><p>count()是一个聚合函数，对于返回的结果集，会逐行判断，若返回的不是 NULL，就会加 1，否则不加。<br>因此，count(*)、count(主键 id)和count(1)都表示返回满足条件的结果集的总行数；而count(字段），则表示返回满足条件的数据行里面，参数“字段”不为 NULL 的总个数。</p>
<h3 id="性能区别"><a href="#性能区别" class="headerlink" title="性能区别"></a>性能区别</h3><p>分析性能，考虑以下几个原则：</p>
<ol>
<li><p>server 层要什么就会返回什么；</p>
</li>
<li><p>InnoDB 只返回必要的值；</p>
</li>
<li><p>优化器只优化了count(*)</p>
</li>
</ol>
<ul>
<li><p>对于count(主键id)，InnoDB 会遍历全表，取每行的主键 id，返回给 server 层，server 层拿到数据后，进行判断累加。</p>
</li>
<li><p>对于count(1)，InnoDB 仍遍历全表，但是不取值，server 层对返回的每一行数据新增一个 1，然后进行判断累加；<br>因此，count(1)要更快些，因为无需取值。从引擎返回 id 会涉及到解析数据行，以及拷贝字段值的操作。</p>
</li>
<li><p>对于count(字段)：</p>
</li>
</ul>
<ol>
<li><p>如果这个“字段”是定义为 not null 的话，一行行地从记录里面读出这个字段，判断不能为 null，按行累加；</p>
</li>
<li><p>如果这个“字段”定义允许为 null，那么执行的时候，判断到有可能是null，还要把值取出来再判断一下，不是 null 才累加。</p>
</li>
</ol>
<ul>
<li>但是<code>count(*)</code>是例外，并不会把全部字段取出来，而是专门做了优化，不取值。<code>count(*)</code>肯定不是<code>null</code>，按行累加。</li>
</ul>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>按照效率排序的话</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">count(字段) &lt; count(主键 id) &lt; count(1) ≈ count(*)</span><br></pre></td></tr></table></figure>

<p>所以我建议你，尽量使用<code>count(*)</code></p>
<h1 id="MySQL服务的连接和退出"><a href="#MySQL服务的连接和退出" class="headerlink" title="MySQL服务的连接和退出"></a>MySQL服务的连接和退出</h1><p>登录：<br>mysql 【-h主机名 -P端口号 】-u用户名 -p密码<br>//-p密码，不能加空格，其他随意。主机名，端口号可以省略</p>
<p>退出：<br>exit或ctrl+C</p>
<h1 id="常见sql命令演示"><a href="#常见sql命令演示" class="headerlink" title="常见sql命令演示"></a>常见sql命令演示</h1><p>命令不区分大小写，库名、表名、字段名建议大写，其它小写。</p>
<ul>
<li>单行注释：<code>#</code>或<code>--空格</code></li>
<li>多行注释：<code>/*注释内容*/</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases; <span class="operator">/</span><span class="operator">/</span> 展示数据库</span><br><span class="line">use 数据库名;   <span class="operator">/</span><span class="operator">/</span>使用</span><br><span class="line"><span class="keyword">show</span> tables;    <span class="operator">/</span><span class="operator">/</span>展示表</span><br><span class="line"><span class="keyword">show</span> tables <span class="keyword">from</span> 数据库名;  <span class="operator">/</span><span class="operator">/</span>查看其他数据库的表</span><br><span class="line"><span class="keyword">select</span> database();      <span class="operator">/</span><span class="operator">/</span>查看当前所在数据库</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>建表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stuinfo(</span><br><span class="line">    sutid   <span class="type">int</span>,</span><br><span class="line">    stuname <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    gender  <span class="type">char</span>,</span><br><span class="line">    borndate    datetime</span><br><span class="line">);</span><br><span class="line"><span class="keyword">desc</span> sutinfo;   <span class="operator">/</span><span class="operator">/</span>查看表结构</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuinfo <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张无忌&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;1998-3-3&#x27;</span>);     <span class="operator">/</span><span class="operator">/</span>插入数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuinfo <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;张翠山&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;1998-3-3&#x27;</span>);     <span class="operator">/</span><span class="operator">/</span>插入数据</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stuinfo;      <span class="operator">/</span><span class="operator">/</span>查看数据</span><br><span class="line">update stuinfo <span class="keyword">set</span> borndate<span class="operator">=</span><span class="string">&#x27;1980-1-1&#x27;</span> <span class="keyword">where</span> stuid<span class="operator">=</span><span class="number">2</span>;   <span class="operator">/</span><span class="operator">/</span>修改</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> stuinfo <span class="keyword">where</span> stuid<span class="operator">=</span><span class="number">1</span>;      <span class="operator">/</span><span class="operator">/</span>删除</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stuinfo <span class="keyword">add</span> <span class="keyword">column</span> email <span class="type">varchar</span>(<span class="number">20</span>);       <span class="operator">/</span><span class="operator">/</span>增加表字段</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> stuinfo;     <span class="operator">/</span><span class="operator">/</span>删表</span><br></pre></td></tr></table></figure>

<h1 id="SQL语言介绍"><a href="#SQL语言介绍" class="headerlink" title="SQL语言介绍"></a>SQL语言介绍</h1><ul>
<li>DDL（Data Definition Language）：数据定义语言，用来定义数据库对象：库、表、列等；</li>
<li>DML（Data Manipulation Language）：数据操作语言，用来定义数据库记录（数据）；</li>
<li>DCL（Data Control Language）：数据控制语言，用来定义访问权限和安全级别；</li>
<li>DQL（Data Query Language）：数据查询语言，用来查询记录（数据）。</li>
</ul>
<h1 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>select 查询列表 from 表名；</code><br>查询列表的结果集是一个虚拟表，select后面的查询列表可以有多个部分组成（字段、表达式、常量、函数等），逗号隔开，如：<br><code>select 字段1，字段2，表达式 from 表名；</code></p>
<h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><ol>
<li>from子句</li>
<li>select子句</li>
</ol>
<h2 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h2><ul>
<li>使用<code>as</code>关键字</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>() <span class="keyword">AS</span> 用户名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>() <span class="keyword">AS</span> &quot;用户名&quot;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>() <span class="keyword">AS</span> <span class="string">&#x27;用户名&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用空格</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>()  用户名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>()  &quot;用户名&quot;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>()  <span class="string">&#x27;用户名&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="mysql中-作用"><a href="#mysql中-作用" class="headerlink" title="mysql中+作用"></a>mysql中<code>+</code>作用</h2><ol>
<li>两个操作数都是数值型，做加法</li>
<li>其中一个操作数为字符型，将字符型数据强制转换成数值型，如无法转换则当做<code>0</code>处理</li>
<li>其中一个操作数为<code>null</code>，结果为<code>null</code></li>
</ol>
<p><code>+</code>不能拼接2个字段，需使用<code>concat</code>拼接函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(first_name,last_name) <span class="keyword">AS</span> &quot;姓 名&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<h2 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h2><p>查询员工涉及到的部门编号有哪些？（重复出现的显示1个）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<h2 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESC</span> employess;</span><br><span class="line"><span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<h2 id="ifnull-表达式1-表达式2"><a href="#ifnull-表达式1-表达式2" class="headerlink" title="ifnull(表达式1,表达式2)"></a>ifnull(表达式1,表达式2)</h2><p>表达式1：可能为null的字段或表达式<br>表达式2：如果表达式1为null，则最终结果显示的值</p>
<p>功能：如果表达式1为null，则显示表达式2，否则显示</p>
<h1 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h1><p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span>  表名</span><br><span class="line"><span class="keyword">where</span> 筛选条件;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> last_name,first_name </span><br><span class="line"><span class="keyword">from</span> employees </span><br><span class="line"><span class="keyword">where</span> salary<span class="operator">&gt;</span><span class="number">20000</span>;</span><br></pre></td></tr></table></figure>

<p>执行顺序：</p>
<ol>
<li>from子句</li>
<li>where子句</li>
<li>select子句</li>
</ol>
<p>特点：</p>
<ol>
<li>按关系表达式筛选<br>关系运算符：&gt;、&lt;、&gt;=、&lt;=、=、&lt;&gt;(补充：也可以使用!=,但不建议)     </li>
<li>按逻辑表达式筛选<br>逻辑运算符：and、or、not (补充：也可以使用&amp;&amp;  ||   !  ，但不建议)     </li>
<li>模糊查询<br>like、in、between and、is null</li>
</ol>
<h2 id="按关系表达式筛选"><a href="#按关系表达式筛选" class="headerlink" title="按关系表达式筛选"></a>按关系表达式筛选</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询部门编号不是100的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">&lt;&gt;</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：查询工资&lt;15000的姓名、工资</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&lt;</span><span class="number">15000</span>;</span><br></pre></td></tr></table></figure>

<h2 id="按逻辑表达式筛选"><a href="#按逻辑表达式筛选" class="headerlink" title="按逻辑表达式筛选"></a>按逻辑表达式筛选</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询部门编号不是 50-100之间员工姓名、部门编号、邮箱</span></span><br><span class="line"><span class="comment">-- 方式1：</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_id,email</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">&lt;</span><span class="number">50</span> <span class="keyword">OR</span> department_id<span class="operator">&gt;</span><span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式2：</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_id,email</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span>(department_id<span class="operator">&gt;=</span><span class="number">50</span> <span class="keyword">AND</span> department_id<span class="operator">&lt;=</span><span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：查询奖金率&gt;0.03 或者 员工编号在60-110之间的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct<span class="operator">&gt;</span><span class="number">0.03</span> <span class="keyword">OR</span> (employee_id <span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">AND</span> employee_id<span class="operator">&lt;=</span><span class="number">110</span>);</span><br></pre></td></tr></table></figure>

<h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p>功能：一般和通配符搭配使用，对字符型数据进行部分匹配查询。<code>like/not like</code><br>常见的通配符：</p>
<ul>
<li><code>_</code> 任意单个字符</li>
<li><code>%</code> 任意多个字符,支持0-多个</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询姓名中包含字符a的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：查询姓名中包含最后一个字符为e的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%e&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例3：查询姓名中包含第一个字符为e的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;e%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例4：查询姓名中包含第三个字符为x的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;__x%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例5：查询姓名中包含第二个字符为_的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_\_%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_$_%&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;$&#x27;</span>; <span class="comment">-- 自定义转义字符为$</span></span><br></pre></td></tr></table></figure>

<h2 id="in查询"><a href="#in查询" class="headerlink" title="in查询"></a>in查询</h2><p>功能：查询某字段的值是否属于指定的列表之内<br><code>a  in(常量值1,常量值2,常量值3,...)</code><br><code>a not in(常量值1,常量值2,常量值3,...)</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询部门编号是30/50/90的员工名、部门编号</span></span><br><span class="line"><span class="comment">-- 方式1：</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span>(<span class="number">30</span>,<span class="number">50</span>,<span class="number">90</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式2：</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">30</span></span><br><span class="line"><span class="keyword">OR</span> department_id <span class="operator">=</span> <span class="number">50</span></span><br><span class="line"><span class="keyword">OR</span> department_id <span class="operator">=</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：查询工种编号不是SH_CLERK或IT_PROG的员工信息</span></span><br><span class="line"><span class="comment">-- 方式1：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">NOT</span> <span class="keyword">IN</span>(<span class="string">&#x27;SH_CLERK&#x27;</span>,<span class="string">&#x27;IT_PROG&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式2：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span>(job_id <span class="operator">=</span><span class="string">&#x27;SH_CLERK&#x27;</span></span><br><span class="line"><span class="keyword">OR</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="between-and"><a href="#between-and" class="headerlink" title="between and"></a>between and</h2><p>功能：判断某个字段的值是否介于xx之间<br><code>between and/not between and</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询部门编号是30-90之间的部门编号、员工姓名</span></span><br><span class="line"><span class="comment">-- 方式1：</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">BETWEEN</span> <span class="number">30</span> <span class="keyword">AND</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式2：</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id<span class="operator">&gt;=</span><span class="number">30</span> <span class="keyword">AND</span> department_id<span class="operator">&lt;=</span><span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：查询年薪不是100000-200000之间的员工姓名、工资、年薪</span></span><br><span class="line"><span class="comment">-- 方式1：</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary,salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) 年薪</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>))<span class="operator">&lt;</span><span class="number">100000</span> <span class="keyword">OR</span> salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>))<span class="operator">&gt;</span><span class="number">200000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式2：</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary,salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) 年薪</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">100000</span> <span class="keyword">AND</span> <span class="number">200000</span>;</span><br></pre></td></tr></table></figure>

<h2 id="is-null-is-not-null"><a href="#is-null-is-not-null" class="headerlink" title="is null/is not null"></a>is null/is not null</h2><ul>
<li><code>=</code>只能判断普通的内容</li>
<li><code>IS</code>只能判断NULL值</li>
<li><code>&lt;=&gt;</code>安全等于，既能判断普通内容，又能判断NULL值</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询没有奖金的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：查询有奖金的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 错误写法，报错</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">IS</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 安全等于</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&lt;=&gt;</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 安全等于</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<h2 id="条件查询案例"><a href="#条件查询案例" class="headerlink" title="条件查询案例"></a>条件查询案例</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 查询工资大于 12000 的员工姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&gt;</span><span class="number">12000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询员工号为 176 的员工的姓名和部门号和年薪</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_id,salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) 年薪</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id  <span class="operator">=</span> <span class="number">176</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 选择工资不在 5000 到 12000 的员工的姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">5000</span> <span class="keyword">AND</span> <span class="number">12000</span>;</span><br><span class="line"><span class="comment">-- 方式2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 选择在 20 或 50 号部门工作的员工姓名和部门号</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> (<span class="number">20</span>,<span class="number">50</span>);</span><br><span class="line"><span class="comment">-- 方式2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 选择公司中没有管理者的员工姓名及 job_id</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6. 选择公司中有奖金的员工姓名，工资和奖金率</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary,commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 7. 选择员工姓名的第三个字母是 a 的员工姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;__a%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 8. 选择姓名中有字母 a 和 e 的员工姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span>  <span class="keyword">AND</span>  last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%e%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 9. 显示出表 employees 表中 first_name 以 &#x27;e&#x27;结尾的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> first_name <span class="keyword">LIKE</span> <span class="string">&#x27;%e&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 10. 显示出表 employees 部门编号在 80-100 之间 的姓名、职位</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">BETWEEN</span> <span class="number">80</span> <span class="keyword">AND</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 11. 显示出表 employees 的 manager_id 是 100,101,110 的员工姓名、职位</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">IN</span> (<span class="number">100</span>,<span class="number">101</span>,<span class="number">110</span>);</span><br></pre></td></tr></table></figure>

<h1 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line">【<span class="keyword">where</span> 筛选条件】</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序列表</span><br></pre></td></tr></table></figure>

<h2 id="执行顺序："><a href="#执行顺序：" class="headerlink" title="执行顺序："></a>执行顺序：</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">① <span class="keyword">from</span> 子句</span><br><span class="line">② <span class="keyword">where</span> 子句</span><br><span class="line">③ <span class="keyword">select</span> 子句</span><br><span class="line">④ <span class="keyword">order</span> <span class="keyword">by</span> 子句</span><br></pre></td></tr></table></figure>

<h2 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> last_name,salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> salary<span class="operator">&gt;</span><span class="number">20000</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> salary ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure>

<h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><ol>
<li>排序列表可以是单个字段、多个字段、表达式、函数、列数、以及以上的组合</li>
<li>升序 ，通过 asc   ，默认行为<br>降序 ，通过 desc</li>
</ol>
<h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><h3 id="按单个字段排序"><a href="#按单个字段排序" class="headerlink" title="按单个字段排序"></a>按单个字段排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：将员工编号&gt;120的员工信息进行工资的升序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> employee_id<span class="operator">&gt;</span><span class="number">120</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例1：将员工编号&gt;120的员工信息进行工资的降序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> employee_id<span class="operator">&gt;</span><span class="number">120</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h3 id="按表达式排序"><a href="#按表达式排序" class="headerlink" title="按表达式排序"></a>按表达式排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：对有奖金的员工，按年薪降序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>,salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>))  年薪</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h3 id="按别名排序"><a href="#按别名排序" class="headerlink" title="按别名排序"></a>按别名排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：对有奖金的员工，按年薪降序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>,salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>))  年薪</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 年薪 <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h3 id="按函数的结果排序"><a href="#按函数的结果排序" class="headerlink" title="按函数的结果排序"></a>按函数的结果排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：按姓名的字数长度进行升序</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> LENGTH(last_name);</span><br></pre></td></tr></table></figure>

<h3 id="按多个字段排序"><a href="#按多个字段排序" class="headerlink" title="按多个字段排序"></a>按多个字段排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询员工的姓名、工资、部门编号，先按工资升序，再按部门编号降序</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span>,department_id <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h3 id="补充选学：按列数排序"><a href="#补充选学：按列数排序" class="headerlink" title="补充选学：按列数排序"></a>补充选学：按列数排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">2</span> <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> first_name;</span><br></pre></td></tr></table></figure>

<h1 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h1><ul>
<li>字符函数</li>
<li>数学函数</li>
<li>日期函数</li>
<li>流程控制函数</li>
</ul>
<p>函数：类似于java中学过的“方法”，为了解决某个问题，将编写的一系列的命令集合封装在一起，对外仅仅暴露方法名，供外部调用</p>
<ol>
<li>自定义方法(函数)</li>
<li>调用方法(函数)<ul>
<li>叫什么  ：函数名</li>
<li>干什么  ：函数功能</li>
</ul>
</li>
</ol>
<h2 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h2><ol>
<li>CONCAT 拼接字符</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;hello,&#x27;</span>,first_name,last_name)  备注 <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>LENGTH 获取字节长度</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LENGTH(<span class="string">&#x27;hello,郭襄&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>CHAR_LENGTH 获取字符个数</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;hello,郭襄&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>SUBSTRING 截取子串</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意：起始索引从1开始！！！</span></span><br><span class="line"><span class="comment">substr(str,起始索引，截取的字符长度)</span></span><br><span class="line"><span class="comment">substr(str,起始索引)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;张三丰爱上了郭襄&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;张三丰爱上了郭襄&#x27;</span>,<span class="number">7</span>);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>INSTR获取字符第一次出现的索引</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;三打白骨精aaa白骨精bb白骨精&#x27;</span>,<span class="string">&#x27;白骨精&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>TRIM去前后指定的字符，默认是去空格</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27; 虚  竹    &#x27;</span>)  <span class="keyword">AS</span> a;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27;x&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;xxxxxx虚xxx竹xxxxxxxxxxxxxxxxxx&#x27;</span>)  <span class="keyword">AS</span> a;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>LPAD/RPAD  左填充/右填充</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LPAD(<span class="string">&#x27;木婉清&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> RPAD(<span class="string">&#x27;木婉清&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>UPPER/LOWER  变大写/变小写</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询员工表的姓名，要求格式：姓首字符大写，其他字符小写，名所有字符大写，且姓和名之间用_分割，最后起别名“OUTPUT”</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(SUBSTR(first_name,<span class="number">1</span>,<span class="number">1</span>)),first_name <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(SUBSTR(first_name,<span class="number">2</span>)),first_name <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(last_name) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="built_in">UPPER</span>(SUBSTR(first_name,<span class="number">1</span>,<span class="number">1</span>)),<span class="built_in">LOWER</span>(SUBSTR(first_name,<span class="number">2</span>)),<span class="string">&#x27;_&#x27;</span>,<span class="built_in">UPPER</span>(last_name)) &quot;OUTPUT&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>STRCMP 比较两个字符大小</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> STRCMP(<span class="string">&#x27;aec&#x27;</span>,<span class="string">&#x27;aec&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>LEFT/RIGHT  截取子串</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">&#x27;鸠摩智&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">&#x27;鸠摩智&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><ol>
<li>ABS 绝对值</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-2.4</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>CEIL 向上取整  返回&gt;=该参数的最小整数</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEIL</span>(<span class="number">-1.09</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEIL</span>(<span class="number">0.09</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEIL</span>(<span class="number">1.00</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>FLOOR 向下取整，返回&lt;=该参数的最大整数</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">-1.09</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">0.09</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">1.00</span>);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>ROUND 四舍五入</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">1.8712345</span>);</span><br><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">1.8712345</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>TRUNCATE 截断</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="number">1.8712345</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>MOD 取余</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MOD</span>(<span class="number">-10</span>,<span class="number">3</span>);</span><br><span class="line">a<span class="operator">%</span>b <span class="operator">=</span> a<span class="operator">-</span>(<span class="type">INT</span>)a<span class="operator">/</span>b<span class="operator">*</span>b</span><br><span class="line"><span class="number">-10</span><span class="operator">%</span><span class="number">3</span> <span class="operator">=</span> <span class="number">-10</span> <span class="operator">-</span> (<span class="number">-10</span>)<span class="operator">/</span><span class="number">3</span><span class="operator">*</span><span class="number">3</span>   <span class="operator">=</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">-10</span><span class="operator">%</span><span class="number">3</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">10</span><span class="operator">%</span><span class="number">3</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">-10</span><span class="operator">%</span><span class="number">-3</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">10</span><span class="operator">%</span><span class="number">-3</span>;</span><br></pre></td></tr></table></figure>

<h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><ol>
<li>NOW</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW();</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>CURDATE</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CURDATE();</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>CURTIME</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CURTIME();</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>DATEDIFF</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATEDIFF(<span class="string">&#x27;1998-7-16&#x27;</span>,<span class="string">&#x27;2019-7-13&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>DATE_FORMAT</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(<span class="string">&#x27;1998-7-16&#x27;</span>,<span class="string">&#x27;%Y年%M月%d日 %H小时%i分钟%s秒&#x27;</span>) 出生日期;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(hiredate,<span class="string">&#x27;%Y年%M月%d日 %H小时%i分钟%s秒&#x27;</span>)入职日期 </span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>STR_TO_DATE 按指定格式解析字符串为日期类型</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> hiredate<span class="operator">&lt;</span>STR_TO_DATE(<span class="string">&#x27;3/15 1998&#x27;</span>,<span class="string">&#x27;%m/%d %Y&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><ol>
<li>IF函数</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IF(<span class="number">100</span><span class="operator">&gt;</span><span class="number">9</span>,<span class="string">&#x27;好&#x27;</span>,<span class="string">&#x27;坏&#x27;</span>);  <span class="comment">-- 类似三目运算符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 需求：如果有奖金，则显示最终奖金，如果没有，则显示0</span></span><br><span class="line"><span class="keyword">SELECT</span> IF(commission_pct <span class="keyword">IS</span> <span class="keyword">NULL</span>,<span class="number">0</span>,salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>commission_pct)  奖金,commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>CASE函数</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 情况1 ：类似于switch语句，可以实现等值判断</span></span><br><span class="line"><span class="keyword">CASE</span> 表达式</span><br><span class="line"><span class="keyword">WHEN</span> 值<span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span></span><br><span class="line"><span class="keyword">WHEN</span> 值<span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 结果n</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">案例：</span></span><br><span class="line"><span class="comment">部门编号是30，工资显示为2倍</span></span><br><span class="line"><span class="comment">部门编号是50，工资显示为3倍</span></span><br><span class="line"><span class="comment">部门编号是60，工资显示为4倍</span></span><br><span class="line"><span class="comment">否则不变</span></span><br><span class="line"><span class="comment">显示 部门编号，新工资，旧工资</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> department_id,salary,</span><br><span class="line"><span class="keyword">CASE</span> department_id</span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">30</span> <span class="keyword">THEN</span> salary<span class="operator">*</span><span class="number">2</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">50</span> <span class="keyword">THEN</span> salary<span class="operator">*</span><span class="number">3</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">60</span> <span class="keyword">THEN</span> salary<span class="operator">*</span><span class="number">4</span></span><br><span class="line"><span class="keyword">ELSE</span> salary</span><br><span class="line"><span class="keyword">END</span>  newSalary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 情况2：类似于多重IF语句，实现区间判断</span></span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span></span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 结果n</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">案例：如果工资&gt;20000,显示级别A</span></span><br><span class="line"><span class="comment">      工资&gt;15000,显示级别B</span></span><br><span class="line"><span class="comment">      工资&gt;10000,显示级别C</span></span><br><span class="line"><span class="comment">      否则，显示D</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> salary,</span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">20000</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">15000</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">AS</span>  a</span><br><span class="line"><span class="keyword">FROM</span> employees;   </span><br></pre></td></tr></table></figure>

<h2 id="案例讲解"><a href="#案例讲解" class="headerlink" title="案例讲解"></a>案例讲解</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 显示系统时间(注：日期+时间)</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询员工号，姓名，工资，以及工资提高百分之 20%后的结果（new salary）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary,salary<span class="operator">*</span><span class="number">1.2</span> &quot;new salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 将员工的姓名按首字母排序，并写出姓名的长度（length）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> LENGTH(last_name) 长度</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> SUBSTR(last_name,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 做一个查询，产生下面的结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;last_name&gt; earns &lt;salary&gt; monthly but wants &lt;salary*3&gt;</span></span><br><span class="line"><span class="comment">          Dream Salary</span></span><br><span class="line"><span class="comment">King earns 24000 monthly but wants 72000</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(last_name,<span class="string">&#x27; earns &#x27;</span>,salary,<span class="string">&#x27; monthly but wants &#x27;</span>,salary<span class="operator">*</span><span class="number">3</span>)  &quot;Dream Salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 使用 case-when，按照下面的条件：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">job     grade</span></span><br><span class="line"><span class="comment">AD_PRES  A</span></span><br><span class="line"><span class="comment">ST_MAN   B</span></span><br><span class="line"><span class="comment">IT_PROG  C</span></span><br><span class="line"><span class="comment">SA_REP   D</span></span><br><span class="line"><span class="comment">ST_CLERK E</span></span><br><span class="line"><span class="comment">产生下面的结果</span></span><br><span class="line"><span class="comment">Last_name Job_id    Grade</span></span><br><span class="line"><span class="comment">king      AD_PRES   A</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,job_id,</span><br><span class="line"><span class="keyword">CASE</span> job_id</span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;AD_PRES&#x27;</span>  <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;ST_MAN&#x27;</span>  <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;IT_PROG&#x27;</span>  <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;SA_REP&#x27;</span>  <span class="keyword">THEN</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;ST_CLERK&#x27;</span>  <span class="keyword">THEN</span> <span class="string">&#x27;E&#x27;</span></span><br><span class="line"><span class="keyword">END</span> Grade</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>说明：分组函数往往用于实现将一组数据进行统计计算，最终得到一个值，又称为聚合函数或统计函数</p>
<p>分组函数清单：</p>
<ul>
<li>sum(字段名)：求和，参数只能是数值型</li>
<li>avg(字段名)：求平均数，参数只能是数值型</li>
<li>max(字段名)：求最大值</li>
<li>min(字段名)：求最小值</li>
<li>count(字段名)：计算非空字段值的个数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1 ：查询员工信息表中，所有员工的工资和、工资平均值、最低工资、最高工资、有工资的个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary),<span class="built_in">AVG</span>(salary),<span class="built_in">MIN</span>(salary),<span class="built_in">MAX</span>(salary),<span class="built_in">COUNT</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：添加筛选条件</span></span><br><span class="line"><span class="comment">-- 查询emp表中记录数：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(employee_id) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询emp表中有佣金的人数：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询emp表中月薪大于2500的人数：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(salary) <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary<span class="operator">&gt;</span><span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询有领导的人数：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(manager_id) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- count的补充介绍★</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1、统计结果集的行数，推荐使用count(*)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2、搭配distinct实现去重的统计</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 需求：查询有员工的部门个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> department_id) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 思考：每个部门的总工资、平均工资？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary)  <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary)  <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary) ,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br></pre></td></tr></table></figure>

<h1 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>查询列表往往是分组（聚合）函数和被分组的字段 ★<br>分组查询中的筛选分为两类</p>
<table>
<thead>
<tr>
<th></th>
<th>筛选的基表</th>
<th>使用的关键词</th>
<th>位置</th>
</tr>
</thead>
<tbody><tr>
<td>分组前筛选</td>
<td>原始表</td>
<td>where</td>
<td>group by 前面</td>
</tr>
<tr>
<td>分组后筛选</td>
<td>分组后的结果集</td>
<td>having</td>
<td>group by 后面</td>
</tr>
</tbody></table>
<p>顺序：where —— group by —— having<br>分组函数做条件只可能放在having后面！！！</p>
<h2 id="简单的分组"><a href="#简单的分组" class="headerlink" title="简单的分组"></a>简单的分组</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询每个工种的员工平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：查询每个领导的手下人数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>),manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id;</span><br></pre></td></tr></table></figure>

<h2 id="可以实现分组前的筛选"><a href="#可以实现分组前的筛选" class="headerlink" title="可以实现分组前的筛选"></a>可以实现分组前的筛选</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询邮箱中包含a字符的 每个部门的最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) 最高工资,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：查询每个领导手下有奖金的员工的平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) 平均工资,manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id;</span><br></pre></td></tr></table></figure>

<h2 id="可以实现分组后的筛选"><a href="#可以实现分组后的筛选" class="headerlink" title="可以实现分组后的筛选"></a>可以实现分组后的筛选</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询哪个部门的员工个数&gt;5</span></span><br><span class="line"><span class="comment">-- 分析1：查询每个部门的员工个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) 员工个数,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分析2：在刚才的结果基础上，筛选哪个部门的员工个数&gt;5</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) 员工个数,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span>  <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> job_id,<span class="built_in">MAX</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct  <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary)<span class="operator">&gt;</span><span class="number">12000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例3：领导编号&gt;102的    每个领导手下的最低工资大于5000的最低工资</span></span><br><span class="line"><span class="comment">-- 分析1：查询每个领导手下员工的最低工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) 最低工资,manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分析2：筛选刚才1的结果</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) 最低工资,manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id<span class="operator">&gt;</span><span class="number">102</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary)<span class="operator">&gt;</span><span class="number">5000</span> ;</span><br></pre></td></tr></table></figure>

<h2 id="可以实现排序"><a href="#可以实现排序" class="headerlink" title="可以实现排序"></a>可以实现排序</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询没有奖金的员工的最高工资&gt;6000的工种编号和最高工资,按最高工资升序</span></span><br><span class="line"><span class="comment">-- 分析1：按工种分组，查询每个工种有奖金的员工的最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) 最高工资,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span>  <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分析2：筛选刚才的结果，看哪个最高工资&gt;6000</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) 最高工资,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span>  <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary)<span class="operator">&gt;</span><span class="number">6000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分析3：按最高工资升序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) 最高工资,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span>  <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary)<span class="operator">&gt;</span><span class="number">6000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">MAX</span>(salary) <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>

<h2 id="按多个字段分组"><a href="#按多个字段分组" class="headerlink" title="按多个字段分组"></a>按多个字段分组</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询每个工种每个部门的最低工资,并按最低工资降序</span></span><br><span class="line"><span class="comment">-- 提示：工种和部门都一样，才是一组</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) 最低工资,job_id,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id,department_id;</span><br></pre></td></tr></table></figure>

<h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><p>说明：又称多表查询，当查询语句涉及到的字段来自于多个表时，就会用到连接查询</p>
<p><strong>笛卡尔乘积现象</strong>：表1 有m行，表2有n行，结果=m*n行<br>发生原因：没有有效的连接条件<br>如何避免：添加有效的连接条件</p>
<h2 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h2><h3 id="按年代分类："><a href="#按年代分类：" class="headerlink" title="按年代分类："></a>按年代分类：</h3><ol>
<li>sql92标准：仅仅支持内连接（等值连接、非等值连接、自连接）</li>
<li>sql99标准【推荐】：支持内连接 + 外连接（左外和右外）+ 交叉连接</li>
</ol>
<h3 id="按功能分类："><a href="#按功能分类：" class="headerlink" title="按功能分类："></a>按功能分类：</h3><ol>
<li>内连接：等值连接、非等值连接、自连接</li>
<li>外连接：左外连接、右外连接、全外连接</li>
<li>交叉连接</li>
</ol>
<h2 id="sql-92标准"><a href="#sql-92标准" class="headerlink" title="sql-92标准"></a>sql-92标准</h2><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法:</span><br><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span> 别名,表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">where</span> 连接条件</span><br><span class="line"><span class="keyword">and</span> 筛选条件</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组列表</span><br><span class="line"><span class="keyword">having</span> 分组后筛选</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序列表</span><br><span class="line"></span><br><span class="line">执行顺序：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、<span class="keyword">from</span>子句</span><br><span class="line"><span class="number">2</span>、<span class="keyword">where</span>子句</span><br><span class="line"><span class="number">3</span>、<span class="keyword">and</span>子句</span><br><span class="line"><span class="number">4</span>、<span class="keyword">group</span> <span class="keyword">by</span>子句</span><br><span class="line"><span class="number">5</span>、<span class="keyword">having</span>子句</span><br><span class="line"><span class="number">6</span>、<span class="keyword">select</span>子句</span><br><span class="line"><span class="number">7</span>、<span class="keyword">order</span> <span class="keyword">by</span>子句</span><br></pre></td></tr></table></figure>

<h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><ol>
<li>多表等值连接的结果为多表的交集部分</li>
<li>n表连接，至少需要n-1个连接条件</li>
<li>多表的顺序没有要求</li>
<li>一般需要为表起别名</li>
<li>可以搭配前面介绍的所有子句使用，比如排序、分组、筛选</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询女神名和对应的男神名</span></span><br><span class="line"><span class="keyword">SELECT</span> NAME,boyName </span><br><span class="line"><span class="keyword">FROM</span> boys,beauty</span><br><span class="line"><span class="keyword">WHERE</span> beauty.boyfriend_id<span class="operator">=</span> boys.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：查询员工名和对应的部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees,departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.`department_id`<span class="operator">=</span>departments.`department_id`;</span><br></pre></td></tr></table></figure>

<p>为表起别名:<br>注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定</p>
<ol>
<li>提高语句的简洁度</li>
<li>区分多个重名的字段</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工名、工种号、工种名</span></span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,e.job_id,j.job_title</span><br><span class="line"><span class="keyword">FROM</span> employees  e,jobs j</span><br><span class="line"><span class="keyword">WHERE</span> e.`job_id`<span class="operator">=</span>j.`job_id`;</span><br></pre></td></tr></table></figure>

<p>两个表的顺序可以调换</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工名、工种号、工种名</span></span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,e.job_id,j.job_title</span><br><span class="line"><span class="keyword">FROM</span> jobs j,employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.`job_id`<span class="operator">=</span>j.`job_id`;</span><br></pre></td></tr></table></figure>

<p>可以加筛选</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询有奖金的员工名、部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name,commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees e,departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line"><span class="keyword">AND</span> e.`commission_pct` <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：查询城市名中第二个字符为o的部门名和城市名</span></span><br><span class="line"><span class="keyword">SELECT</span> department_name,city</span><br><span class="line"><span class="keyword">FROM</span> departments d,locations l</span><br><span class="line"><span class="keyword">WHERE</span> d.`location_id` <span class="operator">=</span> l.`location_id`</span><br><span class="line"><span class="keyword">AND</span> city <span class="keyword">LIKE</span> <span class="string">&#x27;_o%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>可以加分组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询每个城市的部门个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) 个数,city</span><br><span class="line"><span class="keyword">FROM</span> departments d,locations l</span><br><span class="line"><span class="keyword">WHERE</span> d.`location_id`<span class="operator">=</span>l.`location_id`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资</span></span><br><span class="line"><span class="keyword">SELECT</span> department_name,d.`manager_id`,<span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> departments d,employees e</span><br><span class="line"><span class="keyword">WHERE</span> d.`department_id`<span class="operator">=</span>e.`department_id`</span><br><span class="line"><span class="keyword">AND</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_name,d.`manager_id`;</span><br></pre></td></tr></table></figure>

<p>可以加排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询每个工种的工种名和员工的个数，并且按员工个数降序</span></span><br><span class="line"><span class="keyword">SELECT</span> job_title,<span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees e,jobs j</span><br><span class="line"><span class="keyword">WHERE</span> e.`job_id`<span class="operator">=</span>j.`job_id`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_title</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<p>可以实现三表连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询员工名、部门名和所在的城市</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name,city</span><br><span class="line"><span class="keyword">FROM</span> employees e,departments d,locations l</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line"><span class="keyword">AND</span> d.`location_id`<span class="operator">=</span>l.`location_id`</span><br><span class="line"><span class="keyword">AND</span> city <span class="keyword">LIKE</span> <span class="string">&#x27;s%&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_name <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h4 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询员工的工资和工资级别</span></span><br><span class="line"><span class="keyword">SELECT</span> salary,grade_level</span><br><span class="line"><span class="keyword">FROM</span> employees e,job_grades g</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> g.`lowest_sal` <span class="keyword">AND</span> g.`highest_sal`</span><br><span class="line"><span class="keyword">AND</span> g.`grade_level`<span class="operator">=</span><span class="string">&#x27;A&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询 员工名和上级的名称</span></span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,e.last_name,m.employee_id,m.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e,employees m</span><br><span class="line"><span class="keyword">WHERE</span> e.`manager_id`<span class="operator">=</span>m.`employee_id`;</span><br></pre></td></tr></table></figure>

<h2 id="sql-99标准"><a href="#sql-99标准" class="headerlink" title="sql-99标准"></a>sql-99标准</h2><h3 id="内连接-1"><a href="#内连接-1" class="headerlink" title="内连接"></a>内连接</h3><p>SQL92和SQL99的区别：SQL99，使用<code>JOIN</code>关键字代替了之前的逗号，并且将连接条件和筛选条件进行了分离，提高阅读性！！！</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询列表</span><br><span class="line"><span class="keyword">FROM</span> 表名<span class="number">1</span> 别名</span><br><span class="line">【<span class="keyword">INNER</span>】 <span class="keyword">JOIN</span>  表名<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">ON</span> 连接条件</span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组列表</span><br><span class="line"><span class="keyword">HAVING</span> 分组后筛选</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序列表;</span><br></pre></td></tr></table></figure>

<h4 id="等值连接-1"><a href="#等值连接-1" class="headerlink" title="等值连接"></a>等值连接</h4><p>简单连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询员工名和部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> departments d </span><br><span class="line"><span class="keyword">JOIN</span>  employees e </span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span>d.department_id;</span><br></pre></td></tr></table></figure>

<p>添加筛选条件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询部门编号&gt;100的部门名和所在的城市名</span></span><br><span class="line"><span class="keyword">SELECT</span> department_name,city</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">JOIN</span> locations l</span><br><span class="line"><span class="keyword">ON</span> d.`location_id` <span class="operator">=</span> l.`location_id`</span><br><span class="line"><span class="keyword">WHERE</span> d.`department_id`<span class="operator">&gt;</span><span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>添加分组+筛选</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询每个城市的部门个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) 部门个数,l.`city`</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">JOIN</span> locations l</span><br><span class="line"><span class="keyword">ON</span> d.`location_id`<span class="operator">=</span>l.`location_id`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> l.`city`;</span><br></pre></td></tr></table></figure>

<p>添加分组+筛选+排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询部门中员工个数&gt;10的部门名，并按员工个数降序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) 员工个数,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> d.`department_id`</span><br><span class="line"><span class="keyword">HAVING</span> 员工个数<span class="operator">&gt;</span><span class="number">10</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 员工个数 <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h4 id="非等值连接-1"><a href="#非等值连接-1" class="headerlink" title="非等值连接"></a>非等值连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询部门编号在10-90之间的员工的工资级别，并按级别进行分组</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) 个数,grade</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">JOIN</span> sal_grade g</span><br><span class="line"><span class="keyword">ON</span> e.`salary` <span class="keyword">BETWEEN</span> g.`min_salary` <span class="keyword">AND</span> g.`max_salary`</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id` <span class="keyword">BETWEEN</span> <span class="number">10</span> <span class="keyword">AND</span> <span class="number">90</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> g.grade;</span><br></pre></td></tr></table></figure>

<h4 id="自连接-1"><a href="#自连接-1" class="headerlink" title="自连接"></a>自连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询员工名和对应的领导名</span></span><br><span class="line"><span class="keyword">SELECT</span> e.`last_name`,m.`last_name`</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">JOIN</span> employees m</span><br><span class="line"><span class="keyword">ON</span> e.`manager_id`<span class="operator">=</span>m.`employee_id`;</span><br></pre></td></tr></table></figure>

<h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>说明：查询结果为主表中所有的记录，如果从表有匹配项，则显示匹配项；如果从表没有匹配项，则显示null<br>应用场景：一般用于查询主表中有但从表没有的记录</p>
<p>特点：</p>
<ol>
<li>外连接分主从表，两表的顺序不能任意调换</li>
<li>左连接的话，left join左边为主表<br>右连接的话，right join右边为主表</li>
</ol>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span> 别名</span><br><span class="line"><span class="keyword">left</span><span class="operator">|</span><span class="keyword">right</span><span class="operator">|</span><span class="keyword">full</span> 【<span class="keyword">outer</span>】 <span class="keyword">join</span> 表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">where</span> 筛选条件;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：查询所有女神记录，以及对应的男神名，如果没有对应的男神，则显示为null</span></span><br><span class="line"><span class="comment">-- 左连接</span></span><br><span class="line"><span class="keyword">SELECT</span> b.<span class="operator">*</span>,bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> beauty b</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> boys bo <span class="keyword">ON</span> b.`boyfriend_id` <span class="operator">=</span> bo.`id`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 右连接</span></span><br><span class="line"><span class="keyword">SELECT</span> b.<span class="operator">*</span>,bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> boys bo</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span>  beauty b <span class="keyword">ON</span> b.`boyfriend_id` <span class="operator">=</span> bo.`id`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：查哪个女神没有男朋友</span></span><br><span class="line"><span class="comment">-- 左连接</span></span><br><span class="line"><span class="keyword">SELECT</span> b.`name`</span><br><span class="line"><span class="keyword">FROM</span> beauty b</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> boys bo <span class="keyword">ON</span> b.`boyfriend_id` <span class="operator">=</span> bo.`id`</span><br><span class="line"><span class="keyword">WHERE</span> bo.`id`  <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 右连接</span></span><br><span class="line"><span class="keyword">SELECT</span> b.<span class="operator">*</span>,bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> boys bo</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span>  beauty b <span class="keyword">ON</span> b.`boyfriend_id` <span class="operator">=</span> bo.`id`</span><br><span class="line"><span class="keyword">WHERE</span> bo.`id`  <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例3：查询哪个部门没有员工，并显示其部门编号和部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) 部门个数</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> employees e <span class="keyword">ON</span> d.`department_id` <span class="operator">=</span> e.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> e.`employee_id` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、查询编号&gt;3 的女神的男朋友信息，如果有则列出详细，如果没有，用 null 填充</span></span><br><span class="line"><span class="comment">4   小红     大飞</span></span><br><span class="line"><span class="comment">5   小白     大黄</span></span><br><span class="line"><span class="comment">6   小绿     NULL</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> b.id,b.name,bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> beauty b</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> boys bo <span class="keyword">ON</span> b.boyfriend_id <span class="operator">=</span> bo.id</span><br><span class="line"><span class="keyword">WHERE</span> b.id<span class="operator">&gt;</span><span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 二、查询哪个城市没有部门</span></span><br><span class="line"><span class="keyword">SELECT</span> l.city</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> locations l <span class="keyword">ON</span> l.location_id <span class="operator">=</span> d.location_id</span><br><span class="line"><span class="keyword">WHERE</span> d.`department_id` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 三、查询部门名为 SAL 或 IT 的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> d.<span class="operator">*</span>,e.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> employees e <span class="keyword">ON</span> d.`department_id` <span class="operator">=</span> e.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> d.`department_name` <span class="operator">=</span> <span class="string">&#x27;SAL&#x27;</span> <span class="keyword">OR</span> d.`department_name`<span class="operator">=</span><span class="string">&#x27;IT&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="测试题3"><a href="#测试题3" class="headerlink" title="测试题3"></a>测试题3</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 一、查询员工姓名、入职日期并按入职日期升序</span></span><br><span class="line"><span class="keyword">select</span> last_name,hiredate</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> hiredate <span class="keyword">asc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 还可以用日期函数</span></span><br><span class="line">date_formate(hiredate,<span class="string">&#x27;%Y&#x27;</span>)</span><br><span class="line"><span class="keyword">year</span>(hiredate)</span><br><span class="line"><span class="keyword">month</span>(hiredate)</span><br><span class="line"><span class="keyword">day</span>(hiredate)</span><br><span class="line"><span class="keyword">hour</span>(hiredate)</span><br><span class="line"><span class="keyword">minute</span>(hiredate)</span><br><span class="line"><span class="keyword">second</span>(hiredate)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 二、将当前日期显示成 xxxx年xx月xx日</span></span><br><span class="line"><span class="keyword">select</span> date_format(now(),<span class="string">&#x27;%Y年%m月%d日&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*三、</span></span><br><span class="line"><span class="comment">已知学员信息表stuinfo</span></span><br><span class="line"><span class="comment">    stuId</span></span><br><span class="line"><span class="comment">    stuName </span></span><br><span class="line"><span class="comment">    gender </span></span><br><span class="line"><span class="comment">    majorId</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">已知专业表major</span></span><br><span class="line"><span class="comment">    id    </span></span><br><span class="line"><span class="comment">    majorName</span></span><br><span class="line"><span class="comment">已知成绩表result</span></span><br><span class="line"><span class="comment">    id成绩编号</span></span><br><span class="line"><span class="comment">    majorid</span></span><br><span class="line"><span class="comment">    stuid</span></span><br><span class="line"><span class="comment">    score</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 1、查询所有男生的姓名、专业名和成绩，使用SQL92和SQL99两种语法方式实现</span></span><br><span class="line"><span class="comment">-- SQL92</span></span><br><span class="line"><span class="keyword">select</span> stuname,majorname,score</span><br><span class="line"><span class="keyword">from</span> stuinfo s,major m,<span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">where</span> s.majorid <span class="operator">=</span> m.id <span class="keyword">and</span> r.stuid <span class="operator">=</span> s.stuid</span><br><span class="line"><span class="keyword">and</span> s.gender <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL99</span></span><br><span class="line"><span class="keyword">select</span> stuname,majorname,score</span><br><span class="line"><span class="keyword">from</span> stuinfo s</span><br><span class="line"><span class="keyword">join</span> major m <span class="keyword">on</span> s.majorid <span class="operator">=</span> m.id </span><br><span class="line"><span class="keyword">join</span> <span class="keyword">result</span> r <span class="keyword">on</span> r.stuid <span class="operator">=</span> s.stuid</span><br><span class="line"><span class="keyword">where</span> s.gender <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2、查询每个性别的每个专业的平均成绩，并按平均成绩降序</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(score) 平均成绩,gendeer,s.majorid</span><br><span class="line"><span class="keyword">from</span> stuinfo s</span><br><span class="line"><span class="keyword">join</span> <span class="keyword">result</span> r <span class="keyword">on</span> s.stuid <span class="operator">=</span> r.stuid</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> gender,s.majorid</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 平均成绩 <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>说明：当一个查询语句中又嵌套了另一个完整的select语句，则被嵌套的select语句称为子查询或内查询<br>外面的select语句称为主查询或外查询。</p>
<p>按子查询出现的位置进行分类：</p>
<ol>
<li>select后面<br> 要求：子查询的结果为单行单列（标量子查询）</li>
<li>from后面<br> 要求：子查询的结果可以为多行多列</li>
<li>where或having后面 ★<br> 要求：子查询的结果必须为单列<pre><code> 单行子查询
 多行子查询
</code></pre>
</li>
<li>exists后面<br> 要求：子查询结果必须为单列（相关子查询）</li>
</ol>
<p>特点：</p>
<ol>
<li>子查询放在条件中，要求必须放在条件的右侧</li>
<li>子查询一般放在小括号中</li>
<li>子查询的执行优先于主查询</li>
<li>单行子查询对应了 单行操作符：&gt; &lt; &gt;= &lt;= = &lt;&gt;<br>多行子查询对应了 多行操作符：any/some  all in   </li>
</ol>
<h2 id="单行子查询-放在where或having后面"><a href="#单行子查询-放在where或having后面" class="headerlink" title="单行子查询(放在where或having后面)"></a>单行子查询(放在where或having后面)</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：谁的工资比 Abel 高?</span></span><br><span class="line"><span class="comment">-- （1）查询Abel的工资</span></span><br><span class="line"><span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name  <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line"><span class="comment">-- （2）查询salary&gt;（1）的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&gt;</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> salary</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> last_name  <span class="operator">&lt;&gt;</span> <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id 和工资</span></span><br><span class="line"><span class="comment">-- （1）查询141号员工的job_id</span></span><br><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">141</span></span><br><span class="line"><span class="comment">-- （2）查询143号员工的salary</span></span><br><span class="line"><span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">143</span></span><br><span class="line"><span class="comment">-- （3）查询job_id=（1） and salary&gt;（2）的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> job_id</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">141</span></span><br><span class="line">) <span class="keyword">AND</span> salary<span class="operator">&gt;</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> salary</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">143</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 查询和 Zlotkey 相同部门的员工姓名和工资</span></span><br><span class="line"><span class="comment">-- (1)查询Zlotkey的部门编号</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Zlotkey&#x27;</span></span><br><span class="line"><span class="comment">-- (2)查询department_id = (1)的员工姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> department_id</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Zlotkey&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询工资比公司平均工资高的员工的员工号，姓名和工资。</span></span><br><span class="line"><span class="comment">-- (1)查询平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="comment">-- (2)查询salary&gt;(1)的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&gt;</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h2><ol>
<li>in：判断某字段是否在指定列表内  </li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">x <span class="keyword">in</span>(<span class="number">10</span>,<span class="number">30</span>,<span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>any/some：判断某字段的值是否满足其中任意一个</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">x<span class="operator">&gt;</span><span class="keyword">any</span>(<span class="number">10</span>,<span class="number">30</span>,<span class="number">50</span>)</span><br><span class="line">x<span class="operator">&gt;</span><span class="built_in">min</span>()</span><br><span class="line"></span><br><span class="line">x<span class="operator">=</span><span class="keyword">any</span>(<span class="number">10</span>,<span class="number">30</span>,<span class="number">50</span>)</span><br><span class="line">x <span class="keyword">in</span>(<span class="number">10</span>,<span class="number">30</span>,<span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>all：判断某字段的值是否满足里面所有的</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">x <span class="operator">&gt;</span><span class="keyword">all</span>(<span class="number">10</span>,<span class="number">30</span>,<span class="number">50</span>)</span><br><span class="line">x <span class="operator">&gt;</span><span class="built_in">max</span>()</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：返回location_id是1400或1700的部门中的所有员工姓名</span></span><br><span class="line"><span class="comment">-- （1）查询location_id是1400或1700的部门</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">WHERE</span> location_id <span class="keyword">IN</span>(<span class="number">1400</span>,<span class="number">1700</span>)</span><br><span class="line"><span class="comment">-- （2）查询department_id = （1）的姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id</span><br><span class="line">    <span class="keyword">FROM</span> departments</span><br><span class="line">    <span class="keyword">WHERE</span> location_id <span class="keyword">IN</span>(<span class="number">1400</span>,<span class="number">1700</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 题目：返回其它部门中比job_id为‘IT_PROG’部门任一工资低的员工的员工号、姓名、job_id 以及salary</span></span><br><span class="line"><span class="comment">-- （—1）查询job_id为‘IT_PROG’部门的工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"><span class="comment">-- （2）查询其他部门的工资&lt;任意一个（1）的结果</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&lt;</span><span class="keyword">ANY</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&lt;</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary)</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例3：返回其它部门中比job_id为‘IT_PROG’部门所有工资都低的员工 的员工号、姓名、job_id 以及salary</span></span><br><span class="line"><span class="comment">-- （1）查询job_id为‘IT_PROG’部门的工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"><span class="comment">-- （2）查询其他部门的工资&lt;所有①的结果</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&lt;</span><span class="keyword">ALL</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&lt;</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="放在select后面"><a href="#放在select后面" class="headerlink" title="放在select后面"></a>放在select后面</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 不知道什么场景用</span></span><br><span class="line"><span class="comment">-- 案例；查询部门编号是50的员工个数</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span></span><br><span class="line">)  个数;</span><br></pre></td></tr></table></figure>

<h2 id="放在from后面"><a href="#放在from后面" class="headerlink" title="放在from后面"></a>放在from后面</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询每个部门的平均工资的工资级别</span></span><br><span class="line"><span class="comment">-- (1)查询每个部门的平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="comment">-- (2)将(1)和sal_grade两表连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> dep_ag.department_id,dep_ag.ag,g.grade</span><br><span class="line"><span class="keyword">FROM</span> sal_grade g</span><br><span class="line"><span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) ag,department_id</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">) dep_ag <span class="keyword">ON</span> dep_ag.ag <span class="keyword">BETWEEN</span> g.min_salary <span class="keyword">AND</span> g.max_salary;</span><br></pre></td></tr></table></figure>

<h2 id="放在exists后面"><a href="#放在exists后面" class="headerlink" title="放在exists后面"></a>放在exists后面</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1 ：查询有无名字叫“张三丰”的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line"></span><br><span class="line">) 有无Abel;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：查询没有女朋友的男神信息</span></span><br><span class="line"><span class="keyword">SELECT</span> bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> boys bo</span><br><span class="line"><span class="keyword">WHERE</span> bo.`id` <span class="keyword">NOT</span> <span class="keyword">IN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> boyfriend_id</span><br><span class="line">    <span class="keyword">FROM</span> beauty b</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> boys bo</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> boyfriend_id</span><br><span class="line">    <span class="keyword">FROM</span> beauty b</span><br><span class="line">    <span class="keyword">WHERE</span> bo.id <span class="operator">=</span> b.boyfriend_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h1 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h1><p>说明：当查询结果来自于多张表，但多张表之间没有关联，这个时候往往使用联合查询，也称为union查询</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表 <span class="keyword">from</span> 表<span class="number">1</span>  <span class="keyword">where</span> 筛选条件  </span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> 查询列表 <span class="keyword">from</span> 表<span class="number">2</span>  <span class="keyword">where</span> 筛选条件  </span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ol>
<li>多条待联合的查询语句的查询列数必须一致，查询类型、字段意义最好一致</li>
<li>union 实现去重查询<br>union all 实现全部查询，包含重复项</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询所有国家的年龄&gt;20岁的用户信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> usa <span class="keyword">WHERE</span> uage <span class="operator">&gt;</span><span class="number">20</span> </span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> chinese <span class="keyword">WHERE</span> age <span class="operator">&gt;</span><span class="number">20</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：查询所有国家的用户姓名和年龄</span></span><br><span class="line"><span class="keyword">SELECT</span> uname,uage <span class="keyword">FROM</span> usa</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> age,`name` <span class="keyword">FROM</span> chinese;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例3：union自动去重/union all 可以支持重复项</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>,<span class="string">&#x27;范冰冰&#x27;</span> </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>,<span class="string">&#x27;范冰冰&#x27;</span> </span><br><span class="line"><span class="keyword">UNION</span>  <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>,<span class="string">&#x27;范冰冰&#x27;</span> </span><br><span class="line"><span class="keyword">UNION</span>  <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>,<span class="string">&#x27;范冰冰&#x27;</span> ;</span><br></pre></td></tr></table></figure>

<h1 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h1><p>应用场景：当页面上的数据，一页显示不全，则需要分页显示<br>分页查询的sql命令请求数据库服务器——&gt;服务器响应查询到的多条数据——&gt;前台页面</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span> 别名</span><br><span class="line"><span class="keyword">join</span> 表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">where</span> 筛选条件</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组</span><br><span class="line"><span class="keyword">having</span> 分组后筛选</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序列表</span><br><span class="line">limit 起始条目索引,显示的条目数</span><br></pre></td></tr></table></figure>

<p>执行顺序：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>》<span class="keyword">from</span>子句</span><br><span class="line"><span class="number">2</span>》<span class="keyword">join</span>子句</span><br><span class="line"><span class="number">3</span>》<span class="keyword">on</span>子句</span><br><span class="line"><span class="number">4</span>》<span class="keyword">where</span>子句</span><br><span class="line"><span class="number">5</span>》<span class="keyword">group</span> <span class="keyword">by</span>子句</span><br><span class="line"><span class="number">6</span>》<span class="keyword">having</span>子句</span><br><span class="line"><span class="number">7</span>》<span class="keyword">select</span>子句</span><br><span class="line"><span class="number">8</span>》<span class="keyword">order</span> <span class="keyword">by</span>子句</span><br><span class="line"><span class="number">9</span>》limit子句</span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ol>
<li>起始条目索引如果不写，默认是0</li>
<li>limit后面支持两个参数<br>参数1：显示的起始条目索引<br>参数2：条目数</li>
</ol>
<p>公式：<br>假如要显示的页数是page，每页显示的条目数为size</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line">limit (page<span class="number">-1</span>)<span class="operator">*</span>size,size;</span><br><span class="line"></span><br><span class="line">page        size<span class="operator">=</span><span class="number">10</span></span><br><span class="line"><span class="number">1</span>           limit <span class="number">0</span>,<span class="number">10</span></span><br><span class="line"><span class="number">2</span>            limit <span class="number">10</span>,<span class="number">10</span></span><br><span class="line"><span class="number">3</span>            limit <span class="number">20</span>,<span class="number">10</span></span><br><span class="line"><span class="number">4</span>            limit <span class="number">30</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure>

<h1 id="子查询案例"><a href="#子查询案例" class="headerlink" title="子查询案例"></a>子查询案例</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 3. 查询各部门中工资比本部门平均工资高的员工的员工号, 姓名和工资</span></span><br><span class="line"><span class="comment">-- （1）查询各部门的平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id,<span class="built_in">AVG</span>(salary) ag</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="comment">-- （2）将（1）结果和employees表连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">JOIN</span>  (</span><br><span class="line">    <span class="keyword">SELECT</span> department_id,<span class="built_in">AVG</span>(salary) ag</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">) dep_ag <span class="keyword">ON</span> e.department_id <span class="operator">=</span> dep_ag.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.salary<span class="operator">&gt;</span>dep_ag.ag;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 查询和姓名中包含字母 u 的员工在相同部门的员工的员工号和姓名</span></span><br><span class="line"><span class="comment">-- （1）查询姓名中包含字母 u 的员工的部门编号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%u%&#x27;</span></span><br><span class="line"><span class="comment">-- （2）查询部门号是①的员工号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%u%&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6. 查询管理者是 King 的员工姓名和工资</span></span><br><span class="line"><span class="comment">-- （1）查询管理者是king的编号</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name  <span class="operator">=</span> <span class="string">&#x27;k_ing&#x27;</span></span><br><span class="line"><span class="comment">-- （2）查询哪个员工的领导编号是（1）</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id  <span class="keyword">IN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> employee_id</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> last_name  <span class="operator">=</span> <span class="string">&#x27;k_ing&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 查询平均工资最低的部门信息和该部门的平均工资</span></span><br><span class="line"><span class="comment">-- （1）查询各部门的平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) ag,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="comment">-- （2）查询哪个部门的平均工资最低</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) ag,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ag </span><br><span class="line">LIMIT <span class="number">1</span></span><br><span class="line"><span class="comment">-- （3）连接（2）和departments表</span></span><br><span class="line"><span class="keyword">SELECT</span> d.<span class="operator">*</span>,dep_ag.ag</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) ag,department_id</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> ag </span><br><span class="line">    LIMIT <span class="number">1</span></span><br><span class="line">) dep_ag <span class="keyword">ON</span> d.department_id <span class="operator">=</span> dep_ag.department_id</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 7. 各个部门中 最高工资中最低的那个部门的 最低工资是多少</span></span><br><span class="line"><span class="comment">-- （1）查询各部门的最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) mx,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="comment">-- （2）查询各部门的最高工资最低的那个部门</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">MAX</span>(salary) </span><br><span class="line">LIMIT <span class="number">1</span></span><br><span class="line"><span class="comment">-- （3）查询部门编号是②的部门的最低工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> department_id</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">MAX</span>(salary) </span><br><span class="line">    LIMIT <span class="number">1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h1 id="DDL语言"><a href="#DDL语言" class="headerlink" title="DDL语言"></a>DDL语言</h1><p>说明：Data Define Language数据定义语言,用于对数据库和表的管理和操作</p>
<h2 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE stuDB;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> stuDB;</span><br></pre></td></tr></table></figure>

<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE stuDB;</span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> stuDB;</span><br></pre></td></tr></table></figure>

<h2 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 表名(</span><br><span class="line">    字段名  字段类型  【字段约束】,</span><br><span class="line">    字段名  字段类型  【字段约束】,</span><br><span class="line">    字段名  字段类型  【字段约束】,</span><br><span class="line">    字段名  字段类型  【字段约束】,</span><br><span class="line">    字段名  字段类型  【字段约束】</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例：没有添加约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> stuinfo(</span><br><span class="line">    stuid <span class="type">INT</span> ,</span><br><span class="line">    stuname <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    stugender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    borndate DATETIME</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例：添加约束</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> stuinfo;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> stuinfo(</span><br><span class="line">    stuid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,                  <span class="comment">-- 添加了主键约束</span></span><br><span class="line">    stuname <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 添加了唯一约束+非空</span></span><br><span class="line">    stugender <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span>,      <span class="comment">-- 添加了默认约束</span></span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">CHECK</span>( age <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">100</span>), <span class="comment">-- 添加了检查约束，mysql不支持</span></span><br><span class="line">    majorid <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> fk_stuinfo_major <span class="keyword">FOREIGN</span> KEY (majorid) <span class="keyword">REFERENCES</span> major(id) <span class="comment">-- 添加了外键约束</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 支持表级约束：UNIQUE、PRIMARY KEY、FOREIGN KEY </span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> stuinfo;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> stuinfo(</span><br><span class="line">    stuid <span class="type">INT</span> ,                  </span><br><span class="line">    stuname <span class="type">VARCHAR</span>(<span class="number">20</span>) , </span><br><span class="line">    stugender <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span>,      <span class="comment">-- 添加了默认约束</span></span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">CHECK</span>( age <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">100</span>), <span class="comment">-- 添加了检查约束，mysql不支持</span></span><br><span class="line">    majorid <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(id),                 <span class="comment">-- 添加了主键约束</span></span><br><span class="line">    <span class="keyword">CONSTRAINT</span> uq <span class="keyword">unique</span>(name),        <span class="comment">-- 添加了唯一约束+非空</span></span><br><span class="line">    <span class="keyword">CONSTRAINT</span> fk_stuinfo_major <span class="keyword">FOREIGN</span> KEY (majorid) <span class="keyword">REFERENCES</span> major(id), <span class="comment">-- 添加了外键约束</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>整型</td>
<td>TINYINT、SMALLINT、 INT、 BIGINT</td>
</tr>
<tr>
<td>浮点型</td>
<td>FLOAT(m,n)、DOUBLE(m,n) 、DECIMAL(m,n)，m和n可选，m：总位数，n：小数位数</td>
</tr>
<tr>
<td>字符型</td>
<td>CHAR(n)：n可选<br/>VARCHAR(n)：n必选<br/>TEXT<br/>n表示最多字符个数</td>
</tr>
<tr>
<td>日期型</td>
<td>DATE、TIME 、DATETIME、TIMESTAMP</td>
</tr>
<tr>
<td>二进制型</td>
<td>BLOB 存储图片数据</td>
</tr>
</tbody></table>
<h3 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h3><p>说明：用于限制表中字段的数据的，从而进一步保证数据表的数据是一致的、准确的、可靠的！</p>
<ul>
<li><code>NOT NULL</code> 非空：用于限制该字段为必填项</li>
<li><code>DEFAULT</code> 默认：用于限制该字段没有显式插入值，则直接显式默认值</li>
<li><code>PRIMARY KEY</code> 主键：用于限制该字段值不能重复，设置为主键列的字段默认不能为空。一个表只能有一个主键，当然可以是组合主键</li>
<li><code>UNIQUE</code> 唯一：用于限制该字段值不能重复</li>
<li><code>CHECK</code>检查：用于限制该字段值必须满足指定条件。<code>CHECK(age BETWEEN 1 AND 100)</code></li>
<li><code>FOREIGN KEY</code> 外键：用于限制两个表的关系,要求外键列的值必须来自于主表的关联列。<br>要求：<ol>
<li>主表的关联列和从表的关联列的类型必须一致，意思一样，名称无要求</li>
<li>主表的关联列要求必须是主键</li>
</ol>
</li>
</ul>
<h3 id="修改表-了解"><a href="#修改表-了解" class="headerlink" title="修改表[了解]"></a>修改表[了解]</h3><p>语法：ALTER TABLE 表名 ADD|MODIFY|CHANGE|DROP COLUMN 字段名 字段类型 【字段约束】;</p>
<ol>
<li><p>修改表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo RENAME <span class="keyword">TO</span> students;</span><br></pre></td></tr></table></figure></li>
<li><p>添加字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> borndate <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">DESC</span> students;</span><br></pre></td></tr></table></figure></li>
<li><p>修改字段名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students CHANGE <span class="keyword">COLUMN</span> borndate birthday DATETIME <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>修改字段类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students MODIFY <span class="keyword">COLUMN</span> birthday <span class="type">TIMESTAMP</span> ;</span><br></pre></td></tr></table></figure></li>
<li><p>删除字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> birthday;</span><br><span class="line"><span class="keyword">DESC</span> students;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> students;</span><br></pre></td></tr></table></figure>

<h3 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 仅仅复制表的结构</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newTable2 <span class="keyword">LIKE</span> major;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 复制表的结构+数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newTable3 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> girls.`beauty`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例：复制employees表中的last_name,department_id,salary字段到新表 emp表，但不复制数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp </span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_id,salary </span><br><span class="line"><span class="keyword">FROM</span> myemployees.`employees`</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h1 id="测试题4"><a href="#测试题4" class="headerlink" title="测试题4"></a>测试题4</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.使用分页查询实现，查询员工信息表中部门为50号的工资最低的5名员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> deparrment_id <span class="operator">=</span> <span class="number">50</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">asc</span></span><br><span class="line">limit <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.使用子查询实现城市为Toroto的，且工资&gt;10000的员工姓名</span></span><br><span class="line"><span class="comment">-- (1)查询城市为Toroto的部门编号</span></span><br><span class="line"><span class="keyword">select</span> department_id</span><br><span class="line"><span class="keyword">from</span> departments d</span><br><span class="line"><span class="keyword">join</span> locations l <span class="keyword">on</span> d.location_id <span class="operator">=</span> l.location_id</span><br><span class="line"><span class="keyword">where</span> city <span class="operator">=</span> <span class="string">&#x27;Toroto&#x27;</span></span><br><span class="line"><span class="comment">-- (2)查询部门号在(1)里面的员工姓名</span></span><br><span class="line"><span class="keyword">select</span> last_name</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> salary<span class="operator">&gt;</span><span class="number">10000</span> <span class="keyword">and</span> department_id <span class="keyword">in</span>(</span><br><span class="line">    <span class="keyword">select</span> department_id</span><br><span class="line">    <span class="keyword">from</span> departments d</span><br><span class="line">    <span class="keyword">join</span> locations l <span class="keyword">on</span> d.location_id <span class="operator">=</span> l.location_id</span><br><span class="line">    <span class="keyword">where</span> city <span class="operator">=</span> <span class="string">&#x27;Toroto&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.创建表qqinfo，里面包含qqid，添加主键约束、昵称nickname，添加唯一约束、邮箱email（添加非空约束）、性别gender</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> qqinfo(</span><br><span class="line">    qqid <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    nickname <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span>,</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    gender <span class="type">char</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4.删除表qqinfo</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> qqinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5.试写出sql查询语句的定义顺序和执行顺序</span></span><br><span class="line"><span class="number">1</span>》定义顺序（书写顺序）</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span>  查询列表</span><br><span class="line"><span class="keyword">from</span> 表名 别名</span><br><span class="line"><span class="keyword">join</span> 表名 别名 </span><br><span class="line"><span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">where</span> 筛选条件</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组列表</span><br><span class="line"><span class="keyword">having</span> 分组后筛选</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序列表</span><br><span class="line">limit 条目数;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>》执行顺序</span><br><span class="line"><span class="keyword">from</span>子句</span><br><span class="line"><span class="keyword">join</span>子句</span><br><span class="line"><span class="keyword">on</span>子句</span><br><span class="line"><span class="keyword">where</span>子句</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>子句</span><br><span class="line"><span class="keyword">having</span>子句</span><br><span class="line"><span class="keyword">select</span> 子句</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>子句</span><br><span class="line">limit子句</span><br></pre></td></tr></table></figure>

<h1 id="DML-Data-Manipulation-Language-数据操纵语言"><a href="#DML-Data-Manipulation-Language-数据操纵语言" class="headerlink" title="DML(Data Manipulation Language)数据操纵语言"></a>DML(Data Manipulation Language)数据操纵语言</h1><p><code>insert update delete</code>,对表中的数据的增删改</p>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入单行：</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名<span class="number">1</span>,字段名<span class="number">2</span> ,...) <span class="keyword">values</span> (值<span class="number">1</span>，值<span class="number">2</span>,...);</span><br><span class="line"><span class="comment">-- 插入多行：</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名<span class="number">1</span>,字段名<span class="number">2</span> ,...) <span class="keyword">values</span></span><br><span class="line">     (值<span class="number">1</span>，值<span class="number">2</span>,...),(值<span class="number">1</span>，值<span class="number">2</span>,...),(值<span class="number">1</span>，值<span class="number">2</span>,...);</span><br></pre></td></tr></table></figure>

<p>特点</p>
<ol>
<li>字段和值列表一一对应。包含类型、约束等必须匹配</li>
<li>数值型的值，不用单引号。非数值型的值，必须使用单引号</li>
<li>字段顺序无要求</li>
</ol>
<h3 id="向表中的全部字段添加值"><a href="#向表中的全部字段添加值" class="headerlink" title="向表中的全部字段添加值"></a>向表中的全部字段添加值</h3><p>向表中所有字段插入值的方法有两种：一种是指定所有字段名；另一种是完全不指定字段名。<br>INSERT 语句后面的列名称顺序可以不是 tb_courses 表定义时的顺序，即插入数据时，不需要按照表定义的顺序插入，只要保证值的顺序与列字段的顺序相同就可以。</p>
<p>【实例 1】在 tb_courses 表中插入一条新记录，course_id 值为 1，course_name 值为“Network”，course_grade 值为 3，info 值为“Computer Network”</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_courses</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> (course_id,course_name,course_grade,course_info)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;Network&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;Computer Network&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">rows</span> affected (<span class="number">0.08</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_courses;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+--------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> course_id <span class="operator">|</span> course_name <span class="operator">|</span> course_grade <span class="operator">|</span> course_info      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+--------------+------------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span> Network     <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span> Computer Network <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+--------------+------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>【实例 2】在 tb_courses 表中插入一条新记录，course_id 值为 2，course_name 值为“Database”，course_grade 值为 3，info值为“MySQL”。输入的 SQL 语句和执行结果如下所示</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_courses</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> (course_name,course_info,course_id,course_grade)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span>(<span class="string">&#x27;Database&#x27;</span>,<span class="string">&#x27;MySQL&#x27;</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">rows</span> affected (<span class="number">0.08</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_courses;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+--------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> course_id <span class="operator">|</span> course_name <span class="operator">|</span> course_grade <span class="operator">|</span> course_info      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+--------------+------------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span> Network     <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span> Computer Network <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">2</span> <span class="operator">|</span> Database    <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span> MySQL            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+--------------+------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>使用 INSERT 插入数据时，允许列名称列表 column_list 为空，此时值列表中需要为表的每一个字段指定值，并且值的顺序必须和数据表中字段定义时的顺序相同。</p>
<p>【实例 3】在 tb_courses 表中插入一条新记录，course_id 值为 3，course_name 值为“Java”，course_grade 值为 4，info 值为“Jave EE”。输入的 SQL 语句和执行结果如下所示。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_courses</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> VLAUES(<span class="number">3</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">4</span>,<span class="string">&#x27;Java EE&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">rows</span> affected (<span class="number">0.08</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_courses;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+--------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> course_id <span class="operator">|</span> course_name <span class="operator">|</span> course_grade <span class="operator">|</span> course_info      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+--------------+------------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span> Network     <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span> Computer Network <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">2</span> <span class="operator">|</span> Database    <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span> MySQL            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span> Java        <span class="operator">|</span>            <span class="number">4</span> <span class="operator">|</span> Java EE          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+--------------+------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>INSERT 语句中没有指定插入列表，只有一个值列表。在这种情况下，值列表为每一个字段列指定插入的值，并且这些值的顺序必须和 tb_courses 表中字段定义的顺序相同。</p>
<h3 id="向表中指定字段添加值"><a href="#向表中指定字段添加值" class="headerlink" title="向表中指定字段添加值"></a>向表中指定字段添加值</h3><p>为表的指定字段插入数据，是在 INSERT 语句中只向部分字段中插入值，而其他字段的值为表定义时的默认值。</p>
<p>【实例 4】在 tb_courses 表中插入一条新记录，course_name 值为“System”，course_grade 值为 3，course_info 值为“Operating System”，输入的 SQL 语句和执行结果如下所示。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_courses</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> (course_name,course_grade,course_info)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span>(<span class="string">&#x27;System&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;Operation System&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">rows</span> affected (<span class="number">0.08</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_courses;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+--------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> course_id <span class="operator">|</span> course_name <span class="operator">|</span> course_grade <span class="operator">|</span> course_info      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+--------------+------------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span> Network     <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span> Computer Network <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">2</span> <span class="operator">|</span> Database    <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span> MySQL            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span> Java        <span class="operator">|</span>            <span class="number">4</span> <span class="operator">|</span> Java EE          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">4</span> <span class="operator">|</span> <span class="keyword">System</span>      <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span> Operating <span class="keyword">System</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+--------------+------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>可以看到插入记录成功。如查询结果显示，这里的 course_id 字段自动添加了一个整数值 4。这时的 course_id 字段为表的主键，不能为空，系统自动为该字段插入自增的序列值。在插入记录时，如果某些字段没有指定插入值，MySQL 将插入该字段定义时的默认值。</p>
<h3 id="使用-INSERT-INTO…FROM-语句复制表数据"><a href="#使用-INSERT-INTO…FROM-语句复制表数据" class="headerlink" title="使用 INSERT INTO…FROM 语句复制表数据"></a>使用 INSERT INTO…FROM 语句复制表数据</h3><p>INSERT INTO…SELECT…FROM 语句用于快速地从一个或多个表中取出数据，并将这些数据作为行数据插入另一个表中。<br>SELECT 子句返回的是一个查询到的结果集，INSERT 语句将这个结果集插入指定表中，结果集中的每行数据的字段数、字段的数据类型都必须与被操作的表完全一致。</p>
<p>【实例 5】从 tb_courses 表中查询所有的记录，并将其插入 tb_courses_new 表中。输入的 SQL 语句和执行结果如下所示。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_courses_new</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> (course_id,course_name,course_grade,course_info)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> course_id,course_name,course_grade,course_info</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> tb_courses;</span><br><span class="line">Query OK, <span class="number">4</span> <span class="keyword">rows</span> affected (<span class="number">0.17</span> sec)</span><br><span class="line">Records: <span class="number">4</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_courses_new;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+--------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> course_id <span class="operator">|</span> course_name <span class="operator">|</span> course_grade <span class="operator">|</span> course_info      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+--------------+------------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span> Network     <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span> Computer Network <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">2</span> <span class="operator">|</span> Database    <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span> MySQL            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span> Java        <span class="operator">|</span>            <span class="number">4</span> <span class="operator">|</span> Java EE          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">4</span> <span class="operator">|</span> <span class="keyword">System</span>      <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span> Operating <span class="keyword">System</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+--------------+------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>课程的案例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：要求字段和值列表一一对应，且遵循类型和约束的限制</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stuinfo(stuid,stuname,stugender,email,age,majorid)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;吴倩&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;wuqian@qq.com&#x27;</span>,<span class="number">12</span>,<span class="number">1</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stuinfo(stuid,stuname,stugender,email,age,majorid)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">&#x27;李宗盛2&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;wuqian@qq.com&#x27;</span>,<span class="number">45</span>,<span class="number">2</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：可以为空字段如何插入</span></span><br><span class="line"><span class="comment">-- 方案1：字段名和值都不写</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stuinfo(stuid,stuname,email,majorid)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;齐鱼&#x27;</span>,<span class="string">&#x27;qiqin@qq.com&#x27;</span>,<span class="number">2</span>); </span><br><span class="line"><span class="comment">-- 方案2：字段名写上，值使用null</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stuinfo(stuid,stuname,email,age,majorid)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;齐鱼&#x27;</span>,<span class="string">&#x27;qiqin@qq.com&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">2</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例3：默认字段如何插入</span></span><br><span class="line"><span class="comment">-- 方案1：字段名写上，值使用default</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stuinfo(stuid,stuname,email,stugender,majorid)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="string">&#x27;齐小鱼&#x27;</span>,<span class="string">&#x27;qiqin@qq.com&#x27;</span>,<span class="keyword">DEFAULT</span>,<span class="number">2</span>); </span><br><span class="line"><span class="comment">-- 方案2：字段名和值都不写</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stuinfo(stuid,stuname,email,majorid)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="string">&#x27;齐小鱼&#x27;</span>,<span class="string">&#x27;qiqin@qq.com&#x27;</span>,<span class="number">2</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例4：可以省略字段列表，默认所有字段</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stuinfo <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="string">&#x27;林忆莲&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;lin@126.com&#x27;</span>,<span class="number">12</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stuinfo <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;小黄&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;dd@12.com&#x27;</span>,<span class="number">12</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h3 id="设置自增长列"><a href="#设置自增长列" class="headerlink" title="设置自增长列"></a>设置自增长列</h3><ol>
<li>自增长列要求必须设置在一个键上，比如主键或唯一键</li>
<li>自增长列要求数据类型为数值型</li>
<li>一个表至多有一个自增长列</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> gradeinfo(</span><br><span class="line">    gradeID <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    gradeName <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> gradeinfo <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;一年级&#x27;</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;2年级&#x27;</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;3年级&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> gradeinfo(gradename)<span class="keyword">VALUES</span>(<span class="string">&#x27;一年级&#x27;</span>),(<span class="string">&#x27;2年级&#x27;</span>),(<span class="string">&#x27;3年级&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><ol>
<li>修改单表的记录</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line">update 表名</span><br><span class="line"><span class="keyword">set</span> 列<span class="operator">=</span>新值,列<span class="operator">=</span>新值,...</span><br><span class="line"><span class="keyword">where</span> 筛选条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例1</span></span><br><span class="line">UPDATE beauty </span><br><span class="line"><span class="keyword">set</span> phone<span class="operator">=</span><span class="string">&#x27;138999999&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">like</span> <span class="string">&#x27;唐%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2</span></span><br><span class="line">UPDATE boys <span class="keyword">SET</span> boyname<span class="operator">=</span><span class="string">&#x27;张飞&#x27;</span>,usercp<span class="operator">=</span><span class="number">10</span></span><br><span class="line"><span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改多表的记录</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- sql92语法</span></span><br><span class="line">update 表<span class="number">1</span> 别名,表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">set</span> 列<span class="operator">=</span>值,....</span><br><span class="line"><span class="keyword">WHERE</span> 连接条件</span><br><span class="line"><span class="keyword">and</span> 筛选条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- sql99语法</span></span><br><span class="line">update 表<span class="number">1</span> 别名</span><br><span class="line"><span class="keyword">inner</span><span class="operator">|</span><span class="keyword">left</span><span class="operator">|</span><span class="keyword">right</span> <span class="keyword">join</span> 表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">set</span> 列<span class="operator">=</span>值,....</span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例1</span></span><br><span class="line">UPDATE boys bo</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> beauty b <span class="keyword">on</span> bo.id <span class="operator">=</span> b.boyfriend_id</span><br><span class="line"><span class="keyword">SET</span> b.phone<span class="operator">=</span><span class="number">114</span></span><br><span class="line"><span class="keyword">WHERE</span> bo.boyName<span class="operator">=</span><span class="string">&#x27;张无忌&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><ol>
<li>delete语句：语法：<code>delete from 表名 where 筛选条件;</code></li>
<li>truncate语句：语法：<code>truncate table 表名;</code></li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例1：删除姓李所有信息</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> stuinfo <span class="keyword">WHERE</span> stuname <span class="keyword">LIKE</span> <span class="string">&#x27;李%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2：删除表中所有数据</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> stuinfo ;</span><br></pre></td></tr></table></figure>

<h3 id="【面试题】delete和truncate的区别"><a href="#【面试题】delete和truncate的区别" class="headerlink" title="【面试题】delete和truncate的区别"></a>【面试题】delete和truncate的区别</h3><ol>
<li><code>delete</code>可以添加<code>WHERE</code>条件<br><code>TRUNCATE</code>不能添加<code>WHERE</code>条件，一次性清除所有数据</li>
<li><code>truncate</code>的效率较高</li>
<li>如果删除带自增长列的表，<br>使用<code>DELETE</code>删除后，重新插入数据，记录从断点处开始<br>使用<code>TRUNCATE</code>删除后，重新插入数据，记录从1开始</li>
<li><code>delete</code> 删除数据，会返回受影响的行数<br><code>TRUNCATE</code>删除数据，不返回受影响的行数</li>
<li><code>delete</code>删除数据，可以支持事务回滚<br><code>TRUNCATE</code>删除数据，不支持事务回滚</li>
</ol>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>概念：由一条或多条sql语句组成，要么都成功，要么都失败</p>
<p>特性：ACID：原子性、一致性、隔离性、持久性</p>
<p>分类：</p>
<ul>
<li>隐式事务：没有明显的开启和结束标记<pre><code>     比如dml语句的insert、update、delete语句本身就是一条事务
     `insert into stuinfo values(1,&#39;john&#39;,&#39;男&#39;,&#39;ert@dd.com&#39;,12);`
</code></pre>
</li>
<li>显式事务：具有明显的开启和结束标记<pre><code>     一般由多条sql语句组成，必须具有明显的开启和结束标记
</code></pre>
</li>
</ul>
<p>步骤：取消隐式事务自动开启的功能</p>
<ol>
<li>开启事务</li>
<li>编写事务需要的sql语句（1条或多条）<br><code>insert into stuinfo values(1,&#39;john&#39;,&#39;男&#39;,&#39;ert@dd.com&#39;,12);</code><br><code>insert into stuinfo values(1,&#39;john&#39;,&#39;男&#39;,&#39;ert@dd.com&#39;,12);</code></li>
<li>结束事务</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%auto%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 演示事务的使用步骤</span></span><br><span class="line"><span class="comment">-- 1、取消事务自动开启</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2、开启事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3、编写事务的sql语句</span></span><br><span class="line"><span class="comment">-- 将张三丰的钱-5000</span></span><br><span class="line">UPDATE stuinfo <span class="keyword">SET</span> balance<span class="operator">=</span>balance<span class="number">-5000</span> <span class="keyword">WHERE</span> stuid <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 将灭绝的钱+5000</span></span><br><span class="line">UPDATE stuinfo <span class="keyword">SET</span> balance<span class="operator">=</span>balance<span class="operator">+</span><span class="number">5000</span> <span class="keyword">WHERE</span> stuid <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4、结束事务</span></span><br><span class="line"><span class="comment">-- 提交</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="comment">-- 回滚</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> stuinfo;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>django笔记04 - 数据库</title>
    <url>/2019/01/26/django%E7%AC%94%E8%AE%B004/</url>
    <content><![CDATA[<h1 id="Django配置连接数据库"><a href="#Django配置连接数据库" class="headerlink" title="Django配置连接数据库"></a>Django配置连接数据库</h1><p>settings.py文件中数据库相关的配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># 数据库引擎（是mysql还是oracle等）</span></span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="comment"># 数据库的名字</span></span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;dfz&#x27;</span>,</span><br><span class="line">        <span class="comment"># 连接mysql数据库的用户名</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="comment"># 连接mysql数据库的密码</span></span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="comment"># mysql数据库的主机地址</span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="comment"># mysql数据库的端口号</span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="在Django中操作数据库"><a href="#在Django中操作数据库" class="headerlink" title="在Django中操作数据库"></a>在Django中操作数据库</h1><p>下面是使用原生sql语句操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用django封装好的connection对象，会自动读取settings.py中数据库的配置信息</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> connection</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取游标对象</span></span><br><span class="line">cursor = connection.cursor()</span><br><span class="line"><span class="comment"># 拿到游标对象后执行sql语句</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from book&quot;</span>)</span><br><span class="line"><span class="comment"># 获取所有的数据</span></span><br><span class="line">rows = cursor.fetchall()</span><br><span class="line"><span class="comment"># 遍历查询到的数据</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br></pre></td></tr></table></figure>

<p>以上的<code>execute</code>以及<code>fetchall</code>方法都是<code>Python DB API</code>规范中定义好的。任何使用<code>Python</code>来操作<code>MySQL</code>的驱动程序都应该遵循这个规范。所以不管是使用<code>pymysql</code>或者是<code>mysqlclient</code>或者是<code>mysqldb</code>，他们的接口都是一样的。</p>
<h1 id="Python-DB-API下规范下cursor对象常用接口："><a href="#Python-DB-API下规范下cursor对象常用接口：" class="headerlink" title="Python DB API下规范下cursor对象常用接口："></a>Python DB API下规范下cursor对象常用接口：</h1><ol>
<li><code>description</code>：如果<code>cursor</code>执行了查询的<code>sql</code>代码。那么读取<code>cursor.description</code>属性的时候，将返回一个列表，这个列表中装的是元组，元组中装的分别是<code>(name,type_code,display_size,internal_size,precision,scale,null_ok)</code>，其中<code>name</code>代表的是查找出来的数据的字段名称，其他参数暂时用处不大。</li>
<li><code>rowcount</code>：代表的是在执行了<code>sql</code>语句后受影响的行数。</li>
<li><code>close</code>：关闭游标。关闭游标以后就再也不能使用了，否则会抛出异常。</li>
<li><code>execute(sql[,parameters])</code>：执行某个<code>sql</code>语句。如果在执行<code>sql</code>语句的时候还需要传递参数，那么可以传给<code>parameters</code>参数。示例代码如下：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor.execute(<span class="string">&quot;select * from article where id=%s&quot;</span>,(<span class="number">1</span>,))</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><code>fetchone</code>：在执行了查询操作以后，获取第一条数据。</li>
<li><code>fetchmany(size)</code>：在执行查询操作以后，获取多条数据。具体是多少条要看传的<code>size</code>参数。如果不传<code>size</code>参数，那么默认是获取第一条数据。</li>
<li><code>fetchall</code>：获取所有满足<code>sql</code>语句的数据。</li>
</ol>
<h1 id="ORM模型的创建和映射："><a href="#ORM模型的创建和映射：" class="headerlink" title="ORM模型的创建和映射："></a>ORM模型的创建和映射：</h1><h2 id="创建ORM模型："><a href="#创建ORM模型：" class="headerlink" title="创建ORM模型："></a>创建ORM模型：</h2><p><code>ORM</code>模型一般都是放在<code>app</code>的<code>models.py</code>文件中。每个<code>app</code>都可以拥有自己的模型。并且如果这个模型想要映射到数据库中，那么这个<code>app</code>必须要放在<code>settings.py</code>的<code>INSTALLED_APP</code>中进行安装。以下是写一个简单的书籍<code>ORM</code>模型。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>,null=<span class="literal">False</span>)</span><br><span class="line">    author = models.CharField(max_length=<span class="number">20</span>,null=<span class="literal">False</span>)</span><br><span class="line">    pub_time = models.DateTimeField(default=datetime.now)</span><br><span class="line">    price = models.FloatField(default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>以上便定义了一个模型。这个模型继承自<code>django.db.models.Model</code>，如果这个模型想要映射到数据库中，就必须继承自这个类。这个模型以后映射到数据库中，表名是模型名称的小写形式，为<code>book</code>。在这个表中，有四个字段，一个为<code>name</code>，这个字段是保存的是书的名称，是<code>varchar</code>类型，最长不能超过20个字符，并且不能为空。第二个字段是作者名字类型，同样也是<code>varchar</code>类型，长度不能超过20个。第三个是出版时间，数据类型是<code>datetime</code>类型，默认是保存这本书籍的时间。第五个是这本书的价格，是浮点类型。<br>还有一个字段我们没有写，就是主键<code>id</code>，在<code>django</code>中，如果一个模型没有定义主键，那么将会自动生成一个自动增长的<code>int</code>类型的主键，并且这个主键的名字就叫做<code>id</code>。</p>
<h2 id="映射模型到数据库中："><a href="#映射模型到数据库中：" class="headerlink" title="映射模型到数据库中："></a>映射模型到数据库中：</h2><p>将<code>ORM</code>模型映射到数据库中，总结起来就是以下几步：</p>
<ol>
<li>在<code>settings.py</code>中，配置好<code>DATABASES</code>，做好数据库相关的配置。</li>
<li>在<code>app</code>中的<code>models.py</code>中定义好模型，这个模型必须继承自<code>django.db.models</code>。</li>
<li>将这个<code>app</code>添加到<code>settings.py</code>的<code>INSTALLED_APP</code>中。</li>
<li>在命令行终端，进入到项目所在的路径，然后执行命令<code>python manage.py makemigrations</code>来生成迁移脚本文件。</li>
<li>同样在命令行中，执行命令<code>python manage.py migrate</code>来将迁移脚本文件映射到数据库中。</li>
</ol>
<h1 id="ORM对数据库的基本操作"><a href="#ORM对数据库的基本操作" class="headerlink" title="ORM对数据库的基本操作"></a>ORM对数据库的基本操作</h1><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><p>只要使用ORM模型创建一个对象。然后再调用这个ORM模型的<code>save</code>方法就可以保存了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book = Book(name=<span class="string">&#x27;西游记&#x27;</span>,author=<span class="string">&#x27;吴承恩&#x27;</span>,price=<span class="number">100</span>)</span><br><span class="line">book.save()</span><br></pre></td></tr></table></figure>

<h2 id="查找数据："><a href="#查找数据：" class="headerlink" title="查找数据："></a>查找数据：</h2><p>所有的查找工作都是使用模型上的<code>objects</code>属性来完成的。当然也可以自定义查询对象。这部分功能会在后面讲到。</p>
<ol>
<li>根据主键进行查找：使用主键进行查找。可以使用<code>objects.get</code>方法。然后传递<code>pk=xx</code>的方式进行查找。示例代码如下：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book = Book.objects.get(pk=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>根据其他字段进行查找：可以使用<code>objects.filter</code>方法进行查找。示例代码如下：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.<span class="built_in">filter</span>(name=<span class="string">&#x27;三国演义&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>使用<code>filter</code>方法返回来的是一个<code>QuerySet</code>对象。这个对象类似于列表。我们可以使用这个对象的<code>first</code>方法来获取第一个值。</p>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>首先查找到对应的数据模型。然后再执行这个模型的<code>delete</code>方法即可删除。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book = Book.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">book.delete()</span><br></pre></td></tr></table></figure>

<h2 id="修改数据："><a href="#修改数据：" class="headerlink" title="修改数据："></a>修改数据：</h2><p>首先查找到对应的数据模型。然后修改这个模型上的属性的值。再执行<code>save</code>方法即可修改完成。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book = Book.objects.get(pk=<span class="number">2</span>)</span><br><span class="line">book.price = <span class="number">200</span></span><br><span class="line">book.save()</span><br></pre></td></tr></table></figure>

<h1 id="常用Field笔记："><a href="#常用Field笔记：" class="headerlink" title="常用Field笔记："></a>常用Field笔记：</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="comment"># 如果想要使用自己定义的Field来作为主键，那么必须设置primary_key=True</span></span><br><span class="line">    <span class="built_in">id</span> = models.BigAutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 在定义字段的时候，如果没有指定null=True，那么默认情况下，null=False</span></span><br><span class="line">    <span class="comment"># 就是不能为空</span></span><br><span class="line">    <span class="comment"># 如果想要使用可以为null的BooleanField，那么应该使用NullBooleanField来代替</span></span><br><span class="line">    removed = models.NullBooleanField()</span><br><span class="line">    <span class="comment"># CharField：如果是超过了254个字符，那么就不建议使用啦</span></span><br><span class="line">    <span class="comment"># 就推荐使用TextField：longtext</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># auto_now_add：是在第一次添加数据进去的时候会自动获取当前的时间，创建时间</span></span><br><span class="line">    <span class="comment"># auto_now：每次这个对象调用save方法的时候都会将当前的时间更新，更新时间</span></span><br><span class="line">    create_time = models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="navie时间和aware时间"><a href="#navie时间和aware时间" class="headerlink" title="navie时间和aware时间"></a>navie时间和aware时间</h2><ol>
<li>navie时间：不知道自己的时间表示的是哪个时区的。也就是不知道自己几斤几两。比较幼稚。</li>
<li>aware时间：知道自己的时间表示的是哪个时区的。也就是比较清醒。</li>
</ol>
<h3 id="pytz库"><a href="#pytz库" class="headerlink" title="pytz库"></a>pytz库</h3><p>专门用来处理时区的库。这个库会经常更新一些时区的数据，不需要我们担心。并且这个库在安装Django的时候会默认的安装。如果没有安装，那么可以通过<code>pip install pytz</code>的方式进行安装。</p>
<h3 id="astimezone方法："><a href="#astimezone方法：" class="headerlink" title="astimezone方法："></a>astimezone方法：</h3><p>将一个时区的时间转换为另外一个时区的时间。这个方法只能被<code>aware</code>类型的时间调用。不能被<code>navie</code>类型的时间调用。<br>示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">now = datetime.now() <span class="comment"># 这是一个navie类型的时间</span></span><br><span class="line">utc_timezone = pytz.timezone(<span class="string">&quot;UTC&quot;</span>) <span class="comment"># 定义UTC的时区对象</span></span><br><span class="line">utc_now = now.astimezone(utc_timezone) <span class="comment"># 将当前的时间转换为UTC时区的时间</span></span><br><span class="line">&gt;&gt; ValueError: astimezone() cannot be applied to a naive datetime <span class="comment"># 会抛出一个异常，原因就是因为navie类型的时间不能调用astimezone方法</span></span><br><span class="line"></span><br><span class="line">now = now.replace(tzinfo=pytz.timezone(<span class="string">&#x27;Asia/Shanghai&#x27;</span>))</span><br><span class="line">utc_now = now.astimezone(utc_timezone)</span><br><span class="line"><span class="comment"># 这时候就可以正确的转换。</span></span><br></pre></td></tr></table></figure>

<h3 id="replace方法"><a href="#replace方法" class="headerlink" title="replace方法"></a>replace方法</h3><p>可以将一个时间的某些属性进行更改。</p>
<h3 id="django-utils-timezone-now方法"><a href="#django-utils-timezone-now方法" class="headerlink" title="django.utils.timezone.now方法"></a>django.utils.timezone.now方法</h3><p>会根据<code>settings.py</code>中是否设置了<code>USE_TZ=True</code>获取当前的时间。如果设置了，那么就获取一个<code>aware</code>类型的<code>UTC</code>时间。如果没有设置，那么就会获取一个<code>navie</code>类型的时间。</p>
<h3 id="django-utils-timezone-localtime方法"><a href="#django-utils-timezone-localtime方法" class="headerlink" title="django.utils.timezone.localtime方法"></a>django.utils.timezone.localtime方法</h3><p>会根据<code>setting.py</code>中的<code>TIME_ZONE</code>来将一个<code>aware</code>类型的时间转换为<code>TIME_ZONE</code>指定时区的时间。<br>html模板中，会自动转换为当前时区时间。<code>views</code>中可以使用<code>localtime</code>转换为当前时区</p>
<h2 id="DateField："><a href="#DateField：" class="headerlink" title="DateField："></a>DateField：</h2><p>日期类型。在<code>Python</code>中是<code>datetime.date</code>类型，可以记录年月日。在映射到数据库中也是<code>date</code>类型。使用这个<code>Field</code>可以传递以下几个参数：</p>
<ol>
<li><code>auto_now</code>：在每次这个数据保存的时候，都使用当前的时间。比如作为一个记录修改日期的字段，可以将这个属性设置为<code>True</code>。</li>
<li><code>auto_now_add</code>：在每次数据第一次被添加进去的时候，都使用当前的时间。比如作为一个记录第一次入库的字段，可以将这个属性设置为<code>True</code>。</li>
</ol>
<h2 id="DateTimeField："><a href="#DateTimeField：" class="headerlink" title="DateTimeField："></a>DateTimeField：</h2><p>日期时间类型，类似于<code>DateField</code>。不仅仅可以存储日期，还可以存储时间。映射到数据库中是<code>datetime</code>类型。这个<code>Field</code>也可以使用<code>auto_now</code>和<code>auto_now_add</code>两个属性。</p>
<h2 id="TimeField："><a href="#TimeField：" class="headerlink" title="TimeField："></a>TimeField：</h2><p>时间类型。在数据库中是<code>time</code>类型。在<code>Python</code>中是<code>datetime.time</code>类型。</p>
<h2 id="EmailField："><a href="#EmailField：" class="headerlink" title="EmailField："></a>EmailField：</h2><p>类似于<code>CharField</code>。在数据库底层也是一个<code>varchar</code>类型。最大长度是254个字符。</p>
<h2 id="FileField："><a href="#FileField：" class="headerlink" title="FileField："></a>FileField：</h2><p>用来存储文件的。这个请参考后面的文件上传章节部分。</p>
<h3 id="ImageField："><a href="#ImageField：" class="headerlink" title="ImageField："></a>ImageField：</h3><p>用来存储图片文件的。这个请参考后面的图片上传章节部分。</p>
<h3 id="FloatField："><a href="#FloatField：" class="headerlink" title="FloatField："></a>FloatField：</h3><p>浮点类型。映射到数据库中是<code>float</code>类型。</p>
<h3 id="IntegerField："><a href="#IntegerField：" class="headerlink" title="IntegerField："></a>IntegerField：</h3><p>整形。值的区间是<code>-2147483648——2147483647</code>。</p>
<h3 id="BigIntegerField："><a href="#BigIntegerField：" class="headerlink" title="BigIntegerField："></a>BigIntegerField：</h3><p>大整形。值的区间是<code>-9223372036854775808——9223372036854775807</code>。</p>
<h3 id="PositiveIntegerField："><a href="#PositiveIntegerField：" class="headerlink" title="PositiveIntegerField："></a>PositiveIntegerField：</h3><p>正整形。值的区间是<code>0——2147483647</code>。</p>
<h3 id="SmallIntegerField："><a href="#SmallIntegerField：" class="headerlink" title="SmallIntegerField："></a>SmallIntegerField：</h3><p>小整形。值的区间是<code>-32768——32767</code>。</p>
<h3 id="PositiveSmallIntegerField："><a href="#PositiveSmallIntegerField：" class="headerlink" title="PositiveSmallIntegerField："></a>PositiveSmallIntegerField：</h3><p>正小整形。值的区间是<code>0——32767</code>。</p>
<h3 id="TextField："><a href="#TextField：" class="headerlink" title="TextField："></a>TextField：</h3><p>大量的文本类型。映射到数据库中是longtext类型。</p>
<h3 id="UUIDField："><a href="#UUIDField：" class="headerlink" title="UUIDField："></a>UUIDField：</h3><p>只能存储<code>uuid</code>格式的字符串。<code>uuid</code>是一个32位的全球唯一的字符串，一般用来作为主键。</p>
<h3 id="URLField："><a href="#URLField：" class="headerlink" title="URLField："></a>URLField：</h3><p>类似于<code>CharField</code>，只不过只能用来存储<code>url</code>格式的字符串。并且默认的<code>max_length</code>是200。</p>
<h2 id="Field常用的参数"><a href="#Field常用的参数" class="headerlink" title="Field常用的参数"></a>Field常用的参数</h2><h3 id="null："><a href="#null：" class="headerlink" title="null："></a>null：</h3><p>如果设置为<code>True</code>，<code>Django</code>将会在映射表的时候指定是否为空。默认是为<code>False</code>。在使用字符串相关的<code>Field</code>（CharField/TextField）的时候，官方推荐尽量不要使用这个参数，也就是保持默认值<code>False</code>。因为<code>Django</code>在处理字符串相关的<code>Field</code>的时候，即使这个<code>Field</code>的<code>null=False</code>，如果你没有给这个<code>Field</code>传递任何值，那么<code>Django</code>也会使用一个空的字符串<code>&quot;&quot;</code>来作为默认值存储进去。因此如果再使用<code>null=True</code>，<code>Django</code>会产生两种空值的情形（NULL或者空字符串）。如果想要在表单验证的时候允许这个字符串为空，那么建议使用<code>blank=True</code>。如果你的<code>Field</code>是<code>BooleanField</code>，那么对应的可空的字段则为<code>NullBooleanField</code>。</p>
<h3 id="blank："><a href="#blank：" class="headerlink" title="blank："></a>blank：</h3><p>标识这个字段在表单验证的时候是否可以为空。默认是<code>False</code>。<br>这个和<code>null</code>是有区别的，<code>null</code>是一个纯数据库级别的。而<code>blank</code>是表单验证级别的。</p>
<h3 id="db-column："><a href="#db-column：" class="headerlink" title="db_column："></a>db_column：</h3><p>这个字段在数据库中的名字。如果没有设置这个参数，那么将会使用模型中属性的名字。</p>
<h3 id="default："><a href="#default：" class="headerlink" title="default："></a>default：</h3><p>默认值。可以为一个值，或者是一个函数，但是不支持<code>lambda</code>表达式。并且不支持列表/字典/集合等可变的数据结构。</p>
<h3 id="primary-key："><a href="#primary-key：" class="headerlink" title="primary_key："></a>primary_key：</h3><p>是否为主键。默认是<code>False</code>。</p>
<h3 id="unique："><a href="#unique：" class="headerlink" title="unique："></a>unique：</h3><p>在表中这个字段的值是否唯一。一般是设置手机号码/邮箱等。</p>
<h2 id="模型中Meta配置"><a href="#模型中Meta配置" class="headerlink" title="模型中Meta配置"></a>模型中<code>Meta</code>配置</h2><p>对于一些模型级别的配置。我们可以在模型中定义一个类，叫做<code>Meta</code>。然后在这个类中添加一些类属性来控制模型的作用。比如我们想要在数据库映射的时候使用自己指定的表名，而不是使用模型的名称。那么我们可以在<code>Meta</code>类中添加一个<code>db_table</code>的属性。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>,null=<span class="literal">False</span>)</span><br><span class="line">    desc = models.CharField(max_length=<span class="number">100</span>,name=<span class="string">&#x27;description&#x27;</span>,db_column=<span class="string">&quot;description1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    db_table = <span class="string">&#x27;book_model&#x27;</span></span><br></pre></td></tr></table></figure>

<p>以下将对<code>Meta</code>类中的一些常用配置进行解释。</p>
<h3 id="db-table："><a href="#db-table：" class="headerlink" title="db_table："></a>db_table：</h3><p>这个模型映射到数据库中的表名。如果没有指定这个参数，那么在映射的时候将会使用模型名来作为默认的表名。</p>
<h3 id="ordering："><a href="#ordering：" class="headerlink" title="ordering："></a>ordering：</h3><p>设置在提取数据的排序方式。后面章节会讲到如何查找数据。比如我想在查找数据的时候根据添加的时间排序，那么示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">name = models.CharField(max_length=<span class="number">20</span>,null=<span class="literal">False</span>)</span><br><span class="line">desc = models.CharField(max_length=<span class="number">100</span>,name=<span class="string">&#x27;description&#x27;</span>,db_column=<span class="string">&quot;description1&quot;</span>)</span><br><span class="line">pub_date = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">db_table = <span class="string">&#x27;book_model&#x27;</span></span><br><span class="line">ordering = [<span class="string">&#x27;pub_date&#x27;</span>]     <span class="comment">#[&#x27;-pub_date&#x27;]是反向排序</span></span><br></pre></td></tr></table></figure>

<h1 id="外键和表关系"><a href="#外键和表关系" class="headerlink" title="外键和表关系"></a>外键和表关系</h1><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><p>在<code>MySQL</code>中，表有两种引擎，一种是<code>InnoDB</code>，另外一种是<code>myisam</code>。如果使用的是<code>InnoDB</code>引擎，是支持外键约束的。外键的存在使得<code>ORM</code>框架在处理表关系的时候异常的强大。因此这里我们首先来介绍下外键在Django中的使用。</p>
<p>类定义为<code>class ForeignKey(to,on_delete,**options)</code>。第一个参数是引用的是哪个模型，第二个参数是在使用外键引用的模型数据被删除了，这个字段该如何处理，比如有<code>CASCADE</code>、<code>SET_NULL</code>等。这里以一个实际案例来说明。比如有一个<code>User</code>和一个<code>Article</code>两个模型。一个<code>User</code>可以发表多篇文章，一个<code>Article</code>只能有一个<code>Author</code>，并且通过外键进行引用。那么相关的示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    content = models.TextField()</span><br><span class="line">    author = models.ForeignKey(<span class="string">&quot;User&quot;</span>,on_delete=models.CASCADE)  <span class="comment">#外键</span></span><br></pre></td></tr></table></figure>

<p>以上使用ForeignKey来定义模型之间的关系。即在article的实例中可以通过author属性来操作对应的User模型。这样使用起来非常的方便。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">article = Article(title=<span class="string">&#x27;abc&#x27;</span>,content=<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">author = User(username=<span class="string">&#x27;张三&#x27;</span>,password=<span class="string">&#x27;111111&#x27;</span>)</span><br><span class="line">article.author = author</span><br><span class="line">article.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改article.author上的值</span></span><br><span class="line">article.author.username = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">article.save()</span><br></pre></td></tr></table></figure>

<p>为什么使用了<code>ForeignKey</code>后，就能通过<code>author</code>访问到对应的<code>user</code>对象呢。因此在底层，<code>Django</code>为<code>Article</code>表添加了一个属性名<code>_id</code>的字段（比如<code>author</code>的字段名称是<code>author_id</code>），这个字段是一个外键，记录着对应的作者的主键。以后通过<code>article.author</code>访问的时候，实际上是先通过<code>author_id</code>找到对应的数据，然后再提取<code>User</code>表中的这条数据，形成一个模型。</p>
<p>如果想要引用另外一个app的模型，那么应该在传递to参数的时候，使用<code>app.model_name</code>进行指定。以上例为例，如果<code>User</code>和<code>Article</code>不是在同一个<code>app</code>中，那么在引用的时候的示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># User模型在user这个app中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Article模型在article这个app中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    content = models.TextField()</span><br><span class="line">    author = models.ForeignKey(<span class="string">&quot;user.User&quot;</span>,on_delete=models.CASCADE)  <span class="comment">#引用时指定所在app，app.model_name</span></span><br></pre></td></tr></table></figure>

<p>如果模型的外键引用的是本身自己这个模型，那么<code>to</code>参数可以为<code>self</code>，或者是这个模型的名字。在论坛开发中，一般评论都可以进行二级评论，即可以针对另外一个评论进行评论，那么在定义模型的时候就需要使用外键来引用自身。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    content = models.TextField()</span><br><span class="line">    origin_comment = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>,on_delete=models.CASCADE,null=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 或者</span></span><br><span class="line">    <span class="comment"># origin_comment = models.ForeignKey(&#x27;Comment&#x27;,on_delete=models.CASCADE,null=True)</span></span><br></pre></td></tr></table></figure>

<h2 id="外键删除操作"><a href="#外键删除操作" class="headerlink" title="外键删除操作"></a>外键删除操作</h2><p>如果一个模型使用了外键。那么在对方那个模型被删掉后，该进行什么样的操作。可以通过<code>on_delete</code>来指定。可以指定的类型如下：</p>
<ol>
<li><code>CASCADE</code>：级联操作。如果外键对应的那条数据被删除了，那么这条数据也会被删除。</li>
<li><code>PROTECT</code>：受保护。即只要这条数据引用了外键的那条数据，那么就不能删除外键的那条数据。</li>
<li><code>SET_NULL</code>：设置为空。如果外键的那条数据被删除了，那么在本条数据上就将这个字段设置为空。如果设置这个选项，前提是要指定这个字段可以为空。</li>
<li><code>SET_DEFAULT</code>：设置默认值。如果外键的那条数据被删除了，那么本条数据上就将这个字段设置为默认值。如果设置这个选项，前提是要指定这个字段一个默认值。</li>
<li><code>SET()</code>：如果外键的那条数据被删除了。那么将会获取SET函数中的值来作为这个外键的值。SET函数可以接收一个可以调用的对象（比如函数或者方法），如果是可以调用的对象，那么会将这个对象调用后的结果作为值返回回去。</li>
<li><code>DO_NOTHING</code>：不采取任何行为。一切全看数据库级别的约束。</li>
</ol>
<p><strong>以上这些选项只是Django级别的，数据级别依旧是RESTRICT！</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    category = models.ForeignKey(<span class="string">&#x27;Category&#x27;</span>, on_delete=models.SET(Category.objects.get(pk=<span class="number">4</span>)), null=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="表关系笔记："><a href="#表关系笔记：" class="headerlink" title="表关系笔记："></a>表关系笔记：</h2><h3 id="一对多："><a href="#一对多：" class="headerlink" title="一对多："></a>一对多：</h3><ol>
<li>应用场景：比如文章和作者之间的关系。一个文章只能由一个作者编写，但是一个作者可以写多篇文章。文章和作者之间的关系就是典型的多对一的关系。</li>
<li>实现方式：一对多或者多对一，都是通过<code>ForeignKey</code>来实现的。还是以文章和作者的案例进行讲解。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    content = models.TextField()</span><br><span class="line">    author = models.ForeignKey(<span class="string">&quot;User&quot;</span>,on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure>

<p>那么以后在给<code>Article</code>对象指定<code>author</code>，就可以使用以下代码来完成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">article = Article(title=<span class="string">&#x27;abc&#x27;</span>,content=<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">author = User(username=<span class="string">&#x27;zhiliao&#x27;</span>,password=<span class="string">&#x27;111111&#x27;</span>)</span><br><span class="line"><span class="comment"># 要先保存到数据库中</span></span><br><span class="line">author.save()</span><br><span class="line">article.author = author</span><br><span class="line">article.save()</span><br></pre></td></tr></table></figure>

<p>并且以后如果想要获取某个用户下所有的文章，可以通过<code>article_set</code>来实现。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user = User.objects.first()</span><br><span class="line"><span class="comment"># 获取第一个用户写的所有文章</span></span><br><span class="line">articles = user.article_set.<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">for</span> article <span class="keyword">in</span> articles:</span><br><span class="line">    <span class="built_in">print</span>(article)</span><br></pre></td></tr></table></figure>

<p>并且如果想要将文章添加到某个分类中。可以使用一下的方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">category = Category.objects.first()</span><br><span class="line">article = Article(title=<span class="string">&#x27;bbb&#x27;</span>,content=<span class="string">&#x27;vvv&#x27;</span>)</span><br><span class="line">article.author = FrontUser.objects.first()</span><br><span class="line">category.article_set.add(article,bulk=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>bulk=False</code>，那么Django会自动的保存article，而不需要在添加到category之前先保存article。</li>
<li>或者是另外一种解决方式是，在添加到<code>category.article_set</code>中之前，先将<code>article</code>保存到数据库中。但是如果<code>article.category</code>不能为空，那么就产生一种死循环了，article没有<code>category</code>不能保存，而将article添加到<code>cateogry.artile_set</code>中，又需要article之前是已经存储到数据库中的。</li>
<li>如果是上面的那种需求，建议使用<code>bulk=False</code>的解决方案。</li>
</ul>
<h3 id="一对一："><a href="#一对一：" class="headerlink" title="一对一："></a>一对一：</h3><ol>
<li>在Django中一对一是通过<code>models.OnetToOneField</code>来实现的。这个<code>OneToOneField</code>其实本质上就是一个外键，只不过这个外键有一个<code>唯一约束（unique key）</code>，来实现一对一。</li>
<li>以后如果想要反向引用，那么是通过引用的模型的名字转换为小写的形式进行访问。比如以下模型：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrontUser</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserExtension</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    school = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    user = models.OneToOneField(<span class="string">&quot;FrontUser&quot;</span>,on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过userextension来访问UserExtension对象</span></span><br><span class="line">user = FrontUser.objects.first()</span><br><span class="line"><span class="built_in">print</span>(user.userextension)</span><br></pre></td></tr></table></figure>

<p><code>UserExtension</code>的对象，可以通过<code>user</code>来访问到对应的user对象。并且<code>FrontUser</code>对象可以使用<code>userextension</code>来访问对应的<code>UserExtension</code>对象。<br>如果不想使用Django默认的引用属性名字。那么可以在<code>OneToOneField</code>中添加一个<code>related_name</code>参数。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrontUser</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserExtension</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    school = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    user = models.OneToOneField(<span class="string">&quot;FrontUser&quot;</span>,on_delete=models.CASCADE,related_name=<span class="string">&#x27;extension&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过extension来访问到UserExtension对象</span></span><br><span class="line">user = FrontUser.objects.first()</span><br><span class="line"><span class="built_in">print</span>(user.extension)</span><br></pre></td></tr></table></figure>

<p>那么以后就<code>FrontUser</code>的对象就可以通过<code>extension</code>属性来访问到对应的<code>UserExtension</code>对象。</p>
<h3 id="多对多："><a href="#多对多：" class="headerlink" title="多对多："></a>多对多：</h3><ol>
<li><p>应用场景：比如文章和标签的关系。一篇文章可以有多个标签，一个标签可以被多个文章所引用。因此标签和文章的关系是典型的多对多的关系。</p>
</li>
<li><p>实现方式：<code>Django</code>为这种多对多的实现提供了专门的<code>Field</code>。叫做<code>ManyToManyField</code>。还是拿文章和标签为例进行讲解。示例代码如下：</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    content = models.TextField()</span><br><span class="line">    tags = models.ManyToManyField(<span class="string">&quot;Tag&quot;</span>,related_name=<span class="string">&quot;articles&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<p>在数据库层面，实际上<code>Django</code>是为这种多对多的关系建立了一个中间表。这个中间表分别定义了两个外键，引用到<code>article</code>和<code>tag</code>两张表的主键。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">many_to_many_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># article = Article.objects.first()  #获得文章</span></span><br><span class="line">    <span class="comment"># tag = Tag(name=&#x27;冷门文章&#x27;)    #新建标签</span></span><br><span class="line">    <span class="comment"># tag.save()</span></span><br><span class="line">    <span class="comment"># article.tag_set.add(tag)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># tag = Tag.objects.get(pk=1)</span></span><br><span class="line">    <span class="comment"># article = Article.objects.get(pk=3)</span></span><br><span class="line">    <span class="comment"># tag.articles.add(article)</span></span><br><span class="line"></span><br><span class="line">    article = Article.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">    tags = article.tags.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">        <span class="built_in">print</span>(tag)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;success&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="查询条件笔记："><a href="#查询条件笔记：" class="headerlink" title="查询条件笔记："></a>查询条件笔记：</h1><h2 id="exact"><a href="#exact" class="headerlink" title="exact"></a>exact</h2><p><code>exact</code>：在底层会被翻译成<code>=</code>。</p>
<h2 id="iexact"><a href="#iexact" class="headerlink" title="iexact"></a>iexact</h2><p><code>iexact</code>：在底层会被翻译成<code>LIKE</code>。</p>
<ul>
<li><code>LIKE</code>和<code>=</code>：大部分情况下都是等价的，只有少数情况下是不等价的。</li>
<li><code>exict</code>和<code>iexact</code>：他们的区别其实就是<code>LIKE</code>和<code>=</code>的区别，因为exact会被翻译成<code>=</code>，而<code>iexact</code>会被翻译成<code>LIKE</code>。</li>
<li>因为<code>field__exact=xxx</code>其实等价于<code>filed=xxx</code>，因此我们直接使用<code>filed=xxx</code>就可以了，并且因为大部分情况<code>exact</code>和<code>iexact</code>又是等价的，因此我们以后直接使用<code>field=xxx</code>就可以了。</li>
</ul>
<h2 id="QuerySet-query"><a href="#QuerySet-query" class="headerlink" title="QuerySet.query"></a>QuerySet.query</h2><p><code>QuerySet.query</code>：<code>query</code>可以用来查看这个<code>ORM</code>查询语句最终被翻译成的<code>SQL</code>语句。但是<code>query</code>只能被用在<code>QuerySet</code>对象上，不能用在普通的<code>ORM模型</code>上。因此如果你的查询语句是通过<code>get</code>来获取数据的，那么就不能使用<code>query</code>，因为<code>get</code>返回的是满足条件的<code>ORM</code>模型，而不是<code>QuerySet</code>。如果你是通过<code>filter</code>等其他返回<code>QuerySet</code>的方法查询的，那么就可以使用<code>query</code>。</p>
<h2 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h2><p><code>contains</code>：使用大小写敏感的判断，某个字符串是否在指定的字段中。这个判断条件会使用大小敏感，因此在被翻译成<code>SQL</code>语句的时候，会使用<code>like binary</code>，而<code>like binary</code>就是使用大小写敏感的。</p>
<h2 id="icontains"><a href="#icontains" class="headerlink" title="icontains"></a>icontains</h2><p><code>icontains</code>：使用大小写不敏感的判断，某个字符串是否被包含在指定的字段中。这个查询语句在被翻译成<code>SQL</code>的时候，使用的是<code>like</code>，而<code>like</code>在<code>MySQL</code>层面就是不区分大小写的。</p>
<h2 id="contains和iexact区别"><a href="#contains和iexact区别" class="headerlink" title="contains和iexact区别"></a>contains和iexact区别</h2><p><code>contains</code>和<code>icontains</code>，在被翻译成<code>SQL</code>的时候使用的是<code>%hello%</code>，就是只要整个字符串中出现了<code>hello</code>都能过够被找到，而<code>iexact</code>没有百分号，那么意味着只有完全相等的时候才会被匹配到。</p>
<h2 id="in"><a href="#in" class="headerlink" title="in"></a>in</h2><p><code>in</code>：可以直接指定某个字段的是否在某个集合中。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = Article.objects.<span class="built_in">filter</span>(id__in=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<p>也可以通过其他的表的字段来判断是否在某个集合中。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">categories = Category.objects.<span class="built_in">filter</span>(article__id__in=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<p>如果要判断相关联的表的字段，那么也是通过<code>__</code>来连接。并且在做关联查询的时候，不需要写<code>models_set</code>，直接使用<code>模型的名字的小写化</code>就可以了。比如通过分类去查找相应的文章，那么通过<code>article__id__in</code>就可以了，而不是写成<code>article_set__id__in</code>的形式。当然如果你不想使用默认的形式，可以在外键定义的时候传递<code>related_query_name</code>来指定反向查询的名字。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;category&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    content = models.TextField()</span><br><span class="line">    cateogry = models.ForeignKey(<span class="string">&quot;Category&quot;</span>,on_delete=models.CASCADE,null=<span class="literal">True</span>,related_query_name=<span class="string">&#x27;articles&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;article&#x27;</span></span><br></pre></td></tr></table></figure>

<p>因为在<code>cateogry</code>的<code>ForeignKey</code>中指定了<code>related_query_name</code>为<code>articles</code>，因此你不能再使用<code>article</code>来进行反向查询了。这时候就需要通过<code>articles__id__in</code>来进行反向查询。</p>
<p>反向查询是将模型名字小写化。比如<code>article__in</code>。可以通过<code>related_query_name</code>来指定自己的方式，而不使用默认的方式。<br>反向引用是将模型名字小写化，然后再加上<code>_set</code>，比如<code>article_set</code>，可以通过<code>related_name</code>来指定自己的方式，而不是用默认的方式。</p>
<p>并且，如果在做反向查询的时候，如果查询的字段就是模型的主键，那么可以省略掉这个字段，直接写成<code>article__in</code>就可以了，不需要这个<code>id</code>了。</p>
<p><code>in</code>不仅仅可以指定列表/元组，还可以为<code>QuerySet</code>。比如要查询“文章标题中包含有hello的所有分类”，那么可以通过以下代码来实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = Article.objects.<span class="built_in">filter</span>(title__icontains=<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">categories = Category.objects.<span class="built_in">filter</span>(articles__in=articles)</span><br><span class="line"><span class="keyword">for</span> cateogry <span class="keyword">in</span> categories:</span><br><span class="line">    <span class="built_in">print</span>(cateogry)</span><br></pre></td></tr></table></figure>

<h2 id="gt、gte、lt、lte"><a href="#gt、gte、lt、lte" class="headerlink" title="gt、gte、lt、lte"></a><code>gt</code>、<code>gte</code>、<code>lt</code>、<code>lte</code></h2><p><code>gt</code>、<code>gte</code>、<code>lt</code>、<code>lte</code>：代表的是大于、大于等于、小于、小于等于的条件。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = Article.objects.<span class="built_in">filter</span>(id__lte=<span class="number">3</span>)  <span class="comment">#小于等于3</span></span><br></pre></td></tr></table></figure>

<h2 id="startswith、istartswith、endswith、iendswith"><a href="#startswith、istartswith、endswith、iendswith" class="headerlink" title="startswith、istartswith、endswith、iendswith"></a><code>startswith</code>、<code>istartswith</code>、<code>endswith</code>、<code>iendswith</code></h2><p><code>startswith</code>、<code>istartswith</code>、<code>endswith</code>、<code>iendswith</code>：表示以某个值开始，不区分大小写的以某个值开始、以某个值结束、不区分大小写的以某个值结束。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = Article.objects.<span class="built_in">filter</span>(title__endswith=<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="时间查询条件"><a href="#时间查询条件" class="headerlink" title="时间查询条件"></a>时间查询条件</h2><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p><code>range</code>：可以指定一个时间段。并且时间应该标记为<code>aware</code>时间，不然django会报警告。Filtering a DateTimeField with dates won’t include items on the last day. 示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,time</span><br><span class="line"><span class="keyword">from</span> django.utils.timezone <span class="keyword">import</span> make_aware</span><br><span class="line"></span><br><span class="line">start_time = make_aware(datetime(year=<span class="number">2018</span>,month=<span class="number">4</span>,day=<span class="number">4</span>,hour=<span class="number">17</span>,minute=<span class="number">0</span>,second=<span class="number">0</span>))</span><br><span class="line">end_time = make_aware(datetime(year=<span class="number">2018</span>,month=<span class="number">4</span>,day=<span class="number">4</span>,hour=<span class="number">18</span>,minute=<span class="number">0</span>,second=<span class="number">0</span>))</span><br><span class="line">articles = Article.objects.<span class="built_in">filter</span>(create_time__range=(start_time,end_time))</span><br><span class="line"><span class="built_in">print</span>(articles.query)</span><br><span class="line"><span class="built_in">print</span>(articles)</span><br></pre></td></tr></table></figure>

<h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p><code>date</code>：用年月日来进行过滤。如果想要使用这个过滤条件，那么前提必须要在<code>MySQL</code>中添加好那些时区文件。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = Article.objects.<span class="built_in">filter</span>(create_time__date=datetime(year=<span class="number">2018</span>,month=<span class="number">4</span>,day=<span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<h3 id="year-month-day"><a href="#year-month-day" class="headerlink" title="year/month/day"></a>year/month/day</h3><p><code>year/month/day</code>：表示根据年/月/日进行查找。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = Article.objects.<span class="built_in">filter</span>(create_time__year__gte=<span class="number">2018</span>)</span><br></pre></td></tr></table></figure>

<h3 id="week-day"><a href="#week-day" class="headerlink" title="week_day"></a>week_day</h3><p><code>week_day</code>：根据星期来进行查找。1表示星期天，7表示星期六，2-6代表的是星期一到星期五。比如要查找星期三的所有文章，那么可以通过以下代码来实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = Article.objects.<span class="built_in">filter</span>(create_time__week_day=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p><code>time</code>：根据分时秒来进行查找。如果要具体到秒，一般比较难匹配到，可以使用区间的方式来进行查找。区间使用<code>range</code>条件。比如想要获取17时/10分/27-28秒之间的文章，那么可以通过以下代码来实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start_time = time(hour=<span class="number">17</span>,minute=<span class="number">10</span>,second=<span class="number">27</span>)</span><br><span class="line">end_time = time(hour=<span class="number">17</span>,minute=<span class="number">10</span>,second=<span class="number">28</span>)</span><br><span class="line">articles = Article.objects.<span class="built_in">filter</span>(create_time__time__range=(start_time,end_time))</span><br></pre></td></tr></table></figure>

<h2 id="regex和iregex"><a href="#regex和iregex" class="headerlink" title="regex和iregex"></a><code>regex</code>和<code>iregex</code></h2><p><code>regex</code>和<code>iregex</code>：大小写敏感和大小写不敏感的正则表达式。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = Article.objects.<span class="built_in">filter</span>(title__regex=<span class="string">r&#x27;^hello&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>以上代码的意思是提取所有标题以<code>hello</code>字符串开头的文章。</p>
<h1 id="聚合函数笔记："><a href="#聚合函数笔记：" class="headerlink" title="聚合函数笔记："></a>聚合函数笔记：</h1><ol>
<li>所有的聚合函数都是放在<code>django.db.models</code>下面。</li>
<li>聚合函数不能够单独的执行，需要放在一些可以执行聚合函数的方法下面中去执行。比如<code>aggregate</code>。示例代码如下：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg</span><br><span class="line"></span><br><span class="line">result = Book.objects.aggregate(Avg(<span class="string">&quot;price&quot;</span>))</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>聚合函数执行完成后，自动给这个聚合函数的值取个名字。取别名的规则，默认是<code>field+__+聚合函数名字</code>形成的。比如以上代码形成的名字叫做<code>price__avg</code>。如果不想使用默认的名字，那么可以在使用聚合函数的时候传递关键字参数进去，参数的名字就是聚合函数执行完成的名字。实示例代码如下：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = Book.objects.aggregate(avg=Avg(<span class="string">&quot;price&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>以上传递了关键字参数<code>avg=Avg(&quot;price&quot;)</code>，那么以后<code>Avg</code>聚合函数执行完成的名字就叫做<code>avg</code>。</p>
<h2 id="aggregate"><a href="#aggregate" class="headerlink" title="aggregate"></a>aggregate</h2><p><code>aggregate</code>：这个方法不会返回一个<code>QuerySet</code>对象，而是返回一个字典。这个字典中的<code>key</code>就是聚合函数的名字，值就是聚合函数执行后的结果。</p>
<h2 id="annotate"><a href="#annotate" class="headerlink" title="annotate"></a>annotate</h2><p><code>aggregate</code>和<code>annotate</code>的相同和不同：<br>    * 相同：这两个方法都可以执行聚合函数。<br>    * 不同：<br>        - <code>aggregate</code>返回的是一个字典，在这个字典中存储的是这个聚合函数执行的结果。而<code>annotate</code>返回的是一个<code>QuerySet</code>对象，并且会在查找的模型上添加一个聚合函数的属性。<br>        - <code>aggregate</code>不会做分组，而<code>annotate</code>会使用<code>group by</code>子句进行分组，只有调用了<code>group by</code>子句，才能对每一条数据求聚合函数的值。<code>annotate</code>在原来模型字段的基础之上添加一个使用了聚合函数的字段，并且在使用聚合函数的时候，会使用当前这个模型的主键进行分组（group by）。</p>
<p><code>aggregate</code>和<code>annotate</code>方法可以在任何的<code>QuerySet</code>对象上调用。因此只要是返回了<code>QuerySet</code>对象，那么就可以进行链式调用。比如要获取2018年度的销售总额，那么可以先过滤年份，再求聚合函数。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BookOrder.objects.<span class="built_in">filter</span>(create_time__year=<span class="number">2018</span>).aggregate(total=Sum(<span class="string">&#x27;price&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h2><p><code>Count</code>：用来求某个数据的个数。比如要求所有图书的数量，那么可以使用以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = Book.objects.aggregate(book_nums=Count(<span class="string">&quot;id&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>并且<code>Count</code>可以传递<code>distinct=True</code>参数，用来剔除那些重复的值，只保留一个。比如要获取作者表中，不同邮箱的个数，那么这时候可以使用<code>distinct=True</code>。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = Author.objects.aggregate(email_nums=Count(<span class="string">&#x27;email&#x27;</span>,distinct=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure>

<h2 id="Max和Min"><a href="#Max和Min" class="headerlink" title="Max和Min"></a><code>Max</code>和<code>Min</code></h2><p><code>Max</code>和<code>Min</code>：求指定字段的最大值和最小值。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = Author.objects.aggregate(<span class="built_in">max</span>=Max(<span class="string">&quot;age&quot;</span>),<span class="built_in">min</span>=Min(<span class="string">&quot;age&quot;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="Sum"><a href="#Sum" class="headerlink" title="Sum"></a>Sum</h2><p><code>Sum</code>：求某个字段值的总和。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = BookOrder.objects.aggregate(total=Sum(<span class="string">&#x27;price&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h1 id="F表达式和Q表达式"><a href="#F表达式和Q表达式" class="headerlink" title="F表达式和Q表达式"></a>F表达式和Q表达式</h1><h2 id="F表达式"><a href="#F表达式" class="headerlink" title="F表达式"></a>F表达式</h2><p><code>F表达式</code>： 动态的获取某个字段上的值。并且这个F表达式，不会真正的去数据库中查询数据，他相当于只是起一个标识的作用。比如想要将原来每本图书的价格都在原来的基础之上增加10元，那么可以使用以下代码来实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"></span><br><span class="line">Book.objects.update(price=F(<span class="string">&quot;price&quot;</span>)+<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取名字和邮箱相同的作者</span></span><br><span class="line">authors = Author.objects.<span class="built_in">filter</span>(name=F(<span class="string">&quot;email&quot;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="Q表达式"><a href="#Q表达式" class="headerlink" title="Q表达式"></a>Q表达式</h2><p><code>Q表达式</code>：使用<code>Q</code>表达式包裹查询条件，可以在条件之间进行多种操作。与、或、非等，从而实现一些复杂的查询操作。例子如下：</p>
<ul>
<li>查找价格大于100，并且评分达到4.85以上的图书：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不使用Q表达式的</span></span><br><span class="line">books = Book.objects.<span class="built_in">filter</span>(price__gte=<span class="number">100</span>,rating__gte=<span class="number">4.85</span>)</span><br><span class="line"><span class="comment"># 使用Q表达式的</span></span><br><span class="line">books = Book.objects.<span class="built_in">filter</span>(Q(price__gte=<span class="number">100</span>)&amp;Q(rating__gte=<span class="number">4.85</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>查找价格低于100元，或者评分低于4分的图书：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.<span class="built_in">filter</span>(Q(price__gte=<span class="number">100</span>)&amp;Q(rating__gte=<span class="number">4.85</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>获取价格大于100，并且图书名字中不包含”传“字的图书：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.<span class="built_in">filter</span>(Q(price__gte=<span class="number">100</span>)&amp;~Q(name__icontains=<span class="string">&#x27;传&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h1 id="QuerySet-API："><a href="#QuerySet-API：" class="headerlink" title="QuerySet API："></a>QuerySet API：</h1><h2 id="模型-objects："><a href="#模型-objects：" class="headerlink" title="模型.objects："></a>模型.objects：</h2><p>这个对象是<code>django.db.models.manager.Manager</code>的对象，这个类是一个空壳类，他上面的所有方法都是从<code>QuerySet</code>这个类上面拷贝过来的。因此我们只要学会了<code>QuerySet</code>，这个<code>objects</code>也就知道该如何使用了。</p>
<p><code>Manager</code>源码解析：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_name = <span class="string">&quot;BaseManagerFromQuerySet&quot;</span></span><br><span class="line"></span><br><span class="line">class_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;_queryset_class&#x27;</span>: QuerySet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class_dict.update(cls._get_queryset_methods(QuerySet))</span><br><span class="line"></span><br><span class="line"><span class="comment"># type动态的时候创建类</span></span><br><span class="line"><span class="comment"># 第一个参数是用来指定创建的类的名字。创建的类名是：BaseManagerFromQuerySet</span></span><br><span class="line"><span class="comment"># 第二个参数是用来指定这个类的父类。</span></span><br><span class="line"><span class="comment"># 第三个参数是用来指定这个类的一些属性和方法</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">type</span>(class_name,(cls,),class_dict)</span><br><span class="line"></span><br><span class="line">_get_queryset_methods：这个方法就是将QuerySet中的一些方法拷贝出来</span><br></pre></td></tr></table></figure>

<h2 id="filter-exclude-annotate：过滤-排除满足条件的-给模型添加新的字段。"><a href="#filter-exclude-annotate：过滤-排除满足条件的-给模型添加新的字段。" class="headerlink" title="filter/exclude/annotate：过滤/排除满足条件的/给模型添加新的字段。"></a><code>filter/exclude/annotate</code>：过滤/排除满足条件的/给模型添加新的字段。</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Article.objects.exclude(title__contains=<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">articles = Article.objects.annotate(author_name=F(<span class="string">&quot;author__name&quot;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="order-by："><a href="#order-by：" class="headerlink" title="order_by："></a>order_by：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据创建的时间正序排序</span></span><br><span class="line">articles = Article.objects.order_by(<span class="string">&quot;create_time&quot;</span>)</span><br><span class="line"><span class="comment"># 根据创建的时间倒序排序</span></span><br><span class="line">articles = Article.objects.order_by(<span class="string">&quot;-create_time&quot;</span>)</span><br><span class="line"><span class="comment"># 根据作者的名字进行排序</span></span><br><span class="line">articles = Article.objects.order_by(<span class="string">&quot;author__name&quot;</span>)</span><br><span class="line"><span class="comment"># 首先根据创建的时间进行排序，如果时间相同，则根据作者的名字进行排序</span></span><br><span class="line">articles = Article.objects.order_by(<span class="string">&quot;create_time&quot;</span>,<span class="string">&#x27;author__name&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>一定要注意的一点是，多个<code>order_by</code>，会把前面排序的规则给打乱，而使用后面的排序方式。比如以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = Article.objects.order_by(<span class="string">&quot;create_time&quot;</span>).order_by(<span class="string">&quot;author__name&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>它会根据作者的名字进行排序，而不是使用文章的创建时间。</p>
<p>当然，也可以在模型定义的在<code>Meta</code>类中定义<code>ordering</code>来指定默认的排序方式。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    db_table = <span class="string">&#x27;book_order&#x27;</span></span><br><span class="line">    ordering = [<span class="string">&#x27;create_time&#x27;</span>,<span class="string">&#x27;-price&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>还可以根据<code>annotate</code>定义的字段进行排序。比如要实现图书的销量进行排序，那么示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.annotate(order_nums=Count(<span class="string">&quot;bookorder&quot;</span>)).order_by(<span class="string">&quot;-order_nums&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s/%s&#x27;</span>%(book.name,book.order_nums))</span><br></pre></td></tr></table></figure>

<h2 id="values"><a href="#values" class="headerlink" title="values"></a>values</h2><p>只想提取其中的几个字段，可以使用<code>values</code>来进行指定，并且使用了<code>values</code>方法后，提取出的<code>QuerySet</code>中的数据类型不是模型，而是在<code>values</code>方法中指定的字段和值形成的字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.values(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>提取这个模型上关联的的对象的属性，查找顺序和<code>filter</code>的用法是一样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.values(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;author__name&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>以上会提取<code>author</code>的<code>name</code>字段，如果想更改字段名，可以使用关键字参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.values(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, author_name=F(<span class="string">&#x27;author__name&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>自定义的名字，不能和模型上本身拥有的字段一样，否则会报错。</p>
<p>在<code>values</code>中，也可以使用聚合函数来形成一个新的字段。比如获取每本图书的销量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.values(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, order_nums=Count(<span class="string">&#x27;bookorder&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>如果调用<code>values</code>方法的时候，没有传递任何的参数，那么会获取这个模型上的所有字段以及对于的值形成的字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.values()</span><br></pre></td></tr></table></figure>

<p>那么<code>books</code>中的值如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;三国演义&#x27;</span>, <span class="string">&#x27;pages&#x27;</span>:<span class="number">987</span>, <span class="string">&#x27;price&#x27;</span>:<span class="number">108.0</span>, <span class="string">&#x27;rating&#x27;</span>:<span class="number">3.9</span>, <span class="string">&#x27;author_id&#x27;</span>:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="values-list"><a href="#values-list" class="headerlink" title="values_list"></a>values_list</h2><p>和<code>values</code>是一样的作用，只不过返回的<code>QuerySet</code>中，装的不是字典，而是元组。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.values_list(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>以上的返回结果是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="string">&#x27;三国演义&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果给<code>values_list</code>只指定一个字段，那么我们可以指定<code>flat=True</code>，这样返回的结果就不再是一个元组，而是整个字段的值。<code>flat</code>只能用在只有一个字段的情况下，否则就会报错。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.values_list(<span class="string">&#x27;name&#x27;</span>, flat=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>那么以上返回的结果是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;三国演义&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="all方法"><a href="#all方法" class="headerlink" title="all方法"></a><code>all</code>方法</h2><p>这个简单的返回一个<code>QuerySet</code>对象，这个<code>QuerySet</code>对象没有经过任何的修改（比如：过滤等）。</p>
<h2 id="select-related"><a href="#select-related" class="headerlink" title="select_related"></a>select_related</h2><p>在查找某个表的数据的时候，可以一次性把相关联的其它表的数据都提取出来。以后再访问相关表的数据的时候，不用再次查找数据库，可以节省一些开销。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.select_related(<span class="string">&#x27;author&#x27;</span>,<span class="string">&#x27;publisher&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">    <span class="built_in">print</span>(book.author.name)</span><br><span class="line">    <span class="comment"># 因为在提取Book的时候，使用了select_related，那么以后再访问book.author的时候，不会再次向数据库重新发起查询</span></span><br></pre></td></tr></table></figure>

<p>注意：这个方法只能用在外键的关联对象上，对于那种多对多，或者是多对一的情况，不能使用它来实现，应该使用<code>prefetch_related</code>来实现。</p>
<h2 id="prefetch-related"><a href="#prefetch-related" class="headerlink" title="prefetch_related"></a>prefetch_related</h2><p>与<code>select_related</code>方法类似，也是在查询语句时，提前将指定的数据查找出来。只不过这个方法是用来解决多对多，或者多对一的情况。这个方法会产生两个查询语句。所以，如果在这个方法中查询使用外键关联的模型的时候，也会产生两个查询语句，因此如果查询的是外键关联的模型，建议使用<code>select_related</code>方法。<br>在查询多对多或者多对一的关联的对象的时候，与使用模型访问传递的字符串一样。比如要获取图书上的所有订单，示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.prefetch_related(<span class="string">&#x27;bookorder_set&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：在使用<code>prefetch_related</code>查找出来的<code>bookorder_set</code>，建议不要再对其进行任何操作，比如<code>filter</code>，不然又会产生N多查询语句。</p>
<p>如果确实想要对预先查找的集合进行操作，可以用<code>django.db.models.Prefetch</code>完成。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Prefetch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先使用Prefetch吧查找的条件写好，在放到prefetch_related中</span></span><br><span class="line">prefetch = Prefetch(<span class="string">&quot;bookorder_set&quot;</span>,queryset=BookOrder.objects.<span class="built_in">filter</span>(price__gte=<span class="number">90</span>))</span><br><span class="line">books = Book.objects.prefetch_related(prefetch)</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>)</span><br><span class="line">    <span class="built_in">print</span>(book.name)</span><br><span class="line">    orders = book.bookorder_set.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">for</span> order <span class="keyword">in</span> orders:</span><br><span class="line">        <span class="built_in">print</span>(order.<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure>

<h2 id="defer和only"><a href="#defer和only" class="headerlink" title="defer和only"></a>defer和only</h2><p>这两个方法都会返回一个<code>QuerySet</code>对象，并且这个<code>QuerySet</code>中装的都是模型，而不是字典。</p>
<ol>
<li><code>defer</code>：这个方法用来告诉<code>ORM</code>，在查询某个模型的时候，过滤掉某些字段。注意：使用了<code>defer</code>了的字段，如果以后再使用这个字段，会重新发起一次请求。因此要谨慎操作。</li>
<li><code>only</code>：这个方法用来告诉<code>ORM</code>，在查询某个模型的时候，值提取几个字段。注意：没有加在<code>only</code>中的字段，以后如果使用了，那么也会重新发起一次请求。因此要谨慎操作。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.only(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s/%s&#x27;</span>%(book.<span class="built_in">id</span>,book.price))</span><br></pre></td></tr></table></figure>

<h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><p>这个方法给定的条件只能匹配到一条数据，如果匹配到多条数据，或没有匹配到任何数据，都会报错。一般用于查询主键。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book = Book.objects.get(<span class="built_in">id</span>=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(book)</span><br><span class="line"><span class="built_in">print</span>(connection.queries)</span><br></pre></td></tr></table></figure>

<h2 id="create方法"><a href="#create方法" class="headerlink" title="create方法"></a>create方法</h2><p>创建一条数据，并且将这个数据保存到数据库中，以下的代码是等价的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">publisher = Publisher(name=<span class="string">&#x27;人民邮电出版社&#x27;</span>)</span><br><span class="line">publisher.save()</span><br><span class="line"></span><br><span class="line">Publisher.objects.create(name=<span class="string">&#x27;人民邮电出版社&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="get-or-create"><a href="#get-or-create" class="headerlink" title="get_or_create"></a>get_or_create</h2><p>如果给定的条件有数据，那么就会把这个数据直接提取出来。如果给定的条件没有数据，那么就会先创建数据，然后再把数据返回回来。这个方法的返回值是一个元组，元组的第一个参数<code>obj</code>是这个对象，第二个参数<code>created</code>代表是否创建的，是返回<code>True</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj,created= Category.objects.get_or_create(title=<span class="string">&#x27;默认分类&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="bulk-create"><a href="#bulk-create" class="headerlink" title="bulk_create"></a>bulk_create</h2><p>一次性创建多个数据。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">publisher = Publisher.objects.bulk_create([</span><br><span class="line">    Publisher(name=<span class="string">&#x27;123出版社&#x27;</span>),</span><br><span class="line">    Publisher(name=<span class="string">&#x27;abc出版社&#x27;</span>),</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p>获取提取的数据的个数。如果想要知道总共有多少条数据，那么建议使用<code>count</code>，而不是使用<code>len(articles)</code>这种。因为<code>count</code>在底层是使用<code>select count(*)</code>来实现的，这种方式比使用<code>len</code>函数更加的高效。</p>
<h2 id="firtst和last"><a href="#firtst和last" class="headerlink" title="firtst和last"></a>firtst和last</h2><p>返回<code>QuerySet</code>中的第一条和最后一条数据。</p>
<h2 id="aggregate-1"><a href="#aggregate-1" class="headerlink" title="aggregate"></a>aggregate</h2><p>使用聚合函数。</p>
<h2 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h2><p>判断某个条件的数据是否存在。如果要判断某个条件的元素是否存在，那么建议使用<code>exists</code>，这比使用<code>count</code>或者直接判断<code>QuerySet</code>更有效得多。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> Article.objects.<span class="built_in">filter</span>(title__contains=<span class="string">&#x27;hello&#x27;</span>).exists():</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 比使用count更高效：</span></span><br><span class="line"><span class="keyword">if</span> Article.objects.<span class="built_in">filter</span>(title__contains=<span class="string">&#x27;hello&#x27;</span>).count() &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 也比直接判断QuerySet更高效：</span></span><br><span class="line"><span class="keyword">if</span> Article.objects.<span class="built_in">filter</span>(title__contains=<span class="string">&#x27;hello&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h2><p>去除掉那些重复的数据。这个方法如果底层数据库用的是<code>MySQL</code>，那么不能传递任何的参数。比如想要提取所有销售的价格超过80元的图书，并且删掉那些重复的，那么可以使用<code>distinct</code>来帮我们实现，示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.<span class="built_in">filter</span>(bookorder__price__gte=<span class="number">80</span>).distinct()</span><br></pre></td></tr></table></figure>

<p>需要注意的是，如果在<code>distinct</code>之前使用了<code>order_by</code>，那么因为<code>order_by</code>会提取<code>order_by</code>中指定的字段，因此再使用<code>distinct</code>就会根据多个字段来进行唯一化，所以就不会把那些重复的数据删掉。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">orders = BookOrder.objects.order_by(<span class="string">&quot;create_time&quot;</span>).values(<span class="string">&quot;book_id&quot;</span>).distinct()</span><br></pre></td></tr></table></figure>

<p>那么以上代码因为使用了<code>order_by</code>，即使使用了<code>distinct</code>，也会把重复的<code>book_id</code>提取出来。</p>
<h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><p>执行更新操作，在<code>SQL</code>底层走的也是<code>update</code>命令。比如要将所有<code>category</code>为空的<code>article</code>的<code>article</code>字段都更新为默认的分类。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Article.objects.<span class="built_in">filter</span>(category__isnull=<span class="literal">True</span>).update(category_id=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>注意这个方法走的是更新的逻辑。所以更新完成后保存到数据库中不会执行<code>save</code>方法，因此不会更新<code>auto_now</code>设置的字段。</p>
<h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><p>删除所有满足条件的数据。删除数据的时候，要注意<code>on_delete</code>指定的处理方式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Author.objects.<span class="built_in">filter</span>(id__gte=<span class="number">3</span>).delete()</span><br></pre></td></tr></table></figure>

<h2 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h2><p>有时候我们查找数据，有可能只需要其中的一部分。那么这时候可以使用切片操作来帮我们完成。<code>QuerySet</code>使用切片操作就跟列表使用切片操作是一样的。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.<span class="built_in">all</span>()[<span class="number">1</span>:<span class="number">3</span>]   <span class="comment">#1,2</span></span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">    <span class="built_in">print</span>(book)</span><br></pre></td></tr></table></figure>

<p>切片操作并不是把所有数据从数据库中提取出来再做切片操作。而是在数据库层面使用<code>LIMIT</code>和<code>OFFSET</code>来帮我们完成。所以如果只需要取其中一部分的数据的时候，建议大家使用切片操作。</p>
<h2 id="什么时候Django会将QuerySet转换为SQL去执行"><a href="#什么时候Django会将QuerySet转换为SQL去执行" class="headerlink" title="什么时候Django会将QuerySet转换为SQL去执行"></a>什么时候<code>Django</code>会将<code>QuerySet</code>转换为<code>SQL</code>去执行</h2><p>生成一个<code>QuerySet</code>对象并不会马上转换为<code>SQL</code>语句去执行。<br>比如我们获取<code>Book</code>表下所有的图书：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(connection.queries)</span><br></pre></td></tr></table></figure>

<p>我们可以看到在打印<code>connection.quries</code>的时候打印的是一个空的列表。说明上面的<code>QuerySet</code>并没有真正的执行。<br>在以下情况下<code>QuerySet</code>会被转换为<code>SQL</code>语句执行：</p>
<ul>
<li>迭代：在遍历<code>QuerySet</code>对象的时候，会首先先执行这个<code>SQL</code>语句，然后再把这个结果返回进行迭代。比如以下代码就会转换为<code>SQL</code>语句：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> Book.objects.<span class="built_in">all</span>():</span><br><span class="line">    <span class="built_in">print</span>(book)</span><br></pre></td></tr></table></figure>

<ul>
<li>使用步长做切片操作：<code>QuerySet</code>可以类似于列表一样做切片操作。做切片操作本身不会执行<code>SQL</code>语句，但是如果如果在做切片操作的时候提供了步长，那么就会立马执行SQL语句。需要注意的是，做切片后不能再执行<code>filter</code>方法，否则会报错。</li>
<li>调用<code>len</code>函数：调用<code>len</code>函数用来获取<code>QuerySet</code>中总共有多少条数据也会执行<code>SQL</code>语句。</li>
<li>调用<code>list</code>函数：调用<code>list</code>函数用来将一个<code>QuerySet</code>对象转换为<code>list</code>对象也会立马执行<code>SQL</code>语句。</li>
<li>判断：如果对某个<code>QuerySet</code>进行判断，也会立马执行<code>SQL</code>语句。</li>
</ul>
<h1 id="ORM实例"><a href="#ORM实例" class="headerlink" title="ORM实例"></a>ORM实例</h1><p>ORM模型如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;学生表&quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    gender = models.SmallIntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;student&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;课程表&quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    teacher = models.ForeignKey(<span class="string">&quot;Teacher&quot;</span>,on_delete=models.SET_NULL,null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;course&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Score</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;分数表&quot;&quot;&quot;</span></span><br><span class="line">    student = models.ForeignKey(<span class="string">&quot;Student&quot;</span>,on_delete=models.CASCADE)</span><br><span class="line">    course = models.ForeignKey(<span class="string">&quot;Course&quot;</span>,on_delete=models.CASCADE)</span><br><span class="line">    number = models.FloatField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;score&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;老师表&quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;teacher&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="查询平均成绩大于60分的同学的id和平均成绩；"><a href="#查询平均成绩大于60分的同学的id和平均成绩；" class="headerlink" title="查询平均成绩大于60分的同学的id和平均成绩；"></a>查询平均成绩大于60分的同学的id和平均成绩；</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rows = Student.objects.annotate(avg=Avg(<span class="string">&quot;score__number&quot;</span>)).<span class="built_in">filter</span>(avg__gte=<span class="number">60</span>).values(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;avg&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br></pre></td></tr></table></figure>

<h2 id="查询所有同学的id、姓名、选课的数、总成绩；"><a href="#查询所有同学的id、姓名、选课的数、总成绩；" class="headerlink" title="查询所有同学的id、姓名、选课的数、总成绩；"></a>查询所有同学的id、姓名、选课的数、总成绩；</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rows = Student.objects.annotate(course_nums=Count(<span class="string">&quot;score__course&quot;</span>),total_score=Sum(<span class="string">&quot;score__number&quot;</span>))</span><br><span class="line">.values(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;course_nums&quot;</span>,<span class="string">&quot;total_score&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br></pre></td></tr></table></figure>

<h2 id="查询姓“李”的老师的个数；"><a href="#查询姓“李”的老师的个数；" class="headerlink" title="查询姓“李”的老师的个数；"></a>查询姓“李”的老师的个数；</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">teacher_nums = Teacher.objects.<span class="built_in">filter</span>(name__startswith=<span class="string">&quot;李&quot;</span>).count()</span><br><span class="line"><span class="built_in">print</span>(teacher_nums)</span><br></pre></td></tr></table></figure>

<h2 id="查询没学过“黄老师”课的同学的id、姓名；"><a href="#查询没学过“黄老师”课的同学的id、姓名；" class="headerlink" title="查询没学过“黄老师”课的同学的id、姓名；"></a>查询没学过“黄老师”课的同学的id、姓名；</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rows = Student.objects.exclude(score__course__teacher__name=<span class="string">&quot;黄老师&quot;</span>).values(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br></pre></td></tr></table></figure>

<h2 id="查询学过课程id为1和2的所有同学的id、姓名；"><a href="#查询学过课程id为1和2的所有同学的id、姓名；" class="headerlink" title="查询学过课程id为1和2的所有同学的id、姓名；"></a>查询学过课程id为1和2的所有同学的id、姓名；</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rows = Student.objects.<span class="built_in">filter</span>(score__course__in=[<span class="number">1</span>,<span class="number">2</span>]).distinct().values(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br></pre></td></tr></table></figure>

<h2 id="查询学过“黄老师”所教的所有课的同学的学号、姓名；"><a href="#查询学过“黄老师”所教的所有课的同学的学号、姓名；" class="headerlink" title="查询学过“黄老师”所教的所有课的同学的学号、姓名；"></a>查询学过“黄老师”所教的所有课的同学的学号、姓名；</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rows = Student.objects.annotate(nums=Count(<span class="string">&quot;score__course&quot;</span>,<span class="built_in">filter</span>=Q(score__course__teacher__name=<span class="string">&#x27;黄老师&#x27;</span>))).<span class="built_in">filter</span>(nums=Course.objects.<span class="built_in">filter</span>(teacher__name=<span class="string">&#x27;黄老师&#x27;</span>).count()).values(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br></pre></td></tr></table></figure>

<h2 id="查询所有课程成绩小于60分的同学的id和姓名；"><a href="#查询所有课程成绩小于60分的同学的id和姓名；" class="headerlink" title="查询所有课程成绩小于60分的同学的id和姓名；"></a>查询所有课程成绩小于60分的同学的id和姓名；</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = Student.objects.exclude(score__number__gt=<span class="number">60</span>)</span><br><span class="line"><span class="keyword">for</span> student <span class="keyword">in</span> students:</span><br><span class="line">    <span class="built_in">print</span>(student)</span><br></pre></td></tr></table></figure>

<h2 id="查询没有学全所有课的同学的id、姓名；"><a href="#查询没有学全所有课的同学的id、姓名；" class="headerlink" title="查询没有学全所有课的同学的id、姓名；"></a>查询没有学全所有课的同学的id、姓名；</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = Student.objects.annotate(num=Count(F(<span class="string">&quot;score__course&quot;</span>))).<span class="built_in">filter</span>(num__lt=Course.objects.count()).values(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> student <span class="keyword">in</span> students:</span><br><span class="line">    <span class="built_in">print</span>(student)</span><br></pre></td></tr></table></figure>

<h2 id="查询所有学生的姓名、平均分，并且按照平均分从高到低排序；"><a href="#查询所有学生的姓名、平均分，并且按照平均分从高到低排序；" class="headerlink" title="查询所有学生的姓名、平均分，并且按照平均分从高到低排序；"></a>查询所有学生的姓名、平均分，并且按照平均分从高到低排序；</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = Student.objects.annotate(avg=Avg(<span class="string">&quot;score__number&quot;</span>)).order_by(<span class="string">&quot;-avg&quot;</span>).values(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;avg&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> student <span class="keyword">in</span> students:</span><br><span class="line">    <span class="built_in">print</span>(student)</span><br></pre></td></tr></table></figure>

<h2 id="查询各科成绩的最高和最低分，以如下形式显示：课程ID，课程名称，最高分，最低分："><a href="#查询各科成绩的最高和最低分，以如下形式显示：课程ID，课程名称，最高分，最低分：" class="headerlink" title="查询各科成绩的最高和最低分，以如下形式显示：课程ID，课程名称，最高分，最低分："></a>查询各科成绩的最高和最低分，以如下形式显示：课程ID，课程名称，最高分，最低分：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">courses = Course.objects.annotate(<span class="built_in">min</span>=Min(<span class="string">&quot;score__number&quot;</span>),<span class="built_in">max</span>=Max(<span class="string">&quot;score__number&quot;</span>)).values(<span class="string">&quot;id&quot;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;min&#x27;</span>,<span class="string">&#x27;max&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> course <span class="keyword">in</span> courses:</span><br><span class="line">    <span class="built_in">print</span>(course)</span><br></pre></td></tr></table></figure>

<h2 id="查询每门课程的平均成绩，按照平均成绩进行排序；"><a href="#查询每门课程的平均成绩，按照平均成绩进行排序；" class="headerlink" title="查询每门课程的平均成绩，按照平均成绩进行排序；"></a>查询每门课程的平均成绩，按照平均成绩进行排序；</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">courses = Course.objects.annotate(avg=Avg(<span class="string">&quot;score__number&quot;</span>)).order_by(<span class="string">&#x27;avg&#x27;</span>).values(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;avg&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> course <span class="keyword">in</span> courses:</span><br><span class="line">    <span class="built_in">print</span>(course)</span><br></pre></td></tr></table></figure>

<h2 id="统计总共有多少女生，多少男生；"><a href="#统计总共有多少女生，多少男生；" class="headerlink" title="统计总共有多少女生，多少男生；"></a>统计总共有多少女生，多少男生；</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rows = Student.objects.aggregate(male_num=Count(<span class="string">&quot;gender&quot;</span>,<span class="built_in">filter</span>=Q(gender=<span class="number">1</span>)),female_num=Count(<span class="string">&quot;gender&quot;</span>,<span class="built_in">filter</span>=Q(gender=<span class="number">2</span>)))</span><br><span class="line"><span class="built_in">print</span>(rows)</span><br></pre></td></tr></table></figure>

<h2 id="将“黄老师”的每一门课程都在原来的基础之上加5分；"><a href="#将“黄老师”的每一门课程都在原来的基础之上加5分；" class="headerlink" title="将“黄老师”的每一门课程都在原来的基础之上加5分；"></a>将“黄老师”的每一门课程都在原来的基础之上加5分；</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rows = Score.objects.<span class="built_in">filter</span>(course__teacher__name=<span class="string">&#x27;黄老师&#x27;</span>).update(number=F(<span class="string">&quot;number&quot;</span>)+<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(rows)</span><br></pre></td></tr></table></figure>

<h2 id="查询两门以上不及格的同学的id、姓名、以及不及格课程数；"><a href="#查询两门以上不及格的同学的id、姓名、以及不及格课程数；" class="headerlink" title="查询两门以上不及格的同学的id、姓名、以及不及格课程数；"></a>查询两门以上不及格的同学的id、姓名、以及不及格课程数；</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = Student.objects.annotate(bad_count=Count(<span class="string">&quot;score__number&quot;</span>,<span class="built_in">filter</span>=Q(score__number__lt=<span class="number">60</span>))).<span class="built_in">filter</span>(bad_count__gte=<span class="number">2</span>).values(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;bad_count&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> student <span class="keyword">in</span> students:</span><br><span class="line">    <span class="built_in">print</span>(student)</span><br></pre></td></tr></table></figure>

<h2 id="查询每门课的选课人数；"><a href="#查询每门课的选课人数；" class="headerlink" title="查询每门课的选课人数；"></a>查询每门课的选课人数；</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">courses = Course.objects.annotate(student_nums=Count(<span class="string">&quot;score__student&quot;</span>)).values(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;student_nums&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> course <span class="keyword">in</span> courses:</span><br><span class="line">    <span class="built_in">print</span>(course)</span><br></pre></td></tr></table></figure>

<h1 id="ORM模型迁移"><a href="#ORM模型迁移" class="headerlink" title="ORM模型迁移"></a>ORM模型迁移</h1><h2 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h2><h3 id="makemigrations"><a href="#makemigrations" class="headerlink" title="makemigrations"></a>makemigrations</h3><p>将模型生成迁移脚本。模型所在的app，必须放在<code>settings.py</code>中的<code>INSTALLED_APPS</code>中。这个命令有以下几个常用选项：</p>
<ul>
<li><code>app_label</code>：后面可以跟一个或者多个app，那么就只会针对这几个app生成迁移脚本。如果没有任何的app_label，那么会检查<code>INSTALLED_APPS</code>中所有的app下的模型，针对每一个app都生成响应的迁移脚本。</li>
<li><code>--name</code>：给这个迁移脚本指定一个名字。</li>
<li><code>--empty</code>：生成一个空的迁移脚本。如果你想写自己的迁移脚本，可以使用这个命令来实现一个空的文件，然后自己再在文件中写迁移脚本。</li>
</ul>
<h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><p>将新生成的迁移脚本。映射到数据库中。创建新的表或者修改表的结构。以下一些常用的选项：</p>
<ul>
<li><code>app_label</code>：将某个app下的迁移脚本映射到数据库中。如果没有指定，那么会将所有在<code>INSTALLED_APPS</code>中的app下的模型都映射到数据库中。</li>
<li><code>app_label migrationname</code>：将某个app下指定名字的migration文件映射到数据库中。</li>
<li><code>--fake</code>：可以将指定的迁移脚本名字添加到数据库中。但是并不会把迁移脚本转换为SQL语句，修改数据库中的表。</li>
<li><code>--fake-initial</code>：将第一次生成的迁移文件版本号记录在数据库中。但并不会真正的执行迁移脚本。</li>
<li><code>showmigrations</code>：查看某个app下的迁移文件。如果后面没有app，那么将查看<code>INSTALLED_APPS</code>中所有的迁移文件。</li>
</ul>
<p>sqlmigrate：查看某个迁移文件在映射到数据库中的时候，转换的SQL语句。</p>
<h2 id="migrate原理说明"><a href="#migrate原理说明" class="headerlink" title="migrate原理说明"></a>migrate原理说明</h2><h3 id="migrate做了什么事情："><a href="#migrate做了什么事情：" class="headerlink" title="migrate做了什么事情："></a>migrate做了什么事情：</h3><ol>
<li>将相关的迁移脚本翻译成SQL语句，在数据库中执行这个SQL语句。</li>
<li>如果这个SQL语句执行没有问题，那么就会将这个迁移脚本的名字记录到<code>django_migrations</code>中。</li>
</ol>
<h3 id="migrate怎么判断哪些迁移脚本需要执行"><a href="#migrate怎么判断哪些迁移脚本需要执行" class="headerlink" title="migrate怎么判断哪些迁移脚本需要执行"></a>migrate怎么判断哪些迁移脚本需要执行</h3><p>它会将代码项目中的迁移脚本和数据库中<code>django_migrations</code>表中的迁移脚本进行对比，如果发现数据库中，没有这个迁移脚本，那么就会执行这个迁移脚本。</p>
<h2 id="执行migrate命令的时候报错的解决办法"><a href="#执行migrate命令的时候报错的解决办法" class="headerlink" title="执行migrate命令的时候报错的解决办法"></a>执行migrate命令的时候报错的解决办法</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>执行<code>migrate</code>命令会报错的原因是。数据库的<code>django_migrations</code>表中的迁移版本记录和代码中的迁移脚本不一致导致的。</p>
<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><h3 id="使用-fake参数："><a href="#使用-fake参数：" class="headerlink" title="使用--fake参数："></a>使用<code>--fake</code>参数：</h3><p>首先对比数据库中的迁移脚本和代码中的迁移脚本。然后找到哪个不同，之后再使用<code>--fake</code>，将代码中的迁移脚本添加到<code>django_migrations</code>中，但是并不会执行<code>sql</code>语句。这样就可以避免每次执行<code>migrate</code>的时候，都执行一些重复的迁移脚本。</p>
<h3 id="终极解决方案："><a href="#终极解决方案：" class="headerlink" title="终极解决方案："></a>终极解决方案：</h3><p>如果代码中的迁移脚本和数据库中的迁移脚本实在太多，很难找到准确出错位置。那么这时候就可以使用以下终极解决方案。就是清除之前的迁移脚本，重新映射，将出问题的app下的所有模型和数据库中表保持一致。操作步骤如下：</p>
<ol>
<li>将出问题的app下的所有模型，都和数据库中的表保持一致。</li>
<li>将出问题的app下的所有迁移脚本文件都删掉。再在<code>django_migrations</code>表中将出问题的app相关的迁移记录都删掉。</li>
<li>使用<code>makemigrations</code>，重新将模型生成一个迁移脚本。</li>
<li>使用<code>migrate --fake-initial</code>参数，将刚刚生成的迁移脚本，标记为已经完成（因为这些模型相对应的表，其实都已经在数据库中存在了，不需要重复执行了）。</li>
<li>之后可以正常映射了。</li>
</ol>
<h1 id="根据已有的表自动生成模型"><a href="#根据已有的表自动生成模型" class="headerlink" title="根据已有的表自动生成模型"></a>根据已有的表自动生成模型</h1><ol>
<li><p>首先需要在<code>settings.py</code>中配置好数据库相关信息</p>
</li>
<li><p>通过<code>python manage.py inspectdb &gt; models.py</code>，将表转换为模型后的代码，输出到<code>models.py</code>文件。如果只是想要转换一个表为模型。那么可以指定表的名字<code>python manage.py inspectdb article_article &gt; models.py</code></p>
</li>
<li><p>修正模型：新生成的ORM模型有些地方可能不太适合使用。比如模型的名字，表之间的关系等等。那么以下选项还需要重新配置一下：</p>
<ul>
<li>模型名：自动生成的模型，是根据表的名字生成的，可能不是你想要的。这时候模型的名字你可以改成任何你想要的。</li>
<li>模型所属app：根据自己的需要，将相应的模型放在对应的app中。放在同一个app中也是没有任何问题的。只是不方便管理。</li>
<li>模型外键引用：将所有使用<code>ForeignKey</code>的地方，模型引用都改成字符串。这样不会产生模型顺序的问题。另外，如果引用的模型已经移动到其他的app中了，那么还要加上这个app的前缀。</li>
<li>让<code>Django</code>管理模型：将<code>Meta</code>下的<code>managed=False</code>删掉，如果保留这个，那么以后这个模型有任何的修改，使用<code>migrate</code>都不会映射到数据库中。</li>
<li>当有多对多的时候，应该也要修正模型。将中间表注释了，然后使用<code>ManyToManyField</code>来实现多对多。并且，使用<code>ManyToManyField</code>生成的中间表的名字可能和数据库中那个中间表的名字不一致，这时候肯定就不能正常连接了。那么可以通过<code>db_table</code>来指定中间表的名字。示例代码如下：</li>
</ul>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">title = models.CharField(max_length=<span class="number">100</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">content = models.TextField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">author = models.ForeignKey(<span class="string">&#x27;front.User&#x27;</span>, models.SET_NULL, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 使用ManyToManyField模型到表，生成的中间表的规则是：article_tags</span></span><br><span class="line"><span class="comment"># 但现在已经存在的表的名字叫做：article_tag</span></span><br><span class="line"><span class="comment"># 可以使用db_table，指定中间表的名字</span></span><br><span class="line">tags = models.ManyToManyField(<span class="string">&quot;Tag&quot;</span>,db_table=<span class="string">&#x27;article_tag&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    db_table = <span class="string">&#x27;article&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>表名：切记不要修改表的名字。不然映射到数据库中，会发生找不到对应表的错误。</li>
</ul>
</li>
<li><p>执行命令<code>python manage.py makemigrations</code>生成初始化的迁移脚本。方便后面通过ORM来管理表。这时候还需要执行命令<code>python manage.py migrate [app_name] --fake-initial</code>，因为如果不使用<code>--fake-initial</code>，那么会将迁移脚本会映射到数据库中。这时候迁移脚本会新创建表，而这个表之前是已经存在了的，所以肯定会报错。此时我们只要将这个<code>0001-initial</code>的状态修改为已经映射，而不真正执行映射，下次再<code>migrate</code>的时候，就会忽略它。</p>
</li>
<li><p>将<code>Django</code>的核心表映射到数据库中：<code>Django</code>中还有一些核心的表也是需要创建的。不然有些功能是用不了的。比如<code>auth</code>相关表。如果这个数据库之前就是使用<code>Django</code>开发的，那么这些表就已经存在了。可以不用管了。如果之前这个数据库不是使用<code>Django</code>开发的，那么应该使用<code>migrate</code>命令将<code>Django</code>中的核心模型映射到数据库中。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>《MySQL必知必会》笔记</title>
    <url>/2019/02/09/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="第1章-了解SQL"><a href="#第1章-了解SQL" class="headerlink" title="第1章 了解SQL"></a>第1章 了解SQL</h1><p>在使用多列作为主键时，上述条件必须应用到构成主键的所有列，所有列值的组合必须是唯一的（但单个列的值可以不唯一）</p>
<p><code>SQL</code>（发音为字母S-Q-L或sequel）是结构化查询语言（Structured Query Language）</p>
<h1 id="第2章-MySQL简介"><a href="#第2章-MySQL简介" class="headerlink" title="第2章 MySQL简介"></a>第2章 MySQL简介</h1><p>数据的所有存储、检索、管理和处理实际上是由数据库软件——DBMS（数据库管理系统-DataBase Management System）完成的</p>
<span id="more"></span>

<h1 id="第3章-使用MySQL"><a href="#第3章-使用MySQL" class="headerlink" title="第3章 使用MySQL"></a>第3章 使用MySQL</h1><p><code>SHOW DATABASES；</code>，返回可用数据库的一个列表</p>
<p><code>SHOW TABLES;</code>，返回当前选择的数据库内可用表的列表</p>
<p><code>SHOW COLUMNS FROM customers;</code>，查看表结构：字段名、数据类型、是否允许NULL、键信息、默认值以及其他信息（如字段cust_id的auto_increment）</p>
<p><code>DESCRIBE customers；</code>，是<code>SHOW COLUMNS FROM customers；</code>的一种快捷方式</p>
<h1 id="第4章-检索数据"><a href="#第4章-检索数据" class="headerlink" title="第4章 检索数据"></a>第4章 检索数据</h1><p><code>SQL</code>是不区分大小写的，许多SQL开发人员喜欢对所有SQL关键字使用大写，而对所有列和表名使用小写，这样做使代码更易于阅读和调试。<br>SQL语句可以在一行上给出，也可以分成许多行。多数SQL开发人员认为将SQL语句分成多行更容易阅读和调试。</p>
<p><code>DISTINCT</code>关键字，检索出有不同值的列表</p>
<p><code>SELECT DISTINCT vend_id FROM products;</code>,只返回不同值的vend_id行</p>
<p><code>DISTINCT</code>关键字应用于所有列而不仅是前置它的列，如果给出<code>SELECT DISTINCT vend_id, prod_price</code>，除非指定的两个列都不同，否则所有行都将被检索出来。</p>
<p><code>SELECT prod_name FROM products LIMIT 5;</code>，<code>LIMIT 5</code>指示<code>MySQL</code>返回不多于5行。</p>
<p><code>SELECT prod_name FROM products LIMIT 5,5;</code>，<code>LIMIT 5, 5</code>指示<code>MySQL</code>返回从行5开始的5行。第一个数为开始位置，第二个数为要检索的行数。行0检索出来的第一行为行0，而不是行1。因此，<code>LIMIT 1, 1</code>将检索出第二行而不是第一行。</p>
<p><code>LIMIT 4 OFFSET 3</code>意为从行3开始取4行，就像LIMIT 3, 4一样。</p>
<h1 id="第5章-排序检索数据"><a href="#第5章-排序检索数据" class="headerlink" title="第5章 排序检索数据"></a>第5章 排序检索数据</h1><p>关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有意义。<br><code>ORDER BY</code>子句取一个或多个列的名字，据此对输出进行排序:</p>
<p><code>SELECT prod_name FROM products ORDER BY prod_name;</code>，对prod_name以字母顺序排序。</p>
<p>为了按多个列排序，只要指定列名，列名之间用逗号分开即可（就像选择多个列时所做的那样）。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 首先按价格，然后再按名称排序</span><br><span class="line"># 以下是一条命令，分号算作结束，分行便于阅读</span><br><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name <span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price, prod_name;</span><br></pre></td></tr></table></figure>

<p>默认升序，为了进行降序排序，必须指定DESC关键字</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<p><code>DESC</code>关键字只应用到直接位于其前面的列名，下面的例子以降序排序产品（最贵的在最前面），然后再对产品名排序（默认升序）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span>, prod_name;</span><br></pre></td></tr></table></figure>

<p>在多个列上降序排序 如果想在多个列上进行降序排序，必须对每个列指定<code>DESC</code>关键字。与<code>DESC</code>相反的关键字是<code>ASC（ASCENDING）</code>，在升序排序时可以指定它。但实际上，<code>ASC</code>没有多大用处，因为升序是默认的（如果既不指定<code>ASC</code>也不指定<code>DESC</code>，则假定为<code>ASC</code>）。</p>
<p>在字典（dictionary）排序顺序中，A被视为与a相同，这是MySQL（和大多数数据库管理系统）的默认行为。</p>
<p>使用<code>ORDER BY</code>和<code>LIMIT</code>的组合，能够找出一个列中最高或最低的值。下面的例子演示如何找出最昂贵物品的值:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>在给出<code>ORDER BY</code>子句时，应该保证它位于<code>FROM</code>子句之后。如果使用<code>LIMIT</code>，它必须位于<code>ORDER BY</code>之后。使用子句的次序不对将产生错误消息。</p>
<h1 id="第6章-过滤数据"><a href="#第6章-过滤数据" class="headerlink" title="第6章 过滤数据"></a>第6章 过滤数据</h1><p>WHERE子句在表名（FROM子句）之后给出</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">=</span> <span class="number">2.5</span>;</span><br></pre></td></tr></table></figure>

<p>条件操作符（WHERE子句操作符）</p>
<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">=</td>
<td align="center">等于</td>
</tr>
<tr>
<td align="center">&lt;&gt;</td>
<td align="center">不等于</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="center">不等于</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="center">小于等于</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="center">大于等于</td>
</tr>
<tr>
<td align="center">BETWEEN</td>
<td align="center">在指定的两个值之间</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="operator">=</span> <span class="string">&#x27;fuses&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><code>MySQL</code>在执行匹配时默认不区分大小写，所以<code>fuses</code>与<code>Fuses</code>匹配。<br>如果将值与串类型的列进行比较，则需要限定引号。用来与数值列进行比较的值不用引号。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p><code>BETWEEN</code>匹配范围中所有的值，包括指定的开始值和结束值。</p>
<p><code>SELECT</code>语句有一个特殊的<code>WHERE</code>子句，可用来检查具有<code>NULL</code>值的列。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>在通过过滤选择出不具有特定值的行时，你可能希望返回具有<code>NULL</code>值的行。但是，不行。因为未知具有特殊的含义，数据库不知道它们是否匹配，所以在匹配过滤或不匹配过滤时不返回它们。因此，在过滤数据时，一定要验证返回数据中确实给出了被过滤列具有<code>NULL</code>的行。</p>
<h1 id="第7章-数据过滤"><a href="#第7章-数据过滤" class="headerlink" title="第7章 数据过滤"></a>第7章 数据过滤</h1><p>操作符（operator）：用来联结或改变<code>WHERE</code>子句中的子句的关键字。也称为逻辑操作符（logical operator）。<code>AND</code>操作符，<code>OR</code>操作符，<code>IN</code>操作符，<code>NOT</code>操作符。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="number">1003</span> <span class="keyword">AND</span> prod_price <span class="operator">&lt;=</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>此<code>SQL</code>语句检索由供应商1003制造且价格小于等于10美元的所有产品的名称和价格。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="number">1002</span> <span class="keyword">OR</span> vend_id <span class="operator">=</span> <span class="number">1003</span>;</span><br></pre></td></tr></table></figure>

<p>此SQL语句检索由任一个指定供应商制造的所有产品的产品名和价格。<code>OR</code>操作符告诉<code>DBMS</code>匹配任一条件而不是同时匹配两个条件。</p>
<p><code>SQL</code>（像多数语言一样）在处理<code>OR</code>操作符前，优先处理<code>AND</code>操作符，<code>AND</code>在计算次序中优先级更高。任何时候使用具有<code>AND</code>和<code>OR</code>操作符的<code>WHERE</code>子句，都应该使用圆括号明确地分组操作符。</p>
<p><code>IN</code>操作符用来指定条件范围，范围中的每个条件都可以进行匹配。<code>IN</code>操作符完成与<code>OR</code>相同的功能。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1002</span>,<span class="number">1003</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p>此<code>SELECT</code>语句检索供应商1002和1003制造的所有产品，与下面的<code>SQL</code>语句效果相同。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="number">1002</span> <span class="keyword">OR</span> vend_id <span class="operator">=</span> <span class="number">1003</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p><code>IN</code>操作符优点具体如下：</p>
<ol>
<li>在使用长的合法选项清单时，IN操作符的语法更清楚且更直观。</li>
<li>在使用IN时，计算的次序更容易管理（因为使用的操作符更少）。</li>
<li>IN操作符一般比OR操作符清单执行更快。</li>
<li>IN的最大优点是可以包含其他SELECT语句，使得能够更动态地建立WHERE子句。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1002</span>,<span class="number">1003</span>)</span><br></pre></td></tr></table></figure>

<p>此<code>SELECT</code>语句列出除1002和1003之外的所有供应商制造的产品</p>
<p><code>MySQL</code>支持使用<code>NOT</code>对<code>IN</code>、<code>BETWEEN</code>和<code>EXISTS</code>子句取反</p>
<h1 id="第8章-用通配符进行过滤"><a href="#第8章-用通配符进行过滤" class="headerlink" title="第8章 用通配符进行过滤"></a>第8章 用通配符进行过滤</h1><p>操作符何时不是操作符？答案是在它作为谓词（predi-cate）时。</p>
<p><code>%</code>表示任何字符出现任意次数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 找出所有以词jet起头的产品</span><br><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;jet%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>根据MySQL的配置方式，搜索可以是区分大小写的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 可以使用多个通配符</span><br><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> `<span class="operator">%</span>anvil<span class="operator">%</span>`</span><br></pre></td></tr></table></figure>

<p><code>%</code>代表搜索模式中给定位置的0个、1个或多个字符。</p>
<p>尾空格可能会干扰通配符匹配,解决这个问题的一个简单的办法是在搜索模式最后附加一个%。一个更好的办法是使用函数（第11章将会介绍）去掉首尾空格。</p>
<p>即使是<code>WHERE prod_name LIKE &#39;%&#39;</code>也不能匹配用值NULL作为产品名的行。</p>
<p><code>_</code>下划线只匹配单个字符而不是多个字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;_ ton anvil&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>通配符技巧：</p>
<ol>
<li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li>
<li>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。</li>
<li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。</li>
</ol>
<h1 id="第9章-用正则表达式进行搜索"><a href="#第9章-用正则表达式进行搜索" class="headerlink" title="第9章 用正则表达式进行搜索"></a>第9章 用正则表达式进行搜索</h1><p>检索列prod_name包含文本1000的所有行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;1000&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;.000&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p><code>.</code>是正则表达式语言中一个特殊的字符。它表示匹配任意一个字符。</p>
<p>MySQL中的正则表达式匹配（自版本3.23.4后）不区分大小写（即，大写和小写都匹配）。为区分大小写，可使用<code>BINARY</code>关键字，如<code>WHERE prod_name REGEXP BINARY &#39;JetPack .000&#39;</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;1000|2000&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p><code>|</code>为正则表达式的<code>OR</code>操作符。它表示匹配其中之一，因此1000和2000都匹配并返回。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;[123] Ton&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name</span><br></pre></td></tr></table></figure>

<p><code>[123]</code>定义一组字符，它的意思是匹配1或2或3。</p>
<p>为否定一个字符集，在集合的开始处放置一个<code>^</code>即可。尽管<code>[123]</code>匹配字符1、2或3，但<code>[^123]</code>却匹配除这些字符外的任何东西。</p>
<p>下面的集合将匹配数字0到9：<code>[0123456789]</code>，可简化为<code>[0-9]</code>。<code>[1-3]</code>和<code>[6-9]</code>也是合法的范围。<code>[a-z]</code>匹配任意字母字符。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;[1-5] Ton&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name</span><br></pre></td></tr></table></figure>

<p>为了匹配特殊字符，必须用<code>\\</code>为前导。<code>\\-</code>表示查找<code>-</code>, <code>\\．</code>表示查找<code>．</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name</span><br><span class="line"><span class="keyword">FROM</span> vendors</span><br><span class="line"><span class="keyword">WHERE</span> vend_name REGEXP `\\.`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure>

<p>转义。这包括<code>．</code>、<code>|</code>、<code>[]</code>以及迄今为止使用过的其他特殊字符。<code>\\</code>也用来引用元字符（具有特殊含义的字符）</p>
<p>空白元字符：</p>
<table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\f</td>
<td align="center">换页</td>
</tr>
<tr>
<td align="center">\n</td>
<td align="center">换行</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">回车</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">制表</td>
</tr>
<tr>
<td align="center">\v</td>
<td align="center">纵向制表</td>
</tr>
</tbody></table>
<p>多数正则表达式实现使用单个反斜杠转义特殊字符，以便能使用这些字符本身。但<code>MySQL</code>要求两个反斜杠（<code>MySQL</code>自己解释一个，正则表达式库解释另一个）。</p>
<p>为更方便工作，可以使用预定义的字符集，称为字符类。</p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[:alnum:]</td>
<td align="center">任意字母和数字（同[a-zA-Z0-9]）</td>
</tr>
<tr>
<td align="center">[:alpha:]</td>
<td align="center">任意字符（同[a-zA-Z]）</td>
</tr>
<tr>
<td align="center">[:blank:]</td>
<td align="center">空格和制表（同[\t]）</td>
</tr>
<tr>
<td align="center">[:cntrl:]</td>
<td align="center">ASCII 0到31和127</td>
</tr>
<tr>
<td align="center">[:digit:]</td>
<td align="center">任意数字（同[0-9]）</td>
</tr>
<tr>
<td align="center">[:graph:]</td>
<td align="center">与[:print:]相同，但不包括空格</td>
</tr>
<tr>
<td align="center">[:lower:]</td>
<td align="center">任意小写字母（同[a-z]）</td>
</tr>
<tr>
<td align="center">[:print:]</td>
<td align="center">任意可打印字符</td>
</tr>
<tr>
<td align="center">[:punct:]</td>
<td align="center">既不在[:alnum:]又不在[:cntrl:]中的任意字符</td>
</tr>
<tr>
<td align="center">[:space:]</td>
<td align="center">包括空格在内的任意空白字符（同[\f\n\r\t\v]）</td>
</tr>
<tr>
<td align="center">[:upper:]</td>
<td align="center">任意大写字母（同[a-Z]）</td>
</tr>
<tr>
<td align="center">[:xdigit:]</td>
<td align="center">任意十六进制数字（同[a-fA-F0-9]）</td>
</tr>
</tbody></table>
<p>正则表达式重复元字符:</p>
<table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td align="center">0个或多个匹配</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">1个或多个匹配（等于{1，}）</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">0个或1个匹配（等于{0,1}）</td>
</tr>
<tr>
<td align="center">{n}</td>
<td align="center">指定数目的匹配</td>
</tr>
<tr>
<td align="center">{n,}</td>
<td align="center">不少于指定数目的匹配</td>
</tr>
<tr>
<td align="center">{n,m}</td>
<td align="center">匹配数目的范围(m不超过255)</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;\\([0-9] sticks?\\)&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name</span><br></pre></td></tr></table></figure>

<p>匹配到<code>TNT (1 stick)</code>，<code>TNT (5 sticks)</code>。<br>正则表达式<code>\\([0-9] sticks? \\)</code>需要解说一下。<code>\\(</code>匹配<code>(</code>, <code>[0-9]</code>匹配任意数字（这个例子中为1和5）, <code>sticks？</code>匹配<code>stick</code>和<code>sticks</code>（<code>s</code>后的<code>?</code>使<code>s</code>可选，因为<code>?</code>匹配它前面的任何字符的0次或1次出现）, <code>\\)</code>匹配<code>)</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line">WHERE prod_name REGEXP `[[:DIGIT:]]&#123;4&#125;`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p><code>[:digit:]</code>匹配任意数字，因而它为数字的一个集合。<code>&#123;4&#125;</code>确切地要求它前面的字符（任意数字）出现4次，所以<code>[[:digit:]]&#123;4&#125;</code>匹配连在一起的任意4位数字。</p>
<p>为了匹配特定位置的文本，需要使用定位符：</p>
<table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">^</td>
<td align="center">文本的开始</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">文本的结尾</td>
</tr>
<tr>
<td align="center">[[:&lt;:]]</td>
<td align="center">词的开始</td>
</tr>
<tr>
<td align="center">[[:&gt;:]]</td>
<td align="center">词的结尾</td>
</tr>
</tbody></table>
<p>查询以一个数（包括以小数点开始的数）开始的所有产品，需要使用^定位符：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;^[0-9\\.]&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p><code>^</code>有两种用法。在集合中（用<code>[和]</code>定义），用它来否定该集合，如<code>[^1002,1003]</code>。否则，用来指串的开始处。</p>
<p><code>LIKE</code>和<code>REGEXP</code>的不同在于，<code>LIKE</code>匹配整个串而<code>REGEXP</code>匹配子串。利用定位符，通过用<code>^</code>开始每个表达式，用<code>$</code>结束每个表达式，可以使<code>REGEXP</code>的作用与<code>LIKE</code>一样。</p>
<h1 id="第10章-创建计算字段"><a href="#第10章-创建计算字段" class="headerlink" title="第10章 创建计算字段"></a>第10章 创建计算字段</h1><p>计算字段并不实际存在于数据库表中。计算字段是运行时在SELECT语句内创建的。从客户机（如应用程序）的角度来看，计算字段的数据是以与其他列的数据相同的方式返回的。</p>
<p><code>Concat()</code>拼接串，即把多个串连接起来形成一个较长的串。多数<code>DBMS</code>使用<code>+</code>或<code>||</code>来实现拼接，<code>MySQL</code>则使用<code>Concat()</code>函数来实现。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(vend_name, <span class="string">&#x27; (&#x27;</span>, vend_country, <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure>

<p>上面的<code>SELECT</code>语句连接以下4个元素：</p>
<ul>
<li>存储在vend_name列中的名字；</li>
<li>包含一个空格和一个左圆括号的串；</li>
<li>存储在vend_country列中的国家；</li>
<li>包含一个右圆括号的串。</li>
</ul>
<p>输出为<code>ACME (USA)</code>。</p>
<p><code>MySQL</code>的<code>RTrim()</code>函数可以删除数据右侧多余的空格。<br><code>MySQL</code>除了支持<code>RTrim()</code>，还支持<code>LTrim()</code>（去掉串左边的空格）以及<code>Trim()</code>（去掉串左右两边的空格）。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(RTrim(vend_name), <span class="string">&#x27; (&#x27;</span>, RTrim(vend_country), <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name</span><br></pre></td></tr></table></figure>

<p>别名用<code>AS</code>关键字赋予</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(RTrim(vend_name), <span class="string">&#x27; (&#x27;</span>, RTrim(vend_country), <span class="string">&#x27;)&#x27;</span>) <span class="keyword">AS</span></span><br><span class="line">vend_title</span><br><span class="line"><span class="keyword">FROM</span> vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name</span><br></pre></td></tr></table></figure>

<p>现在的列名为<code>vend_title</code>，任何客户机应用都可以按名引用这个列，就像它是一个实际的表列一样。</p>
<p>如下汇总物品的价格:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id,</span><br><span class="line">       quantity,</span><br><span class="line">       item_price,</span><br><span class="line">       quantity<span class="operator">*</span>item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> orderitems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="AS%E5%85%B3%E9%94%AE%E5%AD%97.jpg" alt="输出结果"></p>
<p>输出中显示的<code>expanded_price</code>列为一个计算字段，此计算为<code>quantity*item_price</code>。客户机应用现在可以使用这个新计算列，就像使用其他列一样。</p>
<p>基本算术操作符:</p>
<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">除</td>
</tr>
</tbody></table>
<h1 id="第11章-使用数据处理函数"><a href="#第11章-使用数据处理函数" class="headerlink" title="第11章 使用数据处理函数"></a>第11章 使用数据处理函数</h1><p>大多数<code>SQL</code>实现支持以下类型的函数:</p>
<ul>
<li>用于处理文本串（如删除或填充值，转换值为大写或小写）的文本函数。</li>
<li>用于在数值数据上进行算术操作（如返回绝对值，进行代数运算）的数值函数。</li>
<li>用于处理日期和时间值并从这些值中提取特定成分（例如，返回两个日期之差，检查日期有效性等）的日期和时间函数。</li>
<li>返回DBMS正使用的特殊信息（如返回用户登录信息，检查版本细节）的系统函数。</li>
</ul>
<p><code>Upper()</code>函数：将文本转换为大写</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, <span class="built_in">Upper</span>(vend_name) <span class="keyword">AS</span> vend_name_upcase</span><br><span class="line"><span class="keyword">FROM</span> vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name</span><br></pre></td></tr></table></figure>

<p>常用的文本处理函数：</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Left()</td>
<td align="center">返回串左边的字符</td>
</tr>
<tr>
<td align="center">Length()</td>
<td align="center">返回串的长度</td>
</tr>
<tr>
<td align="center">Locate()</td>
<td align="center">返回串的一个子串</td>
</tr>
<tr>
<td align="center">Lower</td>
<td align="center">将串转换为小写</td>
</tr>
<tr>
<td align="center">LTrim()</td>
<td align="center">去掉串左边的空格</td>
</tr>
<tr>
<td align="center">Right()</td>
<td align="center">返回串右边的字符</td>
</tr>
<tr>
<td align="center">Rtrim()</td>
<td align="center">去掉串右边的空格</td>
</tr>
<tr>
<td align="center">Soundex()</td>
<td align="center">返回串的SOUNDEX值</td>
</tr>
<tr>
<td align="center">SubString()</td>
<td align="center">返回子串的字符</td>
</tr>
<tr>
<td align="center">Upper()</td>
<td align="center">将串转换为大写</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> Soundex(cust_contact) <span class="operator">=</span> Soundex(<span class="string">&#x27;Y Lie&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>Soundex()</code>函数进行搜索，它匹配所有发音类似于<code>Y.Lie</code>的联系名。<br><code>WHERE</code>子句使用<code>Soundex()</code>函数来转换<code>cust_contact</code>列值和搜索串为它们的<code>SOUNDEX</code>值。因为<code>Y.Lee</code>和<code>Y.Lie</code>发音相似，所以它们的<code>SOUNDEX</code>值匹配，因此<code>WHERE</code>子句正确地过滤出了所需的数据。</p>
<p>常用的日期和时间处理函数：</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">AddDate()</td>
<td align="center">增加一个日期（天，周等）</td>
</tr>
<tr>
<td align="center">AddTime()</td>
<td align="center">增加一个时间（时，分等）</td>
</tr>
<tr>
<td align="center">CurDate()</td>
<td align="center">返回当前日期</td>
</tr>
<tr>
<td align="center">CurTime()</td>
<td align="center">返回当前时间</td>
</tr>
<tr>
<td align="center">Date()</td>
<td align="center">返回日期时间的日期部分</td>
</tr>
<tr>
<td align="center">DateDiff()</td>
<td align="center">计算两个日期之差</td>
</tr>
<tr>
<td align="center">Date_Add()</td>
<td align="center">高度灵活的日期运算函数</td>
</tr>
<tr>
<td align="center">Date_Format()</td>
<td align="center">返回一个格式化的日期或时间串</td>
</tr>
<tr>
<td align="center">Day()</td>
<td align="center">返回一个日期的天数部分</td>
</tr>
<tr>
<td align="center">DayOfWeek()</td>
<td align="center">对于一个日期，返回对于的星期几</td>
</tr>
<tr>
<td align="center">Hour()</td>
<td align="center">返回一个时间的小时部分</td>
</tr>
<tr>
<td align="center">Minute()</td>
<td align="center">返回一个时间的分钟部分</td>
</tr>
<tr>
<td align="center">Month()</td>
<td align="center">返回一个日期的月份部分</td>
</tr>
<tr>
<td align="center">Now()</td>
<td align="center">返回当前日期和时间</td>
</tr>
<tr>
<td align="center">Second()</td>
<td align="center">返回一个时间的秒部分</td>
</tr>
<tr>
<td align="center">Time()</td>
<td align="center">返回一个日期时间的时间部分</td>
</tr>
<tr>
<td align="center">Year()</td>
<td align="center">返回一个日期的年份部分</td>
</tr>
</tbody></table>
<p><code>MySQL</code>使用的日期格式必须为<code>yyyy-mm-dd</code>。</p>
<p><code>Date(order_date)</code>指示<code>MySQL</code>仅提取列的日期部分。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id, order_num</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">WHERE</span> <span class="type">Date</span>(order_date) <span class="operator">=</span> <span class="string">&#x27;2005-09-01&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>检索出2005年9月下的所有订单：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id, order_num</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">WHERE</span> <span class="type">Date</span>(order_date) <span class="keyword">BETWEEN</span> <span class="string">&#x27;2005-09-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2005-09-30&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id, order_num</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Year</span>(order_date) <span class="operator">=</span> <span class="number">2005</span> <span class="keyword">AND</span> <span class="keyword">Month</span>(order_date) <span class="operator">=</span> <span class="number">9</span>;</span><br></pre></td></tr></table></figure>

<p><code>Month()</code>从日期中返回月份。因此，<code>WHERE Year(order_date)= 2005 AND Month(order_date) = 9</code>检索出<code>order_date</code>为2005年9月的所有行</p>
<p>常用的数值处理函数：</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Abs()</td>
<td align="center">返回一个数的绝对值</td>
</tr>
<tr>
<td align="center">Cos()</td>
<td align="center">返回一个角度的余弦</td>
</tr>
<tr>
<td align="center">Exp()</td>
<td align="center">返回一个数的指数值</td>
</tr>
<tr>
<td align="center">Mod()</td>
<td align="center">返回除操作的余数</td>
</tr>
<tr>
<td align="center">Pi()</td>
<td align="center">返回圆周率</td>
</tr>
<tr>
<td align="center">Rand()</td>
<td align="center">返回一个随机数</td>
</tr>
<tr>
<td align="center">Sin()</td>
<td align="center">返回一个角度的正弦</td>
</tr>
<tr>
<td align="center">Sqrt()</td>
<td align="center">返回一个数的平方根</td>
</tr>
<tr>
<td align="center">Tan()</td>
<td align="center">返回一个角度的正切</td>
</tr>
</tbody></table>
<h1 id="第12章-汇总数据"><a href="#第12章-汇总数据" class="headerlink" title="第12章 汇总数据"></a>第12章 汇总数据</h1><p>用于汇总检索数据，例子有：</p>
<ul>
<li>确定表中行数（或者满足某个条件或包含某个特定值的行数）。</li>
<li>获得表中行组的和。</li>
<li>找出表列（或所有行或某些特定的行）的最大值、最小值和平均值</li>
</ul>
<p>聚集函数：</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">AVG()</td>
<td align="center">返回某列的平均值</td>
</tr>
<tr>
<td align="center">COUNT()</td>
<td align="center">返回某列的行数</td>
</tr>
<tr>
<td align="center">MAX()</td>
<td align="center">返回某列的最大值</td>
</tr>
<tr>
<td align="center">MIN()</td>
<td align="center">返回某列的最小值</td>
</tr>
<tr>
<td align="center">SUM()</td>
<td align="center">返回某列值之和</td>
</tr>
</tbody></table>
<p><code>AVG()</code>通过对表中行数计数并计算特定列值之和，求得该列的平均值。<code>AVG()</code>可用来返回所有列的平均值，也可以用来返回特定列或行的平均值。</p>
<p>使用<code>AVG()</code>返回<code>products</code>表中所有产品的平均价格：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br></pre></td></tr></table></figure>

<p><code>AVG()</code>也可以用来确定特定列或行的平均值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> AVG_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="number">1003</span>;</span><br></pre></td></tr></table></figure>

<p>此<code>WHERE</code>子句仅过滤出<code>vend_id</code>为1003的产品，因此<code>avg_price</code>中返回的值只是该供应商的产品的平均值。</p>
<p><code>AVG()</code>只能用来确定特定数值列的平均值，而且列名必须作为函数参数给出。为了获得多个列的平均值，必须使用多个<code>AVG()</code>函数。</p>
<p>可利用<code>COUNT()</code>确定表中行的数目或符合特定条件的行的数目</p>
<p><code>COUNT()</code>函数有两种使用方式:</p>
<ul>
<li>使用<code>COUNT(*)</code>对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值。</li>
<li>使用<code>COUNT(column)</code>对特定列中具有值的行进行计数，忽略NULL值。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_cust</span><br><span class="line"><span class="keyword">FROM</span> customers;</span><br></pre></td></tr></table></figure>

<p>上面返回<code>customers</code>表中客户的总数，在此例子中，利用<code>COUNT(*)</code>对所有行计数，不管行中各列有什么值。计数值在<code>num_cust</code>中返回。</p>
<p>下面的例子只对具有电子邮件地址的客户计数:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(cust_email) <span class="keyword">AS</span> num_cust</span><br><span class="line"><span class="keyword">FROM</span> customers;</span><br></pre></td></tr></table></figure>

<p><code>NULL</code>值，如果指定列名，则指定列的值为空的行被<code>COUNT()</code>函数忽略，但如果<code>COUNT()</code>函数中用的是星号（<code>*</code>），则不忽略。</p>
<p><code>MAX()</code>返回指定列中的最大值。<code>MAX()</code>要求指定列名。在用于文本数据时，如果数据按相应的列排序，则<code>MAX()</code>返回最后一行。<code>MAX()</code>函数忽略列值为<code>NULL</code>的行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(prod_price) <span class="keyword">AS</span> max_price</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure>

<p><code>MAX()</code>返回<code>products</code>表中最贵的物品的价格。</p>
<p><code>MIN()</code>,它返回指定列的最小值。<code>MIN()</code>要求指定列名。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(pro_price) <span class="keyword">AS</span> min_price</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure>

<p><code>MIN()</code>返回<code>products</code>表中最便宜物品的价格。</p>
<p><code>SUM()</code>用来返回指定列值的和（总计）。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(quantity) <span class="keyword">AS</span> items_ordered</span><br><span class="line"><span class="keyword">FROM</span> orderitems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure>

<p>函数<code>SUM(quantity)</code>返回订单中所有物品数量之和，<code>WHERE</code>子句保证只统计某个物品订单中的物品。</p>
<p>下面的例子中，合计每项物品的<code>item_price*quantity</code>，得出总的订单金额。<br>函数<code>SUM(item_price*quantity)</code>返回订单中所有物品价钱之和，<code>WHERE</code>子句同样保证只统计某个物品订单中的物品。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(item_price<span class="operator">*</span>quantity) <span class="keyword">AS</span> total_price</span><br><span class="line"><span class="keyword">FROM</span> orderitems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure>

<p>下面使用了<code>DISTINCT</code>参数，因此平均值只考虑各个不同的价格。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(<span class="keyword">DISTINCT</span> prod_price) <span class="keyword">AS</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="number">1003</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_items,</span><br><span class="line">       <span class="built_in">MIN</span>(prod_price) <span class="keyword">AS</span> price_min,</span><br><span class="line">       <span class="built_in">MAX</span>(prod_price) <span class="keyword">AS</span> price_max,</span><br><span class="line">       <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> price_avg,</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure>

<p>单条<code>SELECT</code>语句执行了4个聚集计算，返回4个值（<code>products</code>表中物品的数目，产品价格的最低、最高以及平均值）。</p>
<p>在指定别名以包含某个聚集函数的结果时，不应该使用表中实际的列名。</p>
<h1 id="第13章-分组数据"><a href="#第13章-分组数据" class="headerlink" title="第13章 分组数据"></a>第13章 分组数据</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_prods</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id;</span><br></pre></td></tr></table></figure>

<p>上面的<code>SELECT</code>语句指定了两个列，<code>vend_id</code>包含产品供应商的<code>ID</code>, <code>num_prods</code>为计算字段（用<code>COUNT(*)</code>函数建立）。<code>GROUP BY</code>子句指示<code>MySQL</code>按<code>vend_id</code>排序并分组数据。这导致对每个<code>vend_id</code>而不是整个表计算<code>num_prods</code>一次。</p>
<p><code>GROUP BY</code>子句指示<code>MySQL</code>分组数据，然后对每个组而不是整个结果集进行聚集。</p>
<p>重要的规定：</p>
<ul>
<li><code>GROUP BY</code>子句可以包含任意数目的列。这使得能对分组进行嵌套，为数据分组提供更细致的控制。</li>
<li>如果在<code>GROUP BY</code>子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以不能从个别的列取回数据）。</li>
<li><code>GROUP BY</code>子句中列出的每个列都必须是检索列或有效的表达式（但不能是聚集函数）。如果在<code>SELECT</code>中使用表达式，则必须在<code>GROUP BY</code>子句中指定相同的表达式。不能使用别名。</li>
<li>除聚集计算语句外，<code>SELECT</code>语句中的每个列都必须在<code>GROUP BY</code>子句中给出。</li>
<li>如果分组列中具有<code>NULL</code>值，则<code>NULL</code>将作为一个分组返回。如果列中有多行<code>NULL</code>值，它们将分为一组。</li>
<li><code>GROUP BY</code>子句必须出现在<code>WHERE</code>子句之后，<code>ORDER BY</code>子句之前。</li>
</ul>
<p>使用<code>WITH ROLLUP</code>关键字，可以得到每个分组以及每个分组汇总级别（针对每个分组）的值，如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 不太明白，需要再具体查查</span><br><span class="line"><span class="keyword">SELECT</span> vend_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_prods</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span></span><br></pre></td></tr></table></figure>

<p><code>WHERE</code>过滤行，而<code>HAVING</code>过滤分组，<code>HAVING</code>支持所有<code>WHERE</code>操作符。<br><code>WHERE</code>在数据分组前进行过滤，HAVING在数据分组后进行过滤。<code>WHERE</code>排除的行不包括在分组中。这可能会改变计算值，从而影响<code>HAVING</code>子句中基于这些值过滤掉的分组。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> orders</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p><code>HAVING</code>过滤<code>COUNT(*) &gt;=2</code>（两个以上的订单）的那些分组。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_prods</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&gt;=</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>上面列出具有2个（含）以上、价格为10（含）以上的产品的供应商。<br><code>WHERE</code>子句过滤所有<code>prod_price</code>至少为10的行。然后按<code>vend_id</code>分组数据，<code>HAVING</code>子句过滤计数为2或2以上的分组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num, <span class="built_in">SUM</span>(quantity<span class="operator">*</span>item_price) <span class="keyword">AS</span> ordertotal</span><br><span class="line"><span class="keyword">FROM</span> orderitems</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> order_num</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">SUM</span>(quantity<span class="operator">*</span>item_price) <span class="operator">&gt;=</span> <span class="number">50</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ordertotal;</span><br></pre></td></tr></table></figure>

<p><code>GROUP BY</code>子句用来按订单号（<code>order_num</code>列）分组数据，以便<code>SUM(*)</code>函数能够返回总计订单价格。<code>HAVING</code>子句过滤数据，使得只返回总计订单价格大于等于50的订单。最后，用<code>ORDER BY</code>子句排序输出。</p>
<p><code>SELECT</code>语句中子句的顺序：</p>
<table>
<thead>
<tr>
<th align="center">子句</th>
<th align="center">说明</th>
<th align="center">是否必须使用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SELECT</td>
<td align="center">要返回的列或表达式</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">FROM</td>
<td align="center">从中检索数据的表</td>
<td align="center">仅在从表选择数据时使用</td>
</tr>
<tr>
<td align="center">WHERE</td>
<td align="center">行级过滤</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">GROUP BY</td>
<td align="center">分组说明</td>
<td align="center">仅在按组计算聚集时使用</td>
</tr>
<tr>
<td align="center">HAVING</td>
<td align="center">组级过滤</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">ORDER BY</td>
<td align="center">输出排序顺序</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">LIMIT</td>
<td align="center">要检索的行数</td>
<td align="center">否</td>
</tr>
</tbody></table>
<h1 id="第14章-使用子查询"><a href="#第14章-使用子查询" class="headerlink" title="第14章 使用子查询"></a>第14章 使用子查询</h1><p>把第一个查询（返回订单号的那一个）变为子查询组合两个查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line">                    <span class="keyword">FROM</span> orderitems</span><br><span class="line">                    <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> customer</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cust_id</span><br><span class="line">                  <span class="keyword">FROM</span> orders</span><br><span class="line">                  <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line">                                      <span class="keyword">FROM</span> orderitems</span><br><span class="line">                                      <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>);)</span><br></pre></td></tr></table></figure>

<p>为了执行上述<code>SELECT</code>语句，<code>MySQL</code>实际上必须执行3条<code>SELECT</code>语句。最里边的子查询返回订单号列表，此列表用于其外面的子查询的<code>WHERE</code>子句。外面的子查询返回客户<code>ID</code>列表，此客户<code>ID</code>列表用于最外层查询的<code>WHERE</code>子句。最外层查询确实返回所需的数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, </span><br><span class="line">       cust_state,</span><br><span class="line">       (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">        <span class="keyword">FROM</span> orders</span><br><span class="line">        <span class="keyword">WHERE</span> orders.cust_id <span class="operator">=</span> customers.cust_id) <span class="keyword">AS</span> orders</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name;</span><br></pre></td></tr></table></figure>

<p><code>orders</code>是一个计算字段，它是由圆括号中的子查询建立的。该子查询对检索出的每个客户执行一次。<br>子查询中使用了完全限定列名。</p>
<p>下面的语句告诉<code>SQL</code>比较<code>orders</code>表中的<code>cust_id</code>与当前正从<code>customers</code>表中检索的<code>cust_id</code>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> orders.cust_id <span class="operator">=</span> customers.cust_id</span><br></pre></td></tr></table></figure>

<h1 id="第15章-联结表"><a href="#第15章-联结表" class="headerlink" title="第15章 联结表"></a>第15章 联结表</h1><p>外键为某个表中的一列，它包含另一个表的主键值</p>
<p>联结是一种机制，用来在一条SELECT语句中关联表，因此称之为联结。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> vendors, products</span><br><span class="line"><span class="keyword">WHERE</span> vendors.vend_id <span class="operator">=</span> products.vend_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name, prod_name;</span><br></pre></td></tr></table></figure>

<p>这两个表用<code>WHERE</code>子句正确联结，<code>WHERE</code>子句指示<code>MySQL</code>匹配<code>vendors</code>表中的<code>vend_id</code>和<code>products</code>表中的<code>vend_id</code>。<br>在联结两个表时，你实际上做的是将第一个表中的每一行与第二个表中的每一行配对。</p>
<p>应该保证所有联结都有WHERE子句，否则<code>MySQ</code>L将返回比想要的数据多得多的数据。</p>
<p>等值联结，基于两个表之间的相等测试。这种联结也称为内部联结</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> vendors <span class="keyword">INNER</span> <span class="keyword">JOIN</span> products</span><br><span class="line"><span class="keyword">ON</span> vendors.vend_id <span class="operator">=</span> products.vend_id;</span><br></pre></td></tr></table></figure>

<p>此语句中的<code>SELECT</code>与前面的<code>SELECT</code>语句相同，但<code>FROM</code>子句不同。这里，两个表之间的关系是<code>FROM</code>子句的组成部分，以<code>INNER JOIN</code>指定。在使用这种语法时，联结条件用特定的<code>ON</code>子句而不是<code>WHERE</code>子句给出。传递给<code>ON</code>的实际条件与传递给<code>WHERE</code>的相同。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 首先列出所有表，然后定义表之间的关系</span><br><span class="line"><span class="keyword">SELECT</span> prod_name, vend_name, prod_price, quantity</span><br><span class="line"><span class="keyword">FROM</span> orderitems, products, vendors</span><br><span class="line"><span class="keyword">WHERE</span> products.vend_id <span class="operator">=</span> vendors.vend_id</span><br><span class="line">      <span class="keyword">AND</span> orderitems.prod_id <span class="operator">=</span> products.prod_id</span><br><span class="line">      <span class="keyword">AND</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure>

<p>此例子显示编号为<code>20005</code>的订单中的物品。订单物品存储在<code>orderitems</code>表中。每个产品按其产品<code>ID</code>存储，它引用<code>products</code>表中的产品。这些产品通过供应商ID联结到<code>vendors</code>表中相应的供应商，供应商ID存储在每个产品的记录中。这里的<code>FROM</code>子句列出了3个表，而<code>WHERE</code>子句定义了这两个联结条件，而第三个联结条件用来过滤出订单<code>20005</code>中的物品。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> customer</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cust_id</span><br><span class="line">                  <span class="keyword">FROM</span> orders</span><br><span class="line">                  <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line">                                      <span class="keyword">FROM</span> orderitems</span><br><span class="line">                                      <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>);)</span><br></pre></td></tr></table></figure>

<p>子查询并不总是执行复杂<code>SELECT</code>操作的最有效的方法，下面是使用联结的相同查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> customers, orders, orderitems</span><br><span class="line"><span class="keyword">WHERE</span> customers.cust_id <span class="operator">=</span> orders.cust_id</span><br><span class="line">      <span class="keyword">AND</span> orderitems.order_num <span class="operator">=</span> order.order_num</span><br><span class="line">      <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="第16章-创建高级联结"><a href="#第16章-创建高级联结" class="headerlink" title="第16章 创建高级联结"></a>第16章 创建高级联结</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers <span class="keyword">AS</span> c, orders <span class="keyword">AS</span> o, orderitems <span class="keyword">AS</span> oi</span><br><span class="line"><span class="keyword">WHERE</span> c.cust_id <span class="operator">=</span> o.cust_id</span><br><span class="line">      <span class="keyword">AND</span> oi.order_num <span class="operator">=</span> o.order_num</span><br><span class="line">      <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><code>FROM</code>子句中3个表全都具有别名。<code>customers AS c</code>建立<code>c</code>作为<code>customers</code>的别名，等等。这使得能使用省写的<code>c</code>而不是全名<code>customers</code>。在此例子中，表别名只用于<code>WHERE</code>子句。但是，表别名不仅能用于<code>WHERE</code>子句，它还可以用于<code>SELECT</code>的列表、<code>ORDER BY</code>子句以及语句的其他部分。</p>
<p>表别名只在查询执行中使用。与列别名不一样，表别名不返回到客户机。</p>
<p>下面首先找到生产<code>ID</code>为<code>DTNTR</code>的物品的供应商，然后找出这个供应商生产的其他物品。它使用了子查询，内部的<code>SELECT</code>语句做了一个简单的检索，返回生产<code>ID</code>为<code>DTNTR</code>的物品供应商的<code>vend_id</code>。该<code>ID</code>用于外部查询的<code>WHERE</code>子句中，以便检索出这个供应商生产的所有物品：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 子查询</span><br><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> (<span class="keyword">SELECT</span> vend_id</span><br><span class="line">                 <span class="keyword">FROM</span> products</span><br><span class="line">                 <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;DTNTR&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p1.prod_id, p1.prod_name</span><br><span class="line"><span class="keyword">FROM</span> products <span class="keyword">AS</span> p1, products <span class="keyword">AS</span> p2</span><br><span class="line"><span class="keyword">WHERE</span> p1.vend_id <span class="operator">=</span> p2.vend_id</span><br><span class="line">      <span class="keyword">AND</span> p2.prod_id <span class="operator">=</span> <span class="string">&#x27;DTNTR&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><code>WHERE</code>（通过匹配<code>p1</code>中的<code>vend_id</code>和<code>p2</code>中的<code>vend_id</code>）首先联结两个表，然后按第二个表中的<code>prod_id</code>过滤数据，返回所需的数据。</p>
<p>自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句。虽然最终的结果是相同的，但有时候处理联结远比处理子查询快得多。</p>
<p>无论何时对表进行联结，应该至少有一个列出现在不止一个表中（被联结的列）。<br>标准的联结（前一章中介绍的内部联结）返回所有数据，甚至相同的列多次出现。自然联结排除多次出现，使每个列只返回一次。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.<span class="operator">*</span>, o.order_num, o.order_date, oi.prod_id, oi.quantity, oi.item_price</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">AS</span> c, orders <span class="keyword">AS</span> o, oderitems <span class="keyword">AS</span> oi</span><br><span class="line"><span class="keyword">WHERE</span> c.cust_id <span class="operator">=</span> o.cust_id</span><br><span class="line">      <span class="keyword">AND</span> oi.order_num <span class="operator">=</span> o.order_num</span><br><span class="line">      <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;FB&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>许多联结将一个表中的行与另一个表中的行相关联。但有时候会需要包含没有关联行的那些行。使用外部联结。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.cust_id, orders.order_num</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> orders</span><br><span class="line"><span class="keyword">ON</span> customers.cust_id <span class="operator">=</span> orders.cust_id;</span><br></pre></td></tr></table></figure>

<p>与内部联结关联两个表中的行不同的是，外部联结还包括没有关联行的行。在使用<code>OUTER JOIN</code>语法时，必须使用<code>RIGHT</code>或<code>LEFT</code>关键字指定包括其所有行的表（<code>RIGHT</code>指出的是<code>OUTER JOIN</code>右边的表，而<code>LEFT</code>指出的是<code>OUTER JOIN</code>左边的表）。上面的例子使用<code>LEFT OUTER JOIN</code>从<code>FROM</code>子句的左边表（<code>customers</code>表）中选择所有行。为了从右边的表中选择所有行，应该使用<code>RIGHT OUTER JOIN</code>，如下例所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer.cust_id, orders.order_num</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> orders</span><br><span class="line"><span class="keyword">ON</span> orders.cust_id <span class="operator">=</span> customers.cust_id;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.cust_name,</span><br><span class="line">       customers.cust_id,</span><br><span class="line">       <span class="built_in">COUNT</span>(orders.order_num) <span class="keyword">AS</span> num_ord</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders</span><br><span class="line"><span class="keyword">ON</span> customers.cust_id <span class="operator">=</span> orders.cust_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customers.cust_id;</span><br></pre></td></tr></table></figure>

<p>此<code>SELECT</code>语句使用<code>INNER JOIN</code>将<code>customers</code>和<code>orders</code>表互相关联。<code>GROUP BY</code>子句按客户分组数据，因此，函数调用<code>COUNT(orders.order_num)</code>对每个客户的订单计数，将它作为<code>num_ord</code>返回。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer.cust_name,</span><br><span class="line">       customers.cust_id,</span><br><span class="line">       <span class="built_in">COUNT</span>(orders.order_num) <span class="keyword">AS</span> num_ord</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> orders</span><br><span class="line"><span class="keyword">ON</span> customers.cust_id <span class="operator">=</span> orders.cust_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customers.cust_id</span><br></pre></td></tr></table></figure>

<p>这个例子使用左外部联结来包含所有客户，甚至包含那些没有任何下订单的客户。结果显示也包含了客户Mouse House，它有0个订单。</p>
<h1 id="第17章-组合查询"><a href="#第17章-组合查询" class="headerlink" title="第17章 组合查询"></a>第17章 组合查询</h1><p><code>MySQL</code>也允许执行多个查询（多条<code>SELECT</code>语句），并将结果作为单个查询结果集返回。这些组合查询通常称为并（union）或复合查询（compound query）。<br>有两种基本情况，其中需要使用组合查询：</p>
<ul>
<li>在单个查询中从不同的表返回类似结构的数据；</li>
<li>对单个表执行多个查询，按单个查询返回数据。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&lt;=</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>);</span><br></pre></td></tr></table></figure>

<p>第一条SELECT检索价格不高于5的所有物品。第二条SELECT使用IN找出供应商1001和1002生产的所有物品，组合了一下。与下面的查询等价。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&lt;=</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">OR</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>)</span><br></pre></td></tr></table></figure>

<p><code>UNION</code>规则</p>
<ul>
<li><code>UNION</code>必须由两条或两条以上的<code>SELECT</code>语句组成，语句之间用关键字<code>UNION</code>分隔（因此，如果组合4条<code>SELECT</code>语句，将要使用3个<code>UNION</code>关键字）。</li>
<li><code>UNION</code>中的每个查询必须包含相同的列、表达式或聚集函数（不过各个列不需要以相同的次序列出）。</li>
<li>列数据类型必须兼容：类型不必完全相同，但必须是<code>DBMS</code>可以隐含地转换的类型（例如，不同的数值类型或不同的日期类型）。</li>
</ul>
<p>在使用UNION时，重复的行被自动取消。如果想返回所有匹配行，可使用<code>UNION ALL</code>而不是<code>UNION</code>。</p>
<p>在用<code>UNION</code>组合查询时，只能使用一条<code>ORDER BY</code>子句，它必须出现在最后一条<code>SELECT</code>语句之后。将用它来排序所有<code>SELECT</code>语句返回的所有结果，只能有一种排序方式。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&lt;=</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_id, prod_id;</span><br></pre></td></tr></table></figure>

<h1 id="第18章-全文本搜索"><a href="#第18章-全文本搜索" class="headerlink" title="第18章 全文本搜索"></a>第18章 全文本搜索</h1><p>两个最常使用的引擎为MyISAM和InnoDB，前者支持全文本搜索，而后者不支持。</p>
<p>一般在创建表时启用全文本搜索。<code>CREATE TABLE</code>语句（第21章中介绍）接受<code>FULLTEXT</code>子句，它给出被索引列的一个逗号分隔的列表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> productnotes</span><br><span class="line">(</span><br><span class="line">        note_id    <span class="type">int</span>    <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">        prod_id    <span class="type">char</span>(<span class="number">10</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        note_date    datetime    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        note_text    text    <span class="keyword">NULL</span>,</span><br><span class="line">        <span class="keyword">PRIMARY</span> KEY(note_id),</span><br><span class="line">        FULLTEXT(note_text)</span><br><span class="line">)ENGINE<span class="operator">=</span>MyISAM;</span><br></pre></td></tr></table></figure>

<p>这里的<code>FULLTEXT</code>索引单个列，如果需要也可以指定多个列。<br>在定义之后，<code>MySQL</code>自动维护该索引。在增加、更新或删除行时，索引随之自动更新</p>
<p><code>Match()</code>指定被搜索的列，<code>Against()</code>指定要使用的搜索表达式。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;rabit&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><code>Match(note_text)</code>指示<code>MySQL</code>针对指定的列进行搜索，<code>Against(&#39;rabbit&#39;)</code>指定词<code>rabbit</code>作为搜索文本。由于有两行包含词<code>rabbit</code>，这两个行被返回。<br>除非使用<code>BINARY</code>方式（本章中没有介绍），否则全文本搜索不区分大小写。</p>
<p>全文本搜索的一个重要部分就是对结果排序。具有较高等级的行先返回（因为这些行很可能是你真正想要的行）。<br>如果指定多个搜索项，则包含多数匹配词的那些行将具有比包含较少词（或仅有一个匹配）的那些行高的等级值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;anvils&#x27;</span> <span class="keyword">WITH</span> QUERY EXPANSION);</span><br></pre></td></tr></table></figure>

<p>查询扩展，可能与你的搜索有关的所有其他行，即使它们不包含词anvils。</p>
<p>布尔方式，可以提供关于如下内容的细节：</p>
<ul>
<li>要匹配的词；</li>
<li>要排斥的词（如果某行包含这个词，则不返回该行，即使它包含其他指定的词也是如此）；</li>
<li>排列提示（指定某些词比其他词更重要，更重要的词等级更高）;</li>
<li>表达式分组；</li>
<li>另外一些内容。</li>
</ul>
<p>为了匹配包含<code>heavy</code>但不包含任意以<code>rope</code>开始的词的行，可使用以下查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;heavy -rope*&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE);</span><br></pre></td></tr></table></figure>

<p><code>-</code>排除一个词，而<code>*</code>是截断操作符（可想象为用于词尾的一个通配符）。</p>
<p>支持的所有布尔操作符如下：</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">包含，词必须存在</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">排除，词必须不出现</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">包含，而且增加等级</td>
</tr>
<tr>
<td align="center">()</td>
<td align="center">把词组成子表达式（允许这些子表达式作为一个组被包含、排除、排列等）</td>
</tr>
<tr>
<td align="center">~</td>
<td align="center">取消一个词的排序值</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">词尾的通配符</td>
</tr>
<tr>
<td align="center">“”</td>
<td align="center">定义一个短语（与单个词的列表不一样，它匹配整个短语以便包含或排除这个短语）</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;+rabbit +bait&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE);</span><br></pre></td></tr></table></figure>

<p>这个搜索匹配包含词<code>rabbit</code>和<code>bait</code>的行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;rabbit bait&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE);</span><br></pre></td></tr></table></figure>

<p>没有指定操作符，这个搜索匹配包含<code>rabbit</code>和<code>bait</code>中的至少一个词的行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;&quot;rabbit bait&quot;&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE);</span><br></pre></td></tr></table></figure>

<p>这个搜索匹配短语<code>rabbit bait</code>而不是匹配两个词<code>rabbit</code>和<code>bait</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;&gt;rabbit &lt;carrot&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE);</span><br></pre></td></tr></table></figure>

<p>匹配<code>rabbit</code>和<code>carrot</code>，增加前者的等级，降低后者的等级。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;+safe +(&lt;combination)&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE);</span><br></pre></td></tr></table></figure>

<p>这个搜索匹配词<code>safe</code>和<code>combination</code>，降低后者的等级。</p>
<p>在布尔方式中，不按等级值降序排序返回的行。</p>
<p>全文本搜索的某些重要的说明:</p>
<ul>
<li>在索引全文本数据时，短词被忽略且从索引中排除。短词定义为那些具有3个或3个以下字符的词（如果需要，这个数目可以更改）。</li>
<li><code>MySQL</code>带有一个内建的非用词（<code>stopword</code>）列表，这些词在索引全文本数据时总是被忽略。如果需要，可以覆盖这个列表（请参阅<code>MySQL</code>文档以了解如何完成此工作）。</li>
<li>许多词出现的频率很高，搜索它们没有用处（返回太多的结果）。因此，<code>MySQL</code>规定了一条50%规则，如果一个词出现在50%以上的行中，则将它作为一个非用词忽略。50%规则不用于<code>IN BOOLEAN MODE</code>。</li>
<li>如果表中的行数少于3行，则全文本搜索不返回结果（因为每个词或者不出现，或者至少出现在50%的行中）。</li>
<li>忽略词中的单引号。例如，don’t索引为dont。</li>
<li>不具有词分隔符（包括日语和汉语）的语言不能恰当地返回全文本搜索结果。</li>
<li>如前所述，仅在<code>MyISAM</code>数据库引擎中支持全文本搜索。</li>
</ul>
<h1 id="第19章-插入数据"><a href="#第19章-插入数据" class="headerlink" title="第19章 插入数据"></a>第19章 插入数据</h1><p>插入可以用几种方式使用：</p>
<ul>
<li>插入完整的行；</li>
<li>插入行的一部分；</li>
<li>插入多行；</li>
<li>插入某些查询的结果。</li>
</ul>
<p>INSERT语句一般不会产生输出。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(</span><br><span class="line">        cust_name,</span><br><span class="line">        cust_city,</span><br><span class="line">        cust_state,</span><br><span class="line">        cust_zip,</span><br><span class="line">        cust_country,</span><br><span class="line">        cust_contact,</span><br><span class="line">        cust_email)</span><br><span class="line"><span class="keyword">VALUES</span>(</span><br><span class="line">        <span class="string">&#x27;Pep E. LaPew&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;100 Main Street&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Los Angeles&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CA&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;90046&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USA&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NULL&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NULL&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如果表的定义允许，则可以在<code>INSERT</code>操作中省略某些列。省略的列必须满足以下某个条件:</p>
<ul>
<li>该列定义为允许<code>NULL</code>值（无值或空值）。</li>
<li>在表定义中给出默认值。这表示如果不给出值，将使用默认值。</li>
</ul>
<p>只要每条<code>INSERT</code>语句中的列名（和次序）相同，可以如下组合各语句:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(</span><br><span class="line">        cust_name,</span><br><span class="line">        cust_address,</span><br><span class="line">        cust_city,</span><br><span class="line">        cust_state,</span><br><span class="line">        cust_zip,</span><br><span class="line">        cust_country)</span><br><span class="line"><span class="keyword">VALUES</span>(</span><br><span class="line">        <span class="string">&#x27;Pep E. LaPew&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;100 Main Street&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Los Angeles&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CA&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;90046&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USA&#x27;</span></span><br><span class="line">      ),</span><br><span class="line">      (</span><br><span class="line">        <span class="string">&#x27;M. Martian&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;42 Galaxy Way&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NY&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;11213&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USA&#x27;</span></span><br><span class="line">      );</span><br></pre></td></tr></table></figure>

<p>下面的例子使用<code>INSERT SELECT</code>从<code>custnew</code>中将所有数据导入<code>customers</code>，也可以省略<code>cust_id</code>，让MySQL生成新值:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(</span><br><span class="line">        cust_id,</span><br><span class="line">        cust_email,</span><br><span class="line">        cust_name,</span><br><span class="line">        cust_address,</span><br><span class="line">        cust_city,</span><br><span class="line">        cust_state,</span><br><span class="line">        cust_zip,</span><br><span class="line">        cust_country)</span><br><span class="line"><span class="keyword">SELECT</span>  cust_id,</span><br><span class="line">        cust_email,</span><br><span class="line">        cust_name,</span><br><span class="line">        cust_address,</span><br><span class="line">        cust_city,</span><br><span class="line">        cust_state,</span><br><span class="line">        cust_zip,</span><br><span class="line">        cust_country</span><br><span class="line"><span class="keyword">FROM</span> custnew;</span><br></pre></td></tr></table></figure>

<h1 id="第20章-更新和删除数据"><a href="#第20章-更新和删除数据" class="headerlink" title="第20章 更新和删除数据"></a>第20章 更新和删除数据</h1><p>可采用两种方式使用<code>UPDATE</code>：</p>
<ul>
<li>更新表中特定行；</li>
<li>更新表中所有行。</li>
</ul>
<p>基本的<code>UPDATE</code>语句由3部分组成，分别是：</p>
<ul>
<li>要更新的表；</li>
<li>列名和它们的新值；</li>
<li>确定要更新行的过滤条件。</li>
</ul>
<p><code>WHERE</code>子句不要省略，否则会更新表中所有行。</p>
<p>客户10005现在有了电子邮件地址，因此他的记录需要更新：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE customers</span><br><span class="line"><span class="keyword">SET</span> cust_email <span class="operator">=</span> <span class="string">&#x27;elmer@fudd.com&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">10005</span>;</span><br></pre></td></tr></table></figure>

<p><code>UPDATE</code>语句总是以要更新的表的名字开始。在此例子中，要更新的表的名字为<code>customers</code>。<code>SET</code>命令用来将新值赋给被更新的列。如这里所示，<code>SET</code>子句设置<code>cust_email</code>列为指定的值。<code>UPDATE</code>语句以<code>WHERE</code>子句结束，它告诉<code>MySQL</code>更新哪一行。没有<code>WHERE</code>子句，<code>MySQL</code>将会用这个电子邮件地址更新<code>customers</code>表中所有行，这不是我们所希望的。</p>
<p>更新客户10005的<code>cust_name</code>和<code>cust_email</code>列：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE customers</span><br><span class="line"><span class="keyword">SET</span> cust_name <span class="operator">=</span> <span class="string">&#x27;The Fudds&#x27;</span>,</span><br><span class="line">    cust_email <span class="operator">=</span> <span class="string">&#x27;elmer@fudd.com&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">10005</span>;</span><br></pre></td></tr></table></figure>

<p><code>IGNORE</code>关键字：如果用<code>UPDATE</code>语句更新多行，并且在更新这些行中的一行或多行时出现一个错误，则整个<code>UPDATE</code>操作被取消（错误发生前更新的所有行被恢复到它们原来的值）。即使是发生错误，也继续进行更新，可使用<code>IGNORE</code>关键字，如下所示：<code>UPDATE IGNORE customers…</code></p>
<p>为了删除某个列的值，可设置它为<code>NULL</code>（假如表定义允许<code>NULL</code>值）。如下进行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE customers</span><br><span class="line"><span class="keyword">SET</span> cust_email <span class="operator">=</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">1005</span>;</span><br></pre></td></tr></table></figure>

<p><code>DELETE</code>可以从表中删除数据，有两种方式使用：</p>
<ul>
<li>从表中删除特定的行；</li>
<li>从表中删除所有行。</li>
</ul>
<p>下面的语句从<code>customers</code>表中删除一行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">10006</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，只删除客户10006。如果省略<code>WHERE</code>子句，它将删除表中每个客户。</p>
<p><code>DELETE</code>不需要列名或通配符。<code>DELETE</code>删除整行而不是删除列。为了删除指定的列，请使用<code>UPDATE</code>语句。</p>
<p>更快的删除 如果想从表中删除所有行，不要使用<code>DELETE</code>。可使用<code>TRUNCATE TABLE</code>语句，它完成相同的工作，但速度更快（<code>TRUNCATE</code>实际是删除原来的表并重新创建一个表，而不是逐行删除表中的数据）</p>
<p>使用<code>UPDATE</code>或<code>DELETE</code>时所遵循的习惯：</p>
<ul>
<li>除非确实打算更新和删除每一行，否则绝对不要使用不带<code>WHERE</code>子句的<code>UPDATE</code>或<code>DELETE</code>语句。</li>
<li>保证每个表都有主键（如果忘记这个内容，请参阅第15章），尽可能像<code>WHERE</code>子句那样使用它（可以指定各主键、多个值或值的范围）。</li>
<li>在对<code>UPDATE</code>或<code>DELETE</code>语句使用<code>WHERE</code>子句前，应该先用<code>SELECT</code>进行测试，保证它过滤的是正确的记录，以防编写的<code>WHERE</code>子句不正确。</li>
<li>使用强制实施引用完整性的数据库（关于这个内容，请参阅第15章），这样<code>MySQL</code>将不允许删除具有与其他表相关联的数据的行。</li>
</ul>
<h1 id="第21章-创建和操纵表"><a href="#第21章-创建和操纵表" class="headerlink" title="第21章 创建和操纵表"></a>第21章 创建和操纵表</h1><p><code>CREATE TABLE</code>创建表，必须给出下列信息：</p>
<ul>
<li>新表的名字，在关键字<code>CREATE TABLE</code>之后给出；</li>
<li>表列的名字和定义，用逗号分隔。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> productnotes</span><br><span class="line">(</span><br><span class="line">        note_id    <span class="type">int</span>    <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">        prod_id    <span class="type">char</span>(<span class="number">10</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        note_date    datetime    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        note_text    text    <span class="keyword">NULL</span>,</span><br><span class="line">        <span class="keyword">PRIMARY</span> KEY(note_id),</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure>

<p>如果你仅想在一个表不存在时创建它，应该在表名后给出<code>IF NOT EXISTS</code>。</p>
<p>为创建由多个列组成的主键，应该以逗号分隔的列表给出各列名：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orderitems</span><br><span class="line">(</span><br><span class="line">        order_num    <span class="type">int</span>    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        order_item    <span class="type">int</span>    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        prod_id    <span class="type">char</span>(<span class="number">10</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        quantity    <span class="type">int</span>    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        item_price    <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        <span class="keyword">PRIMARY</span> KEY (order_num, order_item)</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure>

<p>如果主键使用单个列，则它的值必须唯一。如果使用多个列，则这些列的组合值必须唯一，主键中只能使用不允许<code>NULL</code>值的列。</p>
<p>每个表只允许一个<code>AUTO_INCREMENT</code>列，而且它必须被索引（如，通过使它成为主键）。<br><code>SELECT_last_insert_id()</code>此语句返回最后一个<code>AUTO_INCREMENT</code>值，然后可以将它用于后续的MySQL语句。</p>
<p>默认值用<code>CREATE TABLE</code>语句的列定义中的<code>DEFAULT</code>关键字指定，下面给该列的描述添加文本<code>DEFAULT 1</code>指示<code>MySQL</code>，在未给出数量的情况下使用数量1：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orderitems</span><br><span class="line">(</span><br><span class="line">        order_num    <span class="type">int</span>    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        order_item    <span class="type">int</span>    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        prod_id    <span class="type">char</span>(<span class="number">10</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        quantity    <span class="type">int</span>    <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">        item_price    <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        <span class="keyword">PRIMARY</span> KEY (order_num, order_item)</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure>

<p>引擎：</p>
<ul>
<li><code>InnoDB</code>是一个可靠的事务处理引擎（参见第26章），它不支持全文本搜索；</li>
<li><code>MEMORY</code>在功能等同于<code>MyISAM</code>，但由于数据存储在内存（不是磁盘）中，速度很快（特别适合于临时表）；</li>
<li><code>MyISAM</code>是一个性能极高的引擎，它支持全文本搜索（参见第18章），但不支持事务处理。</li>
</ul>
<p>外键（用于强制实施引用完整性，如第1章所述）不能跨引擎，即使用一个引擎的表不能引用具有使用不同引擎的表的外键。</p>
<p>当表中存储数据以后，该表就不应该再被更新。<br>为了使用<code>ALTER TABLE</code>更改表结构，必须给出下面的信息：</p>
<ul>
<li>在<code>ALTER TABLE</code>之后给出要更改的表名（该表必须存在，否则将出错）；</li>
<li>所做更改的列表。</li>
</ul>
<p>下面的例子给表添加一个列：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> vendors</span><br><span class="line"><span class="keyword">ADD</span> vend_phone <span class="type">CHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<p>这条语句给<code>vendors</code>表增加一个名为<code>vend_phone</code>的列，必须明确其数据类型。<br>删除刚刚添加的列，可以这样做：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> vendors</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> vend_phone</span><br></pre></td></tr></table></figure>

<p><code>ALTER TABLE</code>的一种常见用途是定义外键。</p>
<p>复杂的表结构更改一般需要手动删除过程，它涉及以下步骤：</p>
<ol>
<li>用新的列布局创建一个新表；</li>
<li>使用INSERT SELECT语句（关于这条语句的详细介绍，请参阅第19章）从旧表复制数据到新表。如果有必要，可使用转换函数和计算字段；</li>
<li>检验包含所需数据的新表；</li>
<li>重命名旧表（如果确定，可以删除它）；</li>
<li>用旧表原来的名字重命名新表；</li>
<li>根据需要，重新创建触发器、存储过程、索引和外键。</li>
</ol>
<p>删除表（删除整个表而不是其内容）非常简单，使用<code>DROP TABLE</code>语句即可：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> customers2;</span><br></pre></td></tr></table></figure>

<p>使用<code>RENAME TABLE</code>语句可以重命名一个表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> customers2 <span class="keyword">TO</span> customers;</span><br></pre></td></tr></table></figure>

<p>可以使用下面的语句对多个表重命名：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> backup_customers <span class="keyword">TO</span> customers,</span><br><span class="line">             backup_vendors <span class="keyword">TO</span> vendors,</span><br><span class="line">             backup_products <span class="keyword">TO</span> products;</span><br></pre></td></tr></table></figure>

<h1 id="第22章-使用视图"><a href="#第22章-使用视图" class="headerlink" title="第22章 使用视图"></a>第22章 使用视图</h1><p>视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。</p>
<p>视图的一些常见应用:</p>
<ul>
<li>重用SQL语句。</li>
<li>简化复杂的SQL操作。在编写查询后，可以方便地重用它而不必知道它的基本查询细节。</li>
<li>使用表的组成部分而不是整个表。</li>
<li>保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。</li>
<li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li>
</ul>
<p>因为视图不包含数据，所以每次使用视图时，都必须处理查询执行时所需的任一个检索。如果你用多个联结和过滤创建了复杂的视图或者嵌套了视图，可能会发现性能下降得很厉害。</p>
<p>视图创建和使用的一些最常见的规则和限制:</p>
<ul>
<li>与表一样，视图必须唯一命名（不能给视图取与别的视图或表相同的名字）。</li>
<li>对于可以创建的视图数目没有限制。</li>
<li>为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。</li>
<li>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图。</li>
<li><code>ORDER BY</code>可以用在视图中，但如果从该视图检索数据的<code>SELECT</code>语句中也含有<code>ORDER BY</code>，那么该视图中的<code>ORDER BY</code>将被覆盖。</li>
<li>视图不能索引，也不能有关联的触发器或默认值。</li>
<li>视图可以和表一起使用。例如，编写一条联结表和视图的<code>SELECT</code>语句</li>
</ul>
<p>视图的创建:</p>
<ul>
<li>视图用<code>CREATE VIEW</code>语句来创建。</li>
<li>使用<code>SHOW CREATE VIEW viewname;</code>来查看创建视图的语句。</li>
<li>用DROP删除视图，其语法为<code>DROP VIEW viewname;</code>。</li>
<li>更新视图时，可以先用<code>DROP</code>再用<code>CREATE</code>，也可以直接用<code>CREATE OR REPLACE VIEW</code>。如果要更新的视图不存在，则第2条更新语句会创建一个视图；如果要更新的视图存在，则第2条更新语句会替换原有视图。</li>
</ul>
<p>视图的最常见的应用之一是隐藏复杂的SQL，这通常都会涉及联结。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> productcustomers <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, prod_id</span><br><span class="line"><span class="keyword">FROM</span> customers, orders, orderitems</span><br><span class="line"><span class="keyword">WHERE</span> customers.cust_id <span class="operator">=</span> orders.cust_id</span><br><span class="line"><span class="keyword">AND</span> orderitems.order_num <span class="operator">=</span> orders.order_num;</span><br></pre></td></tr></table></figure>

<p>这条语句创建一个名为<code>productcustomers</code>的视图，它联结三个表，以返回已订购了任意产品的所有客户的列表。如果执行<code>SELECT * FROM productcustomers</code>，将列出订购了任意产品的客户。</p>
<p>为检索订购了产品TNT2的客户，可如下进行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> productcustomers</span><br><span class="line"><span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>这条语句通过<code>WHERE</code>子句从视图中检索特定数据。在<code>MySQL</code>处理此查询时，它将指定的<code>WHERE</code>子句添加到视图查询中的已有<code>WHERE</code>子句中，以便正确过滤数据。</p>
<p>假如经常需要下面这个格式的结果。不必在每次需要时执行联结，创建一个视图，每次需要时使用它即可。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> vendorlocations <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Concat(RTrim(vend_name),<span class="string">&#x27;(&#x27;</span>,RTrim(vend_country),<span class="string">&#x27;)&#x27;</span>) <span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure>

<p>这条语句使用与以前的<code>SELECT</code>语句相同的查询创建视图</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> vendorlocatinos</span><br></pre></td></tr></table></figure>

<p>视图对于应用普通的<code>WHERE</code>子句也很有用。例如，可以定义<code>customeremaillist</code>视图，它过滤没有电子邮件地址的客户。为此目的，可使用下面的语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> customeremaillist <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_id, cust_name, cust_email</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>

<p>可以像使用其他表一样使用视图<code>customeremaillist</code>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> customeremaillist;</span><br></pre></td></tr></table></figure>

<p>如果从视图检索数据时使用了一条<code>WHERE</code>子句，则两组子句（一组在视图中，另一组是传递给视图的）将自动组合。</p>
<p>视图对于简化计算字段的使用特别有用。下面是第10章中介绍的一条<code>SELECT</code>语句。它检索某个特定订单中的物品，计算每种物品的总价格：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id,</span><br><span class="line">       quantity,</span><br><span class="line">       item_price,</span><br><span class="line">       quantity<span class="operator">*</span>item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> orderitems</span><br><span class="line"><span class="keyword">WHERE</span> oreder_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure>

<p>可转换为一个视图：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> orderitemsexpanded <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_id,</span><br><span class="line">       quantity,</span><br><span class="line">       item_price,</span><br><span class="line">       quantity<span class="operator">*</span>item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> orderitems</span><br></pre></td></tr></table></figure>

<p>为检索订单20005的详细内容（上面的输出），如下进行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> orderitemsexpanded</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure>

<p>一般，应该将视图用于检索（<code>SELECT</code>语句）而不用于更新（<code>INSERT</code>、<code>UPDATE</code>和<code>DELETE</code>)。</p>
<p>视图提供了一种<code>MySQL</code>的<code>SELECT</code>语句层次的封装，可用来简化数据处理以及重新格式化基础数据或保护基础数据。</p>
<h1 id="第23章-使用存储过程"><a href="#第23章-使用存储过程" class="headerlink" title="第23章 使用存储过程"></a>第23章 使用存储过程</h1><p>存储过程简单来说，就是为以后的使用而保存的一条或多条<code>MySQL</code>语句的集合。可将其视为批文件，虽然它们的作用不仅限于批处理。</p>
<p>存储过程优点：</p>
<ul>
<li>通过把处理封装在容易使用的单元中，简化复杂的操作（正如前面例子所述）。</li>
<li>由于不要求反复建立一系列处理步骤，这保证了数据的完整性。如果所有开发人员和应用程序都使用同一（试验和测试）存储过程，则所使用的代码都是相同的。这一点的延伸就是防止错误。需要执行的步骤越多，出错的可能性就越大。防止错误保证了数据的一致性。</li>
<li>简化对变动的管理。如果表名、列名或业务逻辑（或别的内容）有变化，只需要更改存储过程的代码。使用它的人员甚至不需要知道这些变化。这一点的延伸就是安全性。通过存储过程限制对基础数据的访问减少了数据讹误（无意识的或别的原因所导致的数据讹误）的机会。</li>
<li>提高性能。因为使用存储过程比使用单独的SQL语句要快。</li>
<li>存在一些只能用在单个请求中的<code>MySQL</code>元素和特性，存储过程可以使用它们来编写功能更强更灵活的代码（在下一章的例子中可以看到。）换句话说，使用存储过程有3个主要的好处，即简单、安全、高性能。显然，它们都很重要。</li>
</ul>
<p>不过，在将<code>SQL</code>代码转换为存储过程前，也必须知道它的一些缺陷：</p>
<ul>
<li>一般来说，存储过程的编写比基本SQL语句复杂，编写存储过程需要更高的技能，更丰富的经验。</li>
<li>你可能没有创建存储过程的安全访问权限。许多数据库管理员限制存储过程的创建权限，允许用户使用存储过程，但不允许他们创建存储过程。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> productpricing(</span><br><span class="line">        <span class="variable">@pricelow</span>,</span><br><span class="line">        <span class="variable">@pricehigh</span>,</span><br><span class="line">        <span class="variable">@priceaverage</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面执行名为<code>productpricing</code>的存储过程，它计算并返回产品的最低、最高和平均价格。</p>
<p>一个返回产品平均价格的存储过程。以下是其代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> productpricing()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">Avg</span>(pro_price) <span class="keyword">AS</span> priceaverage</span><br><span class="line">    <span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>此存储过程名为<code>productpricing</code>，用<code>CREATE PROCEDURE productpricing()</code>语句定义。如果存储过程接受参数，它们将在<code>()</code>中列举出来。此存储过程没有参数，但后跟的<code>()</code>仍然需要。<code>BEGIN</code>和<code>END</code>语句用来限定存储过程体，过程体本身仅是一个简单的<code>SELECT</code>语句（使用第12章介绍的<code>Avg()</code>函数）。</p>
<p>如果用的是命令行，需要改分隔符。我感觉不可能在命令行里写这个。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> productpricing();</span><br></pre></td></tr></table></figure>

<p><code>CALL productpricing();</code>执行刚创建的存储过程并显示返回的结果。</p>
<p>存储过程在创建之后，被保存在服务器上以供使用，直至被删除。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> PROCEDUREC productpricing;</span><br></pre></td></tr></table></figure>

<p>这条语句删除刚创建的存储过程。当过程存在想删除它时（如果过程不存在也不产生错误）可使用<code>DROP PROCEDURE IF EXISTS</code>。</p>
<p><code>productpricing</code>只是一个简单的存储过程，它简单地显示<code>SELECT</code>语句的结果。一般，存储过程并不显示结果，而是把结果返回给你指定的变量。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> productpricing(</span><br><span class="line">    <span class="keyword">OUT</span> pl <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">OUT</span> ph <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">OUT</span> pa <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">Min</span>(prod_price)</span><br><span class="line">    <span class="keyword">INTO</span> pl</span><br><span class="line">    <span class="keyword">FROM</span> products;</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">Max</span>(prod_price)</span><br><span class="line">    <span class="keyword">INTO</span> ph</span><br><span class="line">    <span class="keyword">FROM</span> products;</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">Avg</span>(prod_price)</span><br><span class="line">    <span class="keyword">INTO</span> pa</span><br><span class="line">    <span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>此存储过程接受3个参数：<code>pl</code>存储产品最低价格，<code>ph</code>存储产品最高价格，<code>pa</code>存储产品平均价格。每个参数必须具有指定的类型，这里使用十进制值。关键字<code>OUT</code>指出相应的参数用来从存储过程传出一个值（返回给调用者）。<br><code>MySQL</code>支持<code>IN</code>（传递给存储过程）、<code>OUT</code>（从存储过程传出，如这里所用）和<code>INOUT</code>（对存储过程传入和传出）类型的参数。存储过程的代码位于<code>BEGIN</code>和<code>END</code>语句内，如前所见，它们是一系列<code>SELECT</code>语句，用来检索值，然后保存到相应的变量（通过指定<code>INTO</code>关键字）。</p>
<p>存储过程的参数允许的数据类型与表中使用的数据类型相同。</p>
<p>为调用此修改过的存储过程，必须指定3个变量名，如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> productpricing(</span><br><span class="line">    <span class="variable">@pricelow</span>,</span><br><span class="line">    <span class="variable">@pricehigh</span>,</span><br><span class="line">    <span class="variable">@priceaverage</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>所有<code>MySQL</code>变量都必须以<code>@</code>开始</p>
<p>在调用时，这条语句并不显示任何数据，为了显示检索出的产品平均价格，可如下进行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="variable">@priceaverage</span></span><br></pre></td></tr></table></figure>

<p>为了获得3个值，可使用以下语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="variable">@pricehigh</span>, <span class="variable">@pricelow</span>, <span class="variable">@priceaverage</span>;</span><br></pre></td></tr></table></figure>

<p><code>ordertotal</code>接受订单号并返回该订单的合计：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ordertotal(</span><br><span class="line">    <span class="keyword">IN</span> onumber <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">OUT</span> ototal <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">Sum</span>(item_price<span class="operator">*</span>quantity)</span><br><span class="line">    <span class="keyword">FROM</span> orderitems</span><br><span class="line">    <span class="keyword">WHERE</span> order_num <span class="operator">=</span> onumber</span><br><span class="line">    <span class="keyword">INTO</span> ototal;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p><code>onumber</code>定义为<code>IN</code>，因为订单号被传入存储过程。<code>ototal</code>定义为<code>OUT</code>，因为要从存储过程返回合计。<br><code>SELECT</code>语句使用这两个参数，<code>WHERE</code>子句使用<code>onumber</code>选择正确的行，<code>INTO</code>使用<code>ototal</code>存储计算出来的合计。为调用这个新存储过程，可使用以下语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> ordertotal(<span class="number">20005</span>, <span class="variable">@total</span>);</span><br></pre></td></tr></table></figure>

<p>必须给<code>ordertotal</code>传递两个参数；第一个参数为订单号，第二个参数为包含计算出来的合计的变量名。</p>
<p>为了显示此合计，可如下进行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="variable">@total</span></span><br></pre></td></tr></table></figure>

<p>为了得到另一个订单的合计显示，需要再次调用存储过程，然后重新显示变量：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> ordertotal(<span class="number">20009</span>, <span class="variable">@total</span>)</span><br></pre></td></tr></table></figure>

<p>有如下需求：</p>
<ul>
<li>获得合计（与以前一样）；</li>
<li>把营业税有条件地添加到合计；</li>
<li>返回合计（带或不带税）。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Name: ordertotal</span></span><br><span class="line"><span class="comment">-- Parameters: onumber = order number</span></span><br><span class="line"><span class="comment">--             taxable = 0 if not taxable, 1 if taxable</span></span><br><span class="line"><span class="comment">--             ototal  = order total variable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ordertotal(</span><br><span class="line">    <span class="keyword">IN</span> onumber <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">IN</span> taxable <span class="type">BOOLEAN</span>,</span><br><span class="line">    <span class="keyword">OUT</span> ototal <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)COMMENT <span class="string">&#x27;Obtain order total, optionally adding tax&#x27;</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">--Declare variable for total</span></span><br><span class="line">    <span class="keyword">DECLARE</span> total <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="comment">--DECLARE taxrate INT DEFAULT 6;</span></span><br><span class="line">    <span class="keyword">DECLARE</span> taxrate <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">--Get the order total</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">Sum</span>(item_price<span class="operator">*</span>quantity)</span><br><span class="line">    <span class="keyword">FROM</span> orderitems</span><br><span class="line">    <span class="keyword">WHERE</span> order_num <span class="operator">=</span> onumber</span><br><span class="line">    <span class="keyword">INTO</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">--Is this taxable?</span></span><br><span class="line">    IF taxable <span class="keyword">THEN</span></span><br><span class="line">        <span class="comment">-- Yes, so add taxrate to the total</span></span><br><span class="line">        <span class="keyword">SELECT</span> total<span class="operator">+</span>(total<span class="operator">/</span><span class="number">100</span><span class="operator">*</span>taxrate) <span class="keyword">INTO</span> total;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="comment">-- And finally, save to out variable</span></span><br><span class="line">    <span class="keyword">SELECT</span> total <span class="keyword">INTO</span> ototal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>上面增加了注释（前面放置<code>--</code>）。在存储过程复杂性增加时，这样做特别重要。添加了另外一个参数<code>taxable</code>，它是一个布尔值（如果要增加税则为真，否则为假）。在存储过程体中，用<code>DECLARE</code>语句定义了两个局部变量。<code>DECLARE</code>要求指定变量名和数据类型，它也支持可选的默认值（这个例子中的<code>taxrate</code>的默认被设置为<code>6%</code>）。<code>SELECT</code>语句已经改变，因此其结果存储到<code>total</code>（局部变量）而不是<code>ototal</code>。<code>IF</code>语句检查<code>taxable</code>是否为真，如果为真，则用另一<code>SELECT</code>语句增加营业税到局部变量<code>total</code>。最后，用另一<code>SELECT</code>语句将<code>total</code>（它增加或许不增加营业税）保存到<code>ototal</code>。</p>
<p>本例子中的存储过程在<code>CREATE PROCEDURE</code>语句中包含了一个<code>COMMENT</code>值。它不是必需的，但如果给出，将在<code>SHOW PROCEDURE STATUS</code>的结果中显示。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> ordertotal(<span class="number">20005</span>, <span class="number">0</span>, <span class="variable">@total</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@total</span></span><br></pre></td></tr></table></figure>

<p><code>BOOLEAN</code>值指定为<code>1</code>表示真，指定为<code>0</code>表示假（实际上，非零值都考虑为真，只有<code>0</code>被视为假）。通过给中间的参数指定0或1，可以有条件地将营业税加到订单合计上。</p>
<p>为显示用来创建一个存储过程的<code>CREATE</code>语句，使用<code>SHOW CREATE PROCEDURE</code>语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ordertotal;</span><br></pre></td></tr></table></figure>

<p>为了获得包括何时、由谁创建等详细信息的存储过程列表，使用<code>SHOW PROCEDURE STATUS</code>。</p>
<p><code>SHOW PROCEDURE STATUS</code>列出所有存储过程。为限制其输出，可使用<code>LIKE</code>指定一个过滤模式，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;ordertotal&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="第24章-使用游标"><a href="#第24章-使用游标" class="headerlink" title="第24章 使用游标"></a>第24章 使用游标</h1><p>游标（cursor）是一个存储在MySQL服务器上的数据库查询，它不是一条SELECT语句，而是被该语句检索出来的结果集<br>只能用于存储过程，不像多数DBMS, MySQL游标只能用于存储过程（和函数）。</p>
<p>使用游标涉及几个明确的步骤：</p>
<ul>
<li>在能够使用游标前，必须声明（定义）它。这个过程实际上没有检索数据，它只是定义要使用的SELECT语句。</li>
<li>一旦声明后，必须打开游标以供使用。这个过程用前面定义的SELECT语句把数据实际检索出来。</li>
<li>对于填有数据的游标，根据需要取出（检索）各行。</li>
<li>在结束游标使用时，必须关闭游标。<br>在声明游标后，可根据需要频繁地打开和关闭游标。在游标打开后，可根据需要频繁地执行取操作。</li>
</ul>
<p><code>DECLARE</code>命名游标，并定义相应的<code>SELECT</code>语句，根据需要带<code>WHERE</code>和其他子句</p>
<p>下面的语句定义了名为<code>ordernumbers</code>的游标，使用了可以检索所有订单的<code>SELECT</code>语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line">    <span class="keyword">FOR</span></span><br><span class="line">    <span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<p>这个存储过程并没有做很多事情，<code>DECLARE</code>语句用来定义和命名游标，这里为<code>ordernumbers</code>。 存储过程处理完成后，游标就消失（因为它局限于存储过程）。</p>
<p>游标用<code>OPEN CURSOR</code>语句来打开：<code>OPEN ordernumbers</code><br>在处理<code>OPEN</code>语句时执行查询，存储检索出的数据以供浏览和滚动。<br>游标处理完成后，应当使用如下语句关闭游标：<code>CLOSE ordernumbers</code></p>
<p>CLOSE释放游标使用的所有内部内存和资源，因此在每个游标不再需要时都应该关闭。在一个游标关闭后，如果没有重新打开，则不能使用它<br>隐含关闭 如果你不明确关闭游标，MySQL将会在到达<code>END</code>语句时自动关闭它。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- Declare the cursor</span></span><br><span class="line">    <span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line">    <span class="keyword">FOR</span></span><br><span class="line">    <span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- OPEN the cursor</span></span><br><span class="line">    <span class="keyword">OPEN</span> ordernumbers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- Close the cursor</span></span><br><span class="line">    <span class="keyword">CLOSE</span> ordernumbers;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>这个存储过程声明、打开和关闭一个游标。但对检索出的数据什么也没做。</p>
<p>在一个游标被打开后，可以使用<code>FETCH</code>语句分别访问它的每一行。<code>FETCH</code>指定检索什么数据（所需的列），检索出来的数据存储在什么地方。它还向前移动游标中的内部行指针，使下一条<code>FETCH</code>语句检索下一行（不重复读取同一行）。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- Declare local variables</span></span><br><span class="line">    <span class="keyword">DECLARE</span> o <span class="type">INT</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- Declare the cursor</span></span><br><span class="line">    <span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line">    <span class="keyword">FOR</span></span><br><span class="line">    <span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- OPEN the cursor</span></span><br><span class="line">    <span class="keyword">OPEN</span> ordernumbers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- Get order number</span></span><br><span class="line">    <span class="keyword">FETCH</span> ordernumbers <span class="keyword">INTO</span> o;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- Close the cursor</span></span><br><span class="line">    <span class="keyword">CLOSE</span> ordernumbers;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>其中 FETCH 用来检索当前行的 order_num 列（将自动从第一行开始）到一个名为<code>o</code>的局部声明的变量中。对检索出的数据不做任何处理。<br>在下一个例子中，循环检索数据，从第一行到最后一行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- Declare local variables</span></span><br><span class="line">    <span class="keyword">Declare</span> done <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> o <span class="type">INT</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- Declare the cursor</span></span><br><span class="line">    <span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line">    <span class="keyword">FOR</span></span><br><span class="line">    <span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- Declare continue handler</span></span><br><span class="line">    <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> done<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- OPEN the cursor</span></span><br><span class="line">    <span class="keyword">OPEN</span> ordernumbers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- Loop through all rows</span></span><br><span class="line">    REPEAT</span><br><span class="line">        <span class="comment">-- Get order number</span></span><br><span class="line">        <span class="keyword">FETCH</span> ordernumbers <span class="keyword">INTO</span> o;</span><br><span class="line">    <span class="comment">-- End of loop</span></span><br><span class="line">    UNTIL done <span class="keyword">END</span> REPEAT</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- Close the cursor</span></span><br><span class="line">    <span class="keyword">CLOSE</span> ordernumbers;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>这个例子使用<code>FETCH</code>检索当前<code>order_num</code>到声明的名为<code>o</code>的变量中。但与前一个例子不一样的是，这个例子中的<code>FETCH</code>是在<code>REPEAT</code>内，因此它反复执行直到<code>done</code>为真（由<code>UNTIL done END REPEAT</code>；规定）。<br>为使它起作用，用一个<code>DEFAULT 0</code>（假，不结束）定义变量<code>done</code>。那么，<code>done</code>怎样才能在结束时被设置为真呢？答案是用以下语句：<br><code>DECLARE CONTINUE HANDLER FOR SQLSTATE &#39;02000&#39; SET done=1;</code><br>这条语句定义了一个<code>CONTINUE HANDLER</code>，它是在条件出现时被执行的代码。这里，它指出当<code>SQLSTATE &#39;02000’</code>出现时，<code>SET done=1</code>。<code>SQLSTATE &#39;02000’</code>是一个未找到条件，当<code>REPEAT</code>由于没有更多的行供循环而不能继续时，出现这个条件。</p>
<p><code>DECLARE</code>语句的次序：<br><code>DECLARE</code>语句的发布存在特定的次序。用<code>DECLARE</code>语句定义的局部变量必须在定义任意游标或句柄之前定义，而句柄必须在游标之后定义。不遵守此顺序将产生错误消息。</p>
<p>如果一切正常，你可以在循环内放入任意需要的处理（在<code>FETCH</code>语句之后，循环结束之前）。<br>重复或循环？ 除这里使用的<code>REPEAT</code>语句外，<code>MySQL</code>还支持循环语句，它可用来重复执行代码，直到使用<code>LEAVE</code>语句手动退出为止。通常<code>REPEAT</code>语句的语法使它更适合于对游标进行循环。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- Declare local variables</span></span><br><span class="line">    <span class="keyword">DECLARE</span> done <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> o <span class="type">INT</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> t <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">-- Declare the cursor</span></span><br><span class="line">    <span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line">    <span class="keyword">FOR</span></span><br><span class="line">    <span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- Declare continue handler</span></span><br><span class="line">    <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> done<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- Create a table to store the results</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ordertotals</span><br><span class="line">    (order_num <span class="type">INT</span>, total <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- OPEN the cursor</span></span><br><span class="line">    <span class="keyword">OPEN</span> ordernumbers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- Loop through all rows</span></span><br><span class="line">    REPEAT</span><br><span class="line">        <span class="comment">-- Get order number</span></span><br><span class="line">        <span class="keyword">FETCH</span> ordernumbers <span class="keyword">INTO</span> o;</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- Get the total for this order</span></span><br><span class="line">        <span class="keyword">CALL</span> ordertotal(o, <span class="number">1</span>, t);</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- Insert order and total into ordertotals</span></span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> ordertotals(order_num, total)</span><br><span class="line">        <span class="keyword">VALUES</span>(o,t)</span><br><span class="line">    <span class="comment">-- End of loop</span></span><br><span class="line">    UNTIL done <span class="keyword">END</span> REPEAT</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- Close the cursor</span></span><br><span class="line">    <span class="keyword">CLOSE</span> ordernumbers;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，我们增加了另一个名为<code>t</code>的变量（存储每个订单的合计）。此存储过程还在运行中创建了一个新表（如果它不存在的话），名为<code>ordertotals</code>。这个表将保存存储过程生成的结果。<code>FETCH</code>像以前一样取每个<code>order_num</code>，然后用<code>CALL</code>执行另一个存储过程（我们在前一章中创建）来计算每个订单的带税的合计（结果存储到<code>t</code>）。最后，用<code>INSERT</code>保存每个订单的订单号和合计。此存储过程不返回数据，但它能够创建和填充另一个表，可以用一条简单的<code>SELECT</code>语句查看该表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> ordertotals;</span><br></pre></td></tr></table></figure>

<h1 id="第25章-使用触发器"><a href="#第25章-使用触发器" class="headerlink" title="第25章 使用触发器"></a>第25章 使用触发器</h1><p>触发器是MySQL响应以下任意语句而自动执行的一条MySQL语句（或位于<code>BEGIN</code>和<code>END</code>语句之间的一组语句）：</p>
<ul>
<li>DELETE</li>
<li>INSERT</li>
<li>UPDATE</li>
</ul>
<p>其他MySQL语句不支持触发器。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> newproduct AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> products</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">SELECT</span> <span class="string">&#x27;Product added&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><code>CREATE TRIGGER</code>用来创建名为<code>newproduct</code>的新触发器。触发器可在一个操作发生之前或之后执行，这里给出了<code>AFTER INSERT</code>，所以此触发器将在<code>INSERT</code>语句成功执行后执行。这个触发器还指定 <code>FOR EACH ROW</code> ，因此代码对每个插入行执行。在这个例子中，文本<code>Product added</code>将对每个插入的行显示一次。</p>
<p>仅支持表 只有表才支持触发器，视图不支持（临时表也不支持）。</p>
<p>触发器按每个表每个事件每次地定义，每个表每个事件每次只允许一个触发器。因此，每个表最多支持6个触发器（每条<code>INSERT</code>、<code>UPDATE</code>和<code>DELETE</code>的之前和之后）。单一触发器不能与多个事件或多个表关联，所以，如果你需要一个对<code>INSERT</code>和<code>UPDATE</code>操作执行的触发器，则应该定义两个触发器。</p>
<p>触发器失败：如果<code>BEFORE</code>触发器失败，则<code>MySQL</code>将不执行请求的操作。此外，如果<code>BEFORE</code>触发器或语句本身失败，<code>MySQL</code>将不执行<code>AFTER</code>触发器（如果有的话）。</p>
<p>为了删除一个触发器，可使用DROP TRIGGER语句，如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> newproduct;</span><br></pre></td></tr></table></figure>

<p>触发器不能更新或覆盖。为了修改一个触发器，必须先删除它，然后再重新创建。</p>
<h2 id="INSERT触发器"><a href="#INSERT触发器" class="headerlink" title="INSERT触发器"></a>INSERT触发器</h2><p><code>INSERT</code>触发器在<code>INSERT</code>语句执行之前或之后执行。需要知道以下几点：</p>
<ul>
<li>在<code>INSERT</code>触发器代码内，可引用一个名为NEW的虚拟表，访问被插入的行；</li>
<li>在<code>BEFORE INSERT</code>触发器中，<code>NEW</code>中的值也可以被更新（允许更改被插入的值）；</li>
<li>对于<code>AUTO_INCREMENT</code>列，<code>NEW</code>在<code>INSERT</code>执行之前包含<code>0</code>，在<code>INSERT</code>执行之后包含新的自动生成值。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> neworder AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> orders</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">SELECT</span> NEW.order_num</span><br></pre></td></tr></table></figure>

<p>此代码创建一个名为<code>neworder</code>的触发器，它按照<code>AFTER INSERT ON orders</code>执行。在插入一个新订单到<code>orders</code>表时，<code>MySQL</code>生成一个新订单号并保存到<code>order_num</code>中。触发器从<code>NEW. order_num</code>取得这个值并返回它。此触发器必须按照<code>AFTER INSERT</code>执行，因为在<code>BEFORE INSERT</code>语句执行之前，新<code>order_num</code>还没有生成。对于<code>orders</code>的每次插入使用这个触发器将总是返回新的订单号。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders(order_date, cust_id)</span><br><span class="line"><span class="keyword">VALUES</span>(Now(),<span class="number">10001</span>);</span><br></pre></td></tr></table></figure>

<p><code>orders</code>包含3个列。<code>order_date</code>和<code>cust_id</code>必须给出，<code>order_num</code>由<code>MySQL</code>自动生成，而现在<code>order_num</code>还自动被返回。</p>
<p><code>BEFORE</code>或<code>AFTER</code>？ 通常，将<code>BEFORE</code>用于数据验证和净化（目的是保证插入表中的数据确实是需要的数据）。本提示也适用于<code>UPDATE</code>触发器。</p>
<h2 id="DELETE触发器"><a href="#DELETE触发器" class="headerlink" title="DELETE触发器"></a>DELETE触发器</h2><p><code>DELETE</code>触发器在<code>DELETE</code>语句执行之前或之后执行。需要知道以下两点：<br>❑ 在<code>DELETE</code>触发器代码内，你可以引用一个名为<code>OLD</code>的虚拟表，访问被删除的行；<br>❑ <code>OLD</code>中的值全都是只读的，不能更新。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> deleteorder BEFORE <span class="keyword">DELETE</span> <span class="keyword">ON</span> orders</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> archive_orders(order_num, order_date, cust_id)</span><br><span class="line">    <span class="keyword">VALUES</span>(OLD.order_num, OLD.order_date, OLD.cust_id)</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>在任意订单被删除前将执行此触发器。它使用一条<code>INSERT</code>语句将<code>OLD</code>中的值（要被删除的订单）保存到一个名为<code>archive_orders</code>的存档表中（为实际使用这个例子，你需要用与<code>orders</code>相同的列创建一个名为<code>archive_orders</code>的表）。<br>使用<code>BEFORE DELETE</code>触发器的优点（相对于<code>AFTER DELETE</code>触发器来说）为，如果由于某种原因，订单不能存档，<code>DELETE</code>本身将被放弃。</p>
<p>多语句触发器：正如所见，触发器<code>deleteorder</code>使用<code>BEGIN</code>和<code>END</code>语句标记触发器体。这在此例子中并不是必需的，不过也没有害处。使用<code>BEGIN END</code>块的好处是触发器能容纳多条<code>SQL</code>语句（在<code>BEGIN END</code>块中一条挨着一条）。</p>
<h2 id="UPDATE触发器"><a href="#UPDATE触发器" class="headerlink" title="UPDATE触发器"></a>UPDATE触发器</h2><p><code>UPDATE</code>触发器在<code>UPDATE</code>语句执行之前或之后执行。需要知道以下几点：</p>
<ul>
<li>在<code>UPDATE</code>触发器代码中，你可以引用一个名为<code>OLD</code>的虚拟表访问以前（<code>UPDATE</code>语句前）的值，引用一个名为<code>NEW</code>的虚拟表访问新更新的值；</li>
<li>在<code>BEFORE UPDATE</code>触发器中，<code>NEW</code>中的值可能也被更新（允许更改将要用于<code>UPDATE</code>语句中的值）；</li>
<li><code>OLD</code>中的值全都是只读的，不能更新。</li>
</ul>
<p>下面的例子保证州名缩写总是大写（不管<code>UPDATE</code>语句中给出的是大写还是小写）。<br>显然，任何数据净化都需要在<code>UPDATE</code>语句之前进行，就像这个例子中一样。每次更新一个行时，<code>NEW.vend_state</code>中的值（将用来更新表行的值）都用<code>Upper(NEW.vend_state)</code>替换。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> updatevendor BEFORE UPDATE <span class="keyword">ON</span> vendors</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">SET</span> NEW.vend_state <span class="operator">=</span> <span class="built_in">Upper</span>(NEW.vend_state);</span><br></pre></td></tr></table></figure>

<ul>
<li>与其他DBMS相比，MySQL 5中支持的触发器相当初级。未来的MySQL版本中有一些改进和增强触发器支持的计划。</li>
<li>创建触发器可能需要特殊的安全访问权限，但是，触发器的执行是自动的。如果<code>INSERT</code>、<code>UPDATE</code>或<code>DELETE</code>语句能够执行，则相关的触发器也能执行。</li>
<li>应该用触发器来保证数据的一致性（大小写、格式等）。在触发器中执行这种类型的处理的优点是它总是进行这种处理，而且是透明地进行，与客户机应用无关。</li>
<li>触发器的一种非常有意义的使用是创建审计跟踪。使用触发器，把更改（如果需要，甚至还有之前和之后的状态）记录到另一个表非常容易。</li>
<li>遗憾的是，MySQL触发器中不支持<code>CALL</code>语句。这表示不能从触发器内调用存储过程。所需的存储过程代码需要复制到触发器内。</li>
</ul>
<h1 id="第26章-管理事务处理"><a href="#第26章-管理事务处理" class="headerlink" title="第26章 管理事务处理"></a>第26章 管理事务处理</h1><p>事务处理（transaction processing）可以用来维护数据库的完整性，它保证成批的MySQL操作要么完全执行，要么完全不执行。</p>
<ul>
<li>事务（transaction）指一组SQL语句；</li>
<li>回退（rollback）指撤销指定SQL语句的过程；</li>
<li>提交（commit）指将未存储的SQL语句结果写入数据库表；</li>
<li>保留点（savepoint）指事务处理中设置的临时占位符（place-holder），你可以对它发布回退（与回退整个事务处理不同）。</li>
</ul>
<p>管理事务处理的关键在于将SQL语句组分解为逻辑块，并明确规定数据何时应该回退，何时不应该回退。<br>MySQL使用下面的语句来标识事务的开始：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION</span><br></pre></td></tr></table></figure>

<h2 id="使用ROLLBACK"><a href="#使用ROLLBACK" class="headerlink" title="使用ROLLBACK"></a>使用ROLLBACK</h2><p>MySQL的<code>ROLLBACK</code>命令用来回退（撤销）MySQL语句，请看下面的语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ordertotals;</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> ordertotals;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ordertotals;</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ordertotals;</span><br></pre></td></tr></table></figure>

<p>这个例子从显示<code>ordertotals</code>表（此表在第24章中填充）的内容开始。首先执行一条<code>SELECT</code>以显示该表不为空。然后开始一个事务处理，用一条<code>DELETE</code>语句删除<code>ordertotals</code>中的所有行。另一条<code>SELECT</code>语句验证<code>ordertotals</code>确实为空。这时用一条<code>ROLLBACK</code>语句回退<code>START TRANSACTION</code>之后的所有语句，最后一条<code>SELECT</code>语句显示该表不为空。<br>显然，<code>ROLLBACK</code>只能在一个事务处理内使用（在执行一条<code>STARTTRANSACTION</code>命令之后）。</p>
<p>事务处理用来管理<code>INSERT</code>、<code>UPDATE</code>和<code>DELETE</code>语句。你不能回退<code>SELECT</code>语句。（这样做也没有什么意义。）你不能回退<code>CREATE</code>或<code>DROP</code>操作。事务处理块中可以使用这两条语句，但如果你执行回退，它们不会被撤销。</p>
<h2 id="使用COMMIT"><a href="#使用COMMIT" class="headerlink" title="使用COMMIT"></a>使用COMMIT</h2><p>一般的MySQL语句都是直接针对数据库表执行和编写的。这就是所谓的隐含提交（implicit commit），即提交（写或保存）操作是自动进行的。但是，在事务处理块中，提交不会隐含地进行。为进行明确的提交，使用<code>COMMIT</code>语句，如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> orderitems <span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，从系统中完全删除订单<code>20010</code>。因为涉及更新两个数据库表<code>orders</code>和<code>orderItems</code>，所以使用事务处理块来保证订单不被部分删除。最后的<code>COMMIT</code>语句仅在不出错时写出更改。如果第一条<code>DELETE</code>起作用，但第二条失败，则<code>DELETE</code>不会提交（实际上，它是被自动撤销的）。<br><strong>隐含事务关闭</strong>：当<code>COMMIT</code>或<code>ROLLBACK</code>语句执行后，事务会自动关闭（将来的更改会隐含提交）。</p>
<h2 id="使用保留点"><a href="#使用保留点" class="headerlink" title="使用保留点"></a>使用保留点</h2><p>简单的<code>ROLLBACK</code>和<code>COMMIT</code>语句就可以写入或撤销整个事务处理。但是，只是对简单的事务处理才能这样做，更复杂的事务处理可能需要部分提交或回退。<br>例如，前面描述的添加订单的过程为一个事务处理。如果发生错误，只需要返回到添加<code>orders</code>行之前即可，不需要回退到<code>customers</code>表（如果存在的话）。<br>为了支持回退部分事务处理，必须能在事务处理块中合适的位置放置占位符。这样，如果需要回退，可以回退到某个占位符。<br>这些占位符称为保留点。为了创建占位符，可如下使用<code>SAVEPOINT</code>语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SAVEPOINT</span> deletel;</span><br></pre></td></tr></table></figure>

<p>每个保留点都取标识它的唯一名字，以便在回退时，<code>MySQL</code>知道要回退到何处。为了回退到本例给出的保留点，可如下进行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> deletel;</span><br></pre></td></tr></table></figure>

<p>可以在MySQL代码中设置任意多的保留点，越多越好。为什么呢？因为保留点越多，你就越能按自己的意愿灵活地进行回退。</p>
<p>保留点在事务处理完成（执行一条<code>ROLLBACK</code>或<code>COMMIT</code>）后自动释放。自MySQL 5以来，也可以用<code>RELEASE SAVEPOINT</code>明确地释放保留点。</p>
<h2 id="更改默认的提交行为"><a href="#更改默认的提交行为" class="headerlink" title="更改默认的提交行为"></a>更改默认的提交行为</h2><p>正如所述，默认的MySQL行为是自动提交所有更改。换句话说，任何时候你执行一条MySQL语句，该语句实际上都是针对表执行的，而且所做的更改立即生效。为指示MySQL不自动提交更改，需要使用以下语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><code>autocommit</code>标志决定是否自动提交更改，不管有没有<code>COMMIT</code>语句。设置<code>autocommit</code>为0（假）指示MySQL不自动提交更改（直到<code>autocommit</code>被设置为真为止）。</p>
<p>标志为连接专用：<code>autocommit</code>标志是针对每个连接而不是服务器的。</p>
<h1 id="第27章-全球化和本地化"><a href="#第27章-全球化和本地化" class="headerlink" title="第27章 全球化和本地化"></a>第27章 全球化和本地化</h1><p>数据库表被用来存储和检索数据。不同的语言和字符集需要以不同的方式存储和检索。因此，MySQL需要适应不同的字符集（不同的字母和字符），适应不同的排序和检索数据的方法。</p>
<ul>
<li>字符集为字母和符号的集合；</li>
<li>编码为某个字符集成员的内部表示；</li>
<li>校对为规定字符如何比较的指令。</li>
</ul>
<p>在MySQL的正常数据库活动（<code>SELECT</code>、<code>INSERT</code>等）中，不需要操心太多的东西。使用何种字符集和校对的决定在服务器、数据库和表级进行。</p>
<p>MySQL支持众多的字符集。为查看所支持的字符集完整列表，使用以下语句：<br>这条语句显示所有可用的字符集以及每个字符集的描述和默认校对</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span>;</span><br></pre></td></tr></table></figure>

<p>为了查看所支持校对的完整列表，使用以下语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLLATION</span>;</span><br></pre></td></tr></table></figure>

<p>此语句显示所有可用的校对，以及它们适用的字符集。可以看到有的字符集具有不止一种校对。例如，<code>latin1</code>对不同的欧洲语言有几种校对，而且许多校对出现两次，一次区分大小写（由<code>_cs</code>表示），一次不区分大小写（由<code>_ci</code>表示）。</p>
<p>通常系统管理在安装时定义一个默认的字符集和校对。此外，也可以在创建数据库时，指定默认的字符集和校对。为了确定所用的字符集和校对，可以使用以下语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;character%&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;collation%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>实际上，字符集很少是服务器范围（甚至数据库范围）的设置。不同的表，甚至不同的列都可能需要不同的字符集，而且两者都可以在创建表时指定。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(</span><br><span class="line">    columnn1    <span class="type">INT</span>,</span><br><span class="line">    columnn2    <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">)<span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> hebrew</span><br><span class="line"><span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure>

<p>此语句创建一个包含两列的表，并且指定一个字符集和一个校对顺序。<br>这个例子中指定了 CHARACTER SET 和 COLLATE 两者。一般，MySQL如下确定使用什么样的字符集和校对。</p>
<ul>
<li>如果指定<code>CHARACTER SET</code>和<code>COLLATE</code>两者，则使用这些值。</li>
<li>如果只指定<code>CHARACTER SET</code>，则使用此字符集及其默认的校对（如<code>SHOW CHARACTER SET</code>的结果中所示）。</li>
<li>如果既不指定<code>CHARACTER SET</code>，也不指定<code>COLLATE</code>，则使用数据库默认。</li>
</ul>
<p>除了能指定字符集和校对的表范围外，MySQL还允许对每个列设置它们，如下所示：<br>这里对整个表以及一个特定的列指定了<code>CHARACTER SET</code>和<code>COLLATE</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(</span><br><span class="line">    columnn1    <span class="type">INT</span>,</span><br><span class="line">    columnn2    <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">    columnn2    <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">COLLATE</span> latin1_general_ci</span><br><span class="line">)<span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> hebrew</span><br><span class="line"><span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure>

<p>如前所述，校对在对用<code>ORDER BY</code>子句检索出来的数据排序时起重要的作用。如果你需要用与创建表时不同的校对顺序排序特定的<code>SELECT</code>语句，可以在<code>SELECT</code>语句自身中进行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> lastname, firstname <span class="keyword">COLLATE</span> latin1_general_cs;</span><br></pre></td></tr></table></figure>

<p>此<code>SELECT</code>使用<code>COLLATE</code>指定一个备用的校对顺序（在这个例子中，为区分大小写的校对）。这显然将会影响到结果排序的次序。<br>上面的 SELECT 语句演示了在通常不区分大小写的表上进行区分大小写搜索的一种技术。当然，反过来也是可以的。<br>除了这里看到的在<code>ORDER BY</code>子句 中使用以外，<code>COLLATE</code>还可以用于<code>GROUP BY</code>、<code>HAVING</code>、聚集函数、别名等。</p>
<h1 id="第28章-安全管理"><a href="#第28章-安全管理" class="headerlink" title="第28章 安全管理"></a>第28章 安全管理</h1><p><code>MySQL</code>用户账号和信息存储在名为<code>mysql</code>的<code>MySQL</code>数据库中。一般不需要直接访问<code>mysql</code>数据库和表（你稍后会明白这一点），但有时需要直接访问。需要直接访问它的时机之一是在需要获得所有用户账号列表时。为此，可使用以下代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE mysql</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<p>为了创建一个新用户账号，使用<code>CREATE USER</code>语句，如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> ben IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;p@$$w0rd&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>为重新命名一个用户账号，使用<code>RENAME USER</code>语句，如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RENAME <span class="keyword">USER</span> ben <span class="keyword">TO</span> bforta;</span><br></pre></td></tr></table></figure>

<p>为了删除一个用户账号（以及相关的权限），使用<code>DROP USER</code>语句，如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> bforta;</span><br></pre></td></tr></table></figure>

<p>在创建用户账号后，必须接着分配访问权限。新创建的用户账号没有访问权限。它们能登录<code>MySQL</code>，但不能看到数据，不能执行任何数据库操作。为看到赋予用户账号的权限，使用<code>SHOW GRANTS FOR</code>，如下所示</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> bforta</span><br></pre></td></tr></table></figure>

<p>输出结果显示用户<code>bforta</code>有一个权限<code>USAGE ON *.*</code>。<code>USAGE</code>表示根本没有权限（我知道，这不很直观），所以，此结果表示在任意数据库和任意表上对任何东西没有权限。</p>
<p>为设置权限，使用<code>GRANT</code>语句。<code>GRANT</code>要求你至少给出以下信息：</p>
<ul>
<li>要被授予的权限</li>
<li>要被授予访问权限的数据库或表</li>
<li>用户名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> crashcourse.<span class="operator">*</span> <span class="keyword">TO</span> bforta;</span><br></pre></td></tr></table></figure>

<p>此<code>GRANT</code>允许用户在<code>crashcourse.*</code>（<code>crashcourse</code>数据库的所有表）上使用<code>SELECT</code>。通过只授予<code>SELECT</code>访问权限，用户<code>bforta</code>对<code>crashcourse</code>数据库中的所有数据具有只读访问权限。<br>每个<code>GRANT</code>添加（或更新）用户的一个权限。<code>MySQL</code>读取所有授权，并根据它们确定权限。</p>
<p><code>GRANT</code>的反操作为<code>REVOKE</code>，用它来撤销特定的权限。下面举一个例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> crashcourse.<span class="operator">*</span> <span class="keyword">FROM</span> bforta</span><br></pre></td></tr></table></figure>

<p>这条<code>REVOKE</code>语句取消刚赋予用户<code>bforta</code>的<code>SELECT</code>访问权限。被撤销的访问权限必须存在，否则会出错。</p>
<p><code>GRANT</code>和<code>REVOKE</code>可在几个层次上控制访问权限：</p>
<ul>
<li>整个服务器，使用<code>GRANT ALL</code>和<code>REVOKE ALL</code>；</li>
<li>整个数据库，使用<code>ON database.*</code>；</li>
<li>特定的表，使用<code>ON database.table</code>；</li>
<li>特定的列；</li>
<li>特定的存储过程。</li>
</ul>
<table>
<thead>
<tr>
<th>权限</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ALL</td>
<td>除GRANT OPTION外的所有权限</td>
</tr>
<tr>
<td>ALTER</td>
<td>使用ALTER TABLE</td>
</tr>
<tr>
<td>ALTER ROUTINE</td>
<td>使用ALTER PROCEDURE和DROP ROCEDURE</td>
</tr>
<tr>
<td>CREATE</td>
<td>使用CREATE TABLE</td>
</tr>
<tr>
<td>CREATE ROUTINE</td>
<td>使用CREATE PROCEDURE</td>
</tr>
<tr>
<td>CREATE TEMPORARY TABLES</td>
<td>使用CREATE TEMPORARY TABLE</td>
</tr>
<tr>
<td>CREATE USER</td>
<td>使用CREATE USER、DROP USER、RENAME USER和REVOKE ALL PRIVILEGES</td>
</tr>
<tr>
<td>CREATE VIEW</td>
<td>使用CREATE VIEW</td>
</tr>
<tr>
<td>DELETE</td>
<td>使用DELETE</td>
</tr>
<tr>
<td>DROP</td>
<td>使用DROP TABLE</td>
</tr>
<tr>
<td>EXECUTE</td>
<td>使用CALL和存储过程</td>
</tr>
<tr>
<td>FILE</td>
<td>使用SELECT INTO OUTFILE和LOAD DATA INFILE</td>
</tr>
<tr>
<td>GRANT OPTION</td>
<td>使用GRANT和REVOKE</td>
</tr>
<tr>
<td>INDEX</td>
<td>使用CREATE INDEX和DROP INDEX</td>
</tr>
<tr>
<td>INSERT</td>
<td>使用INSERT</td>
</tr>
<tr>
<td>LOCK TABLES</td>
<td>使用LOCK TABLES</td>
</tr>
<tr>
<td>PROCESS</td>
<td>使用SHOW FULL PROCESSLIST</td>
</tr>
<tr>
<td>RELOAD</td>
<td>使用FLUSH</td>
</tr>
<tr>
<td>REPLICATION CLIENT</td>
<td>服务器位置的访问</td>
</tr>
<tr>
<td>REPLICATION SLAVE</td>
<td>由复制从属使用</td>
</tr>
<tr>
<td>SELECT</td>
<td>使用SELECT</td>
</tr>
<tr>
<td>SHOW DATABASES</td>
<td>使用SHOW DATABASES</td>
</tr>
<tr>
<td>SHOW VIEW</td>
<td>使用SHOW CREATE VIEW</td>
</tr>
<tr>
<td>SHUTDOWN</td>
<td>使用mysqladmin shutdown（用来关闭MySQL）</td>
</tr>
<tr>
<td>SUPER</td>
<td>使用CHANGE MASTER、KILL、LOGS、PURGE、MASTER和SET GLOBAL。还允许mysqladmin调试登录</td>
</tr>
<tr>
<td>UPDATE</td>
<td>使用UPDATE</td>
</tr>
<tr>
<td>USAGE</td>
<td>无访问权限</td>
</tr>
</tbody></table>
<p>为了更改用户口令，可使用<code>SET PASSWORD</code>语句。新口令必须如下加密：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> bforta <span class="operator">=</span> Password(<span class="string">&#x27;n3w p@$$w0rd&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><code>SET PASSWORD</code>还可以用来设置你自己的口令：<br>在不指定用户名时，<code>SET PASSWORD</code>更新当前登录用户的口令。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> Password(<span class="string">&#x27;n3w p@$$w0rd&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="第29章-数据库维护"><a href="#第29章-数据库维护" class="headerlink" title="第29章 数据库维护"></a>第29章 数据库维护</h1><p>为了保证所有数据被写到磁盘（包括索引数据），可能需要在进行备份前使用<code>FLUSH TABLES</code>语句。</p>
<p><code>ANALYZE TABLE</code>，用来检查表键是否正确。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ANALYZE <span class="keyword">TABLE</span> orders;</span><br></pre></td></tr></table></figure>

<p><code>CHECK TABLE</code>用来针对许多问题对表进行检查。在<code>MyISAM</code>表上还对索引进行检查。<code>CHECK TABLE</code>支持一系列的用于<code>MyISAM</code>表的方式。<code>CHANGED</code>检查自最后一次检查以来改动过的表。<code>EXTENDED</code>执行最彻底的检查， <code>FAST</code>只检查未正常关闭的表， <code>MEDIUM</code>检查所有被删除的链接并进行键检验，<code>QUICK</code>只进行快速扫描。如下所示，<code>CHECKTABLE</code>发现和修复问题：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CHECK</span> <span class="keyword">TABLE</span> orders, orderitems;</span><br></pre></td></tr></table></figure>

<p>如果<code>MyISAM</code>表访问产生不正确和不一致的结果，可能需要用<code>REPAIR TABLE</code>来修复相应的表。这条语句不应该经常使用，如果需要经常使用，可能会有更大的问题要解决。</p>
<p>如果从一个表中删除大量数据，应该使用<code>OPTIMIZE TABLE</code>来收回所用的空间，从而优化表的性能。</p>
<p>在排除系统启动问题时，首先应该尽量用手动启动服务器。MySQL服务器自身通过在命令行上执行mysqld启动。下面是几个重要的mysqld命令行选项：</p>
<ul>
<li>–help 显示帮助——一个选项列表；</li>
<li>–safe-mode 装载减去某些最佳配置的服务器；</li>
<li>–verbose 显示全文本消息（为获得更详细的帮助消息与 –help联合使用）；</li>
<li>–version 显示版本信息然后退出</li>
</ul>
<p>MySQL维护管理员依赖的一系列日志文件。主要的日志文件有以下几种。</p>
<ul>
<li>错误日志。它包含启动和关闭问题以及任意关键错误的细节。此日志通常名为<code>hostname.err</code>，位于<code>data</code>目录中。此日志名可用<code>--log-error</code>命令行选项更改。</li>
<li>查询日志。它记录所有MySQL活动，在诊断问题时非常有用。此日志文件可能会很快地变得非常大，因此不应该长期使用它。此日志通常名为<code>hostname.log</code>，位于<code>data</code>目录中。此名字可以用<code>--log</code>命令行选项更改。</li>
<li>二进制日志。它记录更新过数据（或者可能更新过数据）的所有语句。此日志通常名为<code>hostname-bin</code>，位于<code>data</code>目录内。此名字可以用<code>--log-bin</code>命令行选项更改。注意，这个日志文件是MySQL5中添加的，以前的MySQL版本中使用的是更新日志。</li>
<li>缓慢查询日志。顾名思义，此日志记录执行缓慢的任何查询。这个日志在确定数据库何处需要优化很有用。此日志通常名为hostname-slow.log ，位于data目录中。此名字可以用<code>--log-slow-queries</code>命令行选项更改。</li>
</ul>
<p>在使用日志时，可用<code>FLUSH LOGS</code>语句来刷新和重新开始所有日志文件。</p>
<h1 id="第30章-改善性能"><a href="#第30章-改善性能" class="headerlink" title="第30章 改善性能"></a>第30章 改善性能</h1><p>数据库管理员把他们生命中的相当一部分时间花在了调整、试验以改善DBMS性能之上。在诊断应用的滞缓现象和性能问题时，性能不良的数据库（以及数据库查询）通常是最常见的祸因。<br>可以看出，下面的内容并不能完全决定MySQL的性能。我们只是想回顾一下前面各章的重点，提供进行性能优化探讨和分析的一个出发点。</p>
<ul>
<li>首先，MySQL（与所有DBMS一样）具有特定的硬件建议。在学习和研究MySQL时，使用任何旧的计算机作为服务器都可以。但对用于生产的服务器来说，应该坚持遵循这些硬件建议。</li>
<li>一般来说，关键的生产DBMS应该运行在自己的专用服务器上。</li>
<li>MySQL是用一系列的默认设置预先配置的，这些设置开始通常是很好的。但过一段时间后你可能需要调整内存分配、缓冲区大小等。（为查看当前设置，可使用SHOW VARIABLES；和SHOW STATUS;。）</li>
<li>MySQL是一个多用户多线程的DBMS，换言之，它经常同时执行多个任务。如果这些任务中的某一个执行缓慢，则所有请求都会执行缓慢。如果你遇到显著的性能不良，可使用SHOW PROCESSLIST显示所有活动进程（以及它们的线程ID和执行时间）。你还可以用KILL命令终结某个特定的进程（使用这个命令需要作为管理员登录）。</li>
<li>总是有不止一种方法编写同一条SELECT语句。应该试验联结、并、子查询等，找出最佳的方法。</li>
<li>使用EXPLAIN语句让MySQL解释它将如何执行一条SELECT语句。</li>
<li>一般来说，存储过程执行得比一条一条地执行其中的各条MySQL语句快。</li>
<li>应该总是使用正确的数据类型。</li>
<li>决不要检索比需求还要多的数据。换言之，不要用SELECT *（除非你真正需要每个列）。</li>
<li>有的操作（包括INSERT）支持一个可选的DELAYED关键字，如果使用它，将把控制立即返回给调用程序，并且一旦有可能就实际执行该操作。</li>
<li>在导入数据时，应该关闭自动提交。你可能还想删除索引（包括FULLTEXT索引），然后在导入完成后再重建它们。</li>
<li>必须索引数据库表以改善数据检索的性能。确定索引什么不是一件微不足道的任务，需要分析使用的SELECT语句以找出重复的WHERE和ORDER BY子句。如果一个简单的WHERE子句返回结果所花的时间太长，则可以断定其中使用的列（或几个列）就是需要索引的对象。</li>
<li>你的SELECT语句中有一系列复杂的OR条件吗？通过使用多条SELECT语句和连接它们的UNION语句，你能看到极大的性能改进。</li>
<li>索引改善数据检索的性能，但损害数据插入、删除和更新的性能。如果你有一些表，它们收集数据且不经常被搜索，则在有必要之前不要索引它们。（索引可根据需要添加和删除。）</li>
<li>LIKE很慢。一般来说，最好是使用FULLTEXT而不是LIKE。</li>
<li>数据库是不断变化的实体。一组优化良好的表一会儿后可能就面目全非了。由于表的使用和内容的更改，理想的优化和配置也会改变。</li>
<li>最重要的规则就是，每条规则在某些条件下都会被打破。</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>黑马MySQL高级教程</title>
    <url>/2021/08/20/%E9%BB%91%E9%A9%ACMySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="MySQL高级课程简介"><a href="#MySQL高级课程简介" class="headerlink" title="MySQL高级课程简介"></a>MySQL高级课程简介</h1><table>
<thead>
<tr>
<th align="center">序号</th>
<th>Day01</th>
<th>Day02</th>
<th>Day03</th>
<th>Day04</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td>Linux系统安装MySQL</td>
<td>体系结构</td>
<td>应用优化</td>
<td>MySQL 常用工具</td>
</tr>
<tr>
<td align="center">2</td>
<td>索引</td>
<td>存储引擎</td>
<td>查询缓存优化</td>
<td>MySQL 日志</td>
</tr>
<tr>
<td align="center">3</td>
<td>视图</td>
<td>优化SQL步骤</td>
<td>内存管理及优化</td>
<td>MySQL 主从复制</td>
</tr>
<tr>
<td align="center">4</td>
<td>存储过程和函数</td>
<td>索引使用</td>
<td>MySQL锁问题</td>
<td>综合案例</td>
</tr>
<tr>
<td align="center">5</td>
<td>触发器</td>
<td>SQL优化</td>
<td>常用SQL技巧</td>
<td></td>
</tr>
</tbody></table>
<span id="more"></span>

<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h2><p>MySQL官方对索引的定义为：索引（index）是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。如下面的==示意图==所示 : </p>
<p><img data-src="https://cdn.jsdelivr.net/gh/JulyForever/Photos/article/%E7%B4%A2%E5%BC%95%E6%A6%82%E8%BF%B0.png" alt="索引概述"></p>
<p>左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找快速获取到相应数据。</p>
<p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。索引是数据库中用来提高性能的最常用的工具。</p>
<h2 id="索引优势劣势"><a href="#索引优势劣势" class="headerlink" title="索引优势劣势"></a>索引优势劣势</h2><p>优势</p>
<p>1） 类似于书籍的目录索引，提高数据检索的效率，降低数据库的IO成本。<br>2） 通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗。</p>
<p>劣势</p>
<p>1） 实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，所以索引列也是要占用空间的。<br>2） 虽然索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</p>
<h2 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h2><p>索引是在MySQL的存储引擎层中实现的，而不是在服务器层实现的。所以每种存储引擎的索引都不一定完全相同，也不是所有的存储引擎都支持所有的索引类型的。MySQL目前提供了以下4种索引：</p>
<ul>
<li>BTREE 索引 ： 最常见的索引类型，大部分索引都支持 B 树索引。</li>
<li>HASH 索引：只有Memory引擎支持 ， 使用场景简单 。</li>
<li>R-tree 索引（空间索引）：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少，不做特别介绍。</li>
<li>Full-text （全文索引） ：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从Mysql5.6版本开始支持全文索引。</li>
</ul>
<center><b>MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持</b></center>

<table>
<thead>
<tr>
<th>索引</th>
<th>InnoDB引擎</th>
<th>MyISAM引擎</th>
<th>Memory引擎</th>
</tr>
</thead>
<tbody><tr>
<td>BTREE索引</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>HASH 索引</td>
<td>不支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>R-tree 索引</td>
<td>不支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>Full-text</td>
<td>5.6版本之后支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<p>我们平常所说的索引，如果没有特别指明，都是指B+树（多路搜索树，并不一定是二叉的）结构组织的索引。其中聚集索引、复合索引、前缀索引、唯一索引默认都是使用 B+tree 索引，统称为 索引。</p>
<h3 id="BTREE-结构"><a href="#BTREE-结构" class="headerlink" title="BTREE 结构"></a>BTREE 结构</h3><p>BTree又叫多路平衡搜索树，一颗m叉的BTree特性如下：</p>
<ul>
<li>树中每个节点最多包含m个孩子。</li>
<li>除根节点与叶子节点外，每个节点至少有[ceil(m/2)]个孩子。</li>
<li>若根节点不是叶子节点，则至少有两个孩子。</li>
<li>所有的叶子节点都在同一层。</li>
<li>每个非叶子节点由n个key与n+1个指针组成，其中[ceil(m/2)-1] &lt;= n &lt;= m-1 </li>
</ul>
<p>以5叉BTree为例，key的数量：公式推导[ceil(m/2)-1] &lt;= n &lt;= m-1。所以 2 &lt;= n &lt;=4 。当n&gt;4时，中间节点分裂到父节点，两边节点分裂。</p>
<p>插入 C N G A H E K Q M F W L T Z D P R X Y S 数据为例。<br>演变过程如下：</p>
<p>1). 插入前4个字母 C N G A </p>
<p><img data-src="1555944126588.png"> </p>
<p>2). 插入H，n&gt;4，中间元素G字母向上分裂到新的节点</p>
<p><img data-src="1555944549825.png"> </p>
<p>3). 插入E，K，Q不需要分裂</p>
<p><img data-src="1555944596893.png"> </p>
<p>4). 插入M，中间元素M字母向上分裂到父节点G</p>
<p><img data-src="1555944652560.png"> </p>
<p>5). 插入F，W，L，T不需要分裂</p>
<p><img data-src="1555944686928.png"> </p>
<p>6). 插入Z，中间元素T向上分裂到父节点中 </p>
<p><img data-src="1555944713486.png"> </p>
<p>7). 插入D，中间元素D向上分裂到父节点中。然后插入P，R，X，Y不需要分裂</p>
<p><img data-src="1555944749984.png"> </p>
<p>8). 最后插入S，NPQR节点n&gt;5，中间节点Q向上分裂，但分裂后父节点DGMT的n&gt;5，中间节点M向上分裂</p>
<p><img data-src="1555944848294.png"> </p>
<p>到此，该BTREE树就已经构建完成了， BTREE树 和 二叉树 相比， 查询数据的效率更高， 因为对于相同的数据量来说，BTREE的层级结构比二叉树小，因此搜索速度快。</p>
<h3 id="B-TREE-结构"><a href="#B-TREE-结构" class="headerlink" title="B+TREE 结构"></a>B+TREE 结构</h3><p>B+Tree为BTree的变种，B+Tree与BTree的区别为：</p>
<p>1). n叉B+Tree最多含有n个key，而BTree最多含有n-1个key。<br>2). B+Tree的叶子节点保存所有的key信息，依key大小顺序排列。<br>3). 所有的非叶子节点都可以看作是key的索引部分。</p>
<p><img data-src="00001.jpg"> </p>
<p>由于B+Tree只有叶子节点保存key信息，查询任何key都要从root走到叶子。所以B+Tree的查询效率更加稳定。</p>
<h3 id="MySQL中的B-Tree"><a href="#MySQL中的B-Tree" class="headerlink" title="MySQL中的B+Tree"></a>MySQL中的B+Tree</h3><p>MySql索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能。<br>MySQL中的 B+Tree 索引结构示意图: </p>
<p><img data-src="1555906287178.png">  </p>
<h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><p>1） 单值索引 ：即一个索引只包含单个列，一个表可以有多个单列索引<br>2） 唯一索引 ：索引列的值必须唯一，但允许有空值<br>3） 复合索引 ：即一个索引包含多个列</p>
<h2 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h2><p>索引在创建表的时候，可以同时创建， 也可以随时增加新的索引。</p>
<p>准备环境:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database demo_01 <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line">use demo_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `city` (</span><br><span class="line">  `city_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `city_name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `country_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`city_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `country` (</span><br><span class="line">  `country_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `country_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`country_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `city` (`city_id`, `city_name`, `country_id`) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;西安&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `city` (`city_id`, `city_name`, `country_id`) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;NewYork&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `city` (`city_id`, `city_name`, `country_id`) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;北京&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `city` (`city_id`, `city_name`, `country_id`) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `country` (`country_id`, `country_name`) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;China&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `country` (`country_id`, `country_name`) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;America&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `country` (`country_id`, `country_name`) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Japan&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `country` (`country_id`, `country_name`) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;UK&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>Unique 唯一索引</p>
<p>语法 ：     </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Unique 唯一索引,Full Text 全文索引,SPATIAL 空间索引</span></span><br><span class="line"><span class="keyword">CREATE</span>     [<span class="keyword">UNIQUE</span><span class="operator">|</span>FULLTEXT<span class="operator">|</span>SPATIAL]  INDEX index_name </span><br><span class="line">[<span class="keyword">USING</span>  index_type]</span><br><span class="line"><span class="keyword">ON</span> tbl_name(index_col_name,...)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index_col_name : column_name[(length)][<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>]</span><br></pre></td></tr></table></figure>

<p>示例 ： 为city表中的city_name字段创建索引 ；</p>
<p><img data-src="1551438009843.png">    ​      </p>
<p>​    </p>
<h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><p>语法： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show index  from  table_name;</span><br></pre></td></tr></table></figure>

<p>示例：查看city表中的索引信息；</p>
<p><img data-src="1551440511890.png"> </p>
<p><img data-src="1551440544483.png">      </p>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>语法 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP  INDEX  index_name  ON  tbl_name;</span><br></pre></td></tr></table></figure>

<p>示例 ： 想要删除city表上的索引idx_city_name，可以操作如下：</p>
<p><img data-src="1551438238293.png"></p>
<h3 id="ALTER命令"><a href="#ALTER命令" class="headerlink" title="ALTER命令"></a>ALTER命令</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>). <span class="keyword">alter</span>  <span class="keyword">table</span>  tb_name  <span class="keyword">add</span>  <span class="keyword">primary</span>  key(column_list); </span><br><span class="line"></span><br><span class="line">    该语句添加一个主键，这意味着索引值必须是唯一的，且不能为<span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). <span class="keyword">alter</span>  <span class="keyword">table</span>  tb_name  <span class="keyword">add</span>  <span class="keyword">unique</span> index_name(column_list);</span><br><span class="line"></span><br><span class="line">    这条语句创建索引的值必须是唯一的（除了<span class="keyword">NULL</span>外，<span class="keyword">NULL</span>可能会出现多次）</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>). <span class="keyword">alter</span>  <span class="keyword">table</span>  tb_name  <span class="keyword">add</span>  index index_name(column_list);</span><br><span class="line"></span><br><span class="line">    添加普通索引， 索引值可以出现多次。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>). <span class="keyword">alter</span>  <span class="keyword">table</span>  tb_name  <span class="keyword">add</span>  fulltext  index_name(column_list);</span><br><span class="line"></span><br><span class="line">    该语句指定了索引为FULLTEXT， 用于全文索引</span><br></pre></td></tr></table></figure>

<h2 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h2><p>​    索引的设计可以遵循一些已有的原则，创建索引的时候请尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引。</p>
<ul>
<li><p>对查询频次较高，且数据量比较大的表建立索引。</p>
</li>
<li><p>索引字段的选择，最佳候选列应当从where子句的条件中提取，如果where子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合。</p>
</li>
<li><p>使用唯一索引，区分度越高，使用索引的效率越高。</p>
</li>
<li><p>索引可以有效的提升查询数据的效率，但索引数量不是多多益善，索引越多，维护索引的代价自然也就水涨船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价，降低DML操作的效率，增加相应操作的时间消耗。另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但无疑提高了选择的代价。</p>
</li>
<li><p>使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I/O效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，相应的可以有效的提升MySQL访问索引的I/O效率。</p>
</li>
<li><p>复合索引的使用遵循最左匹配原则，只有索引左边的列匹配到，后面的列才能继续匹配。利用最左前缀，N个列组合而成的组合索引，那么相当于是创建了N个索引，如果查询时where子句中使用了组成该索引的前几个字段，那么这条查询SQL可以利用组合索引来提升查询效率。</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">创建复合索引:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">CREATE</span> INDEX idx_name_email_status <span class="keyword">ON</span> tb_seller(NAME,email,STATUS);</span><br><span class="line"></span><br><span class="line">就相当于</span><br><span class="line">  对name 创建索引 ;</span><br><span class="line">  对name , email 创建了索引 ;</span><br><span class="line">  对name , email, status 创建了索引 ;</span><br></pre></td></tr></table></figure>

<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="视图概述"><a href="#视图概述" class="headerlink" title="视图概述"></a>视图概述</h2><p>​视图（View）是一种虚拟存在的表。视图并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。通俗的讲，视图就是一条SELECT语句执行后返回的结果集。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。</p>
<p>视图相对于普通的表的优势主要包括以下几项。</p>
<ul>
<li>简单：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集。</li>
<li>安全：使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行某个列，但是通过视图就可以简单的实现。</li>
<li>数据独立：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</li>
</ul>
<h2 id="创建或者修改视图"><a href="#创建或者修改视图" class="headerlink" title="创建或者修改视图"></a>创建或者修改视图</h2><p>创建视图的语法为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CREATE [OR REPLACE] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line"></span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> <span class="operator">|</span> <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> OPTION]</span><br></pre></td></tr></table></figure>

<p>1）OR REPLACE：表示替换已有视图<br>2）ALGORITHM：表示视图选择算法，默认算法是UNDEFINED(未定义的)：MySQL自动选择要使用的算法 ；merge合并；temptable临时表<br>3）select_statement：表示select语句<br>4）[WITH [CASCADED | LOCAL] CHECK OPTION]：表示视图在更新时保证在视图的权限范围之内</p>
<p>TIPS：推荐使用WHIT [CASCADED|LOCAL] CHECK OPTION选项，可以保证数据的安全性 </p>
<ul>
<li>WITH CASCADED CHECK OPTION：检查所有的视图<br>例如：嵌套视图及其底层的视图</li>
<li>WITH LOCAL CHECK OPTION：只检查将要更新的视图本身<br>对嵌套视图不检查其底层的视图　</li>
</ul>
<p>修改视图的语法为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ALTER [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line"></span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> <span class="operator">|</span> <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> OPTION]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选项 : </span><br><span class="line">    WITH [CASCADED | LOCAL] CHECK OPTION 决定了是否允许更新数据使记录不再满足视图的条件。</span><br><span class="line"></span><br><span class="line">    LOCAL ： 只要满足本视图的条件就可以更新。</span><br><span class="line">    CASCADED ： 必须满足所有针对该视图的所有视图的条件才可以更新。 默认值.</span><br></pre></td></tr></table></figure>

<p>示例 , 创建city_country_view视图 , 执行如下SQL : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> city_country_view </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> t.<span class="operator">*</span>,c.country_name <span class="keyword">from</span> country c , city t <span class="keyword">where</span> c.country_id <span class="operator">=</span> t.country_id;</span><br></pre></td></tr></table></figure>

<p>查询视图 : </p>
<p><img data-src="1551503428635.png">     </p>
<h2 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h2><p>​    从 MySQL 5.1 版本开始，使用 SHOW TABLES 命令的时候不仅显示表的名字，同时也会显示视图的名字，而不存在单独显示视图的 SHOW VIEWS 命令。</p>
<p><img data-src="1551537565159.png">     </p>
<p>同样，在使用 SHOW TABLE STATUS 命令的时候，不但可以显示表的信息，同时也可以显示视图的信息。    </p>
<p><img data-src="1551537646323.png"> </p>
<p>如果需要查询某个视图的定义，可以使用 SHOW CREATE VIEW 命令进行查看 ： </p>
<p><img data-src="1551588962944.png">  </p>
<h2 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h2><p>语法 : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [IF <span class="keyword">EXISTS</span>] view_name [, view_name] ...[RESTRICT <span class="operator">|</span> CASCADE]    </span><br></pre></td></tr></table></figure>

<p>示例 , 删除视图city_country_view :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP VIEW city_country_view ;</span><br></pre></td></tr></table></figure>

<h1 id="存储过程和函数"><a href="#存储过程和函数" class="headerlink" title="存储过程和函数"></a>存储过程和函数</h1><p>​存储过程和函数是  事先经过编译并存储在数据库中的一段 SQL 语句的集合，调用存储过程和函数可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。    </p>
<p>存储过程和函数的区别在于函数必须有返回值，而存储过程没有。</p>
<ul>
<li>函数 ： 是一个有返回值的过程 ；</li>
<li>过程 ： 是一个没有返回值的函数 ；</li>
</ul>
<h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> procedure_name ([proc_parameter[,...]])</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="comment">-- SQL语句</span></span><br><span class="line"><span class="keyword">end</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test1()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> <span class="string">&#x27;Hello Mysql&#x27;</span> ;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<p><code>DELIMITER</code>该关键字用来声明SQL语句的分隔符 , 告诉 MySQL 解释器，该段命令是否已经结束了，mysql是否可以执行了。默认情况下，delimiter是分号;。在命令行客户端中，如果有一行命令以分号结束，那么回车后，mysql将会执行该命令。</p>
<h2 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h2><p>call procedure_name() ;    </p>
<h2 id="查看存储过程"><a href="#查看存储过程" class="headerlink" title="查看存储过程"></a>查看存储过程</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询db_name数据库中的所有的存储过程</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> mysql.proc <span class="keyword">where</span> db<span class="operator">=</span><span class="string">&#x27;db_name&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询存储过程的状态信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">procedure</span> status;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询某个存储过程的定义</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> test.pro_test1 \G;</span><br></pre></td></tr></table></figure>

<h2 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h2><p>DROP PROCEDURE  [IF EXISTS] sp_name ；</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>存储过程是可以编程的，意味着可以使用变量，表达式，控制结构，来完成比较复杂的功能。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="DECLARE"><a href="#DECLARE" class="headerlink" title="DECLARE"></a>DECLARE</h4><p>通过 DECLARE 可以定义一个局部变量，该变量的作用范围只能在 BEGIN…END 块中。</p>
<p>DECLARE var_name[,…] type [DEFAULT value]</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test2() </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">  <span class="keyword">declare</span> num <span class="type">int</span> <span class="keyword">default</span> <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">select</span> num<span class="operator">+</span> <span class="number">10</span>; </span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ; </span><br></pre></td></tr></table></figure>

<h4 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h4><p>直接赋值使用 SET，可以赋常量或者赋表达式，具体语法如下：</p>
<p>SET var_name = expr [, var_name = expr] …</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">PROCEDURE</span> pro_test3()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> NAME <span class="type">VARCHAR</span>(<span class="number">20</span>);</span><br><span class="line">  <span class="keyword">SET</span> NAME <span class="operator">=</span> <span class="string">&#x27;MYSQL&#x27;</span>;</span><br><span class="line">  <span class="keyword">SELECT</span> NAME ;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>也可以通过select … into 方式进行赋值操作 :</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">PROCEDURE</span> pro_test5()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">declare</span>  countnum <span class="type">int</span>;</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">into</span> countnum <span class="keyword">from</span> city;</span><br><span class="line">    <span class="keyword">select</span> countnum;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<h3 id="if条件判断"><a href="#if条件判断" class="headerlink" title="if条件判断"></a>if条件判断</h3><p>语法结构 : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if search_condition <span class="keyword">then</span> statement_list</span><br><span class="line"></span><br><span class="line">    [elseif search_condition <span class="keyword">then</span> statement_list] ...</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">else</span> statement_list]</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> if;</span><br></pre></td></tr></table></figure>

<p>需求</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">根据定义的身高变量，判定当前身高的所属的身材类型 </span><br><span class="line"></span><br><span class="line">    <span class="number">180</span> 及以上 <span class="comment">----------&gt; 身材高挑</span></span><br><span class="line"></span><br><span class="line">    <span class="number">170</span> <span class="operator">-</span> <span class="number">180</span>  <span class="comment">---------&gt; 标准身材</span></span><br><span class="line"></span><br><span class="line">    <span class="number">170</span> 以下  <span class="comment">----------&gt; 一般身材</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test6()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span>  height  <span class="type">int</span>  <span class="keyword">default</span>  <span class="number">175</span>; </span><br><span class="line">  <span class="keyword">declare</span>  description  <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">  if  height <span class="operator">&gt;=</span> <span class="number">180</span>  <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">set</span> description <span class="operator">=</span> <span class="string">&#x27;身材高挑&#x27;</span>;</span><br><span class="line">  elseif height <span class="operator">&gt;=</span> <span class="number">170</span> <span class="keyword">and</span> height <span class="operator">&lt;</span> <span class="number">180</span>  <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">set</span> description <span class="operator">=</span> <span class="string">&#x27;标准身材&#x27;</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">set</span> description <span class="operator">=</span> <span class="string">&#x27;一般身材&#x27;</span>;</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">select</span> description ;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><p>语法格式 : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> procedure_name([<span class="keyword">in</span><span class="operator">/</span><span class="keyword">out</span><span class="operator">/</span><span class="keyword">inout</span>] 参数名   参数类型)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">IN</span> :   该参数可以作为输入，也就是需要调用方传入值 , 默认</span><br><span class="line"><span class="keyword">OUT</span>:   该参数作为输出，也就是该参数可以作为返回值</span><br><span class="line"><span class="keyword">INOUT</span>: 既可以作为输入参数，也可以作为输出参数</span><br></pre></td></tr></table></figure>

<h4 id="IN-输入"><a href="#IN-输入" class="headerlink" title="IN - 输入"></a>IN - 输入</h4><p>需求:根据定义的身高变量，判定当前身高的所属的身材类型 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test5(<span class="keyword">in</span> height <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> description <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  if height <span class="operator">&gt;=</span> <span class="number">180</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">set</span> description<span class="operator">=</span><span class="string">&#x27;身材高挑&#x27;</span>;</span><br><span class="line">  elseif height <span class="operator">&gt;=</span> <span class="number">170</span> <span class="keyword">and</span> height <span class="operator">&lt;</span> <span class="number">180</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">set</span> description<span class="operator">=</span><span class="string">&#x27;标准身材&#x27;</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">set</span> description<span class="operator">=</span><span class="string">&#x27;一般身材&#x27;</span>;</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line">  <span class="keyword">select</span> concat(<span class="string">&#x27;身高 &#x27;</span>, height , <span class="string">&#x27;对应的身材类型为:&#x27;</span>,description);</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h4 id="OUT-输出"><a href="#OUT-输出" class="headerlink" title="OUT-输出"></a>OUT-输出</h4><p>需求:根据传入的身高变量，获取当前身高的所属的身材类型  </p>
<p>示例:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test5(<span class="keyword">in</span> height <span class="type">int</span> , <span class="keyword">out</span> description <span class="type">varchar</span>(<span class="number">100</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  if height <span class="operator">&gt;=</span> <span class="number">180</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">set</span> description<span class="operator">=</span><span class="string">&#x27;身材高挑&#x27;</span>;</span><br><span class="line">  elseif height <span class="operator">&gt;=</span> <span class="number">170</span> <span class="keyword">and</span> height <span class="operator">&lt;</span> <span class="number">180</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">set</span> description<span class="operator">=</span><span class="string">&#x27;标准身材&#x27;</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">set</span> description<span class="operator">=</span><span class="string">&#x27;一般身材&#x27;</span>;</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>$    </span><br></pre></td></tr></table></figure>

<p>调用:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> pro_test5(<span class="number">168</span>, <span class="variable">@description</span>)$</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@description</span>$</span><br></pre></td></tr></table></figure>

<ul>
<li>@description :  这种变量要在变量名称前面加上“@”符号，叫做用户会话变量，代表整个会话过程他都是有作用的，这个类似于全局变量一样。</li>
<li>@@global.sort_buffer_size : 这种在变量前加上 “@@” 符号, 叫做 系统变量 </li>
</ul>
<h3 id="case结构"><a href="#case结构" class="headerlink" title="case结构"></a>case结构</h3><p>语法结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方式一 : </span></span><br><span class="line"><span class="keyword">CASE</span> case_value</span><br><span class="line"></span><br><span class="line">  <span class="keyword">WHEN</span> when_value <span class="keyword">THEN</span> statement_list</span><br><span class="line"></span><br><span class="line">  [<span class="keyword">WHEN</span> when_value <span class="keyword">THEN</span> statement_list] ...</span><br><span class="line"></span><br><span class="line">  [<span class="keyword">ELSE</span> statement_list]</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二 : </span></span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">WHEN</span> search_condition <span class="keyword">THEN</span> statement_list</span><br><span class="line"></span><br><span class="line">  [<span class="keyword">WHEN</span> search_condition <span class="keyword">THEN</span> statement_list] ...</span><br><span class="line"></span><br><span class="line">  [<span class="keyword">ELSE</span> statement_list]</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure>

<p>需求:给定一个月份, 然后计算出所在的季度</p>
<p>示例  :</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test9(<span class="keyword">month</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">20</span>);</span><br><span class="line">  <span class="keyword">case</span> </span><br><span class="line">    <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span><span class="number">3</span> <span class="keyword">then</span> </span><br><span class="line">      <span class="keyword">set</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;第一季度&#x27;</span>;</span><br><span class="line">    <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">4</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span><span class="number">6</span> <span class="keyword">then</span> </span><br><span class="line">      <span class="keyword">set</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;第二季度&#x27;</span>;</span><br><span class="line">    <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">7</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span><span class="number">9</span> <span class="keyword">then</span> </span><br><span class="line">      <span class="keyword">set</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;第三季度&#x27;</span>;</span><br><span class="line">    <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">10</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span><span class="number">12</span> <span class="keyword">then</span> </span><br><span class="line">      <span class="keyword">set</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;第四季度&#x27;</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">select</span> concat(<span class="string">&#x27;您输入的月份为 :&#x27;</span>, <span class="keyword">month</span> , <span class="string">&#x27; , 该月份为 : &#x27;</span> , <span class="keyword">result</span>) <span class="keyword">as</span> content ;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>语法结构: </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">while search_condition do</span><br><span class="line"></span><br><span class="line">    statement_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> while;</span><br></pre></td></tr></table></figure>

<p>需求：计算从1加到n的值</p>
<p>示例  : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test8(n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">declare</span> num <span class="type">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">  while num<span class="operator">&lt;=</span>n do</span><br><span class="line">    <span class="keyword">set</span> total <span class="operator">=</span> total <span class="operator">+</span> num;</span><br><span class="line">    <span class="keyword">set</span> num <span class="operator">=</span> num <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">end</span> while;</span><br><span class="line">  <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h3 id="repeat结构"><a href="#repeat结构" class="headerlink" title="repeat结构"></a>repeat结构</h3><p>有条件的循环控制语句, 当满足条件的时候退出循环 。while 是满足条件才执行，repeat 是满足条件就退出循环。</p>
<p>语法结构 : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">REPEAT</span><br><span class="line"></span><br><span class="line">  statement_list</span><br><span class="line"></span><br><span class="line">  UNTIL search_condition</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> REPEAT;</span><br></pre></td></tr></table></figure>

<p>需求: 计算从1加到n的值</p>
<p>示例: </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test10(n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  repeat </span><br><span class="line">    <span class="keyword">set</span> total <span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line">    <span class="keyword">set</span> n <span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">    until n<span class="operator">=</span><span class="number">0</span>  </span><br><span class="line">  <span class="keyword">end</span> repeat;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">select</span> total ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h3 id="loop语句"><a href="#loop语句" class="headerlink" title="loop语句"></a>loop语句</h3><p>LOOP 实现简单的循环，退出循环的条件需要使用其他的语句定义，通常可以使用 LEAVE 语句实现，具体语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[begin_label:] LOOP</span><br><span class="line"></span><br><span class="line">  statement_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> LOOP [end_label]</span><br></pre></td></tr></table></figure>

<p>如果不在 statement_list 中增加退出循环的语句，那么 LOOP 语句可以用来实现简单的死循环。</p>
<h3 id="leave语句"><a href="#leave语句" class="headerlink" title="leave语句"></a>leave语句</h3><p>用来从标注的流程构造中退出，通常和 BEGIN … END 或者循环一起使用。下面是一个使用 LOOP 和 LEAVE 的简单例子 , 退出循环：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_test11(n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  ins: LOOP</span><br><span class="line"></span><br><span class="line">    IF n <span class="operator">&lt;=</span> <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">      leave ins;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> total <span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line">    <span class="keyword">set</span> n <span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">END</span> LOOP ins;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h3 id="游标-光标"><a href="#游标-光标" class="headerlink" title="游标/光标"></a>游标/光标</h3><p>游标是用来存储查询结果集的数据类型 , 在存储过程和函数中可以使用光标对结果集进行循环的处理。光标的使用包括光标的声明、OPEN、FETCH 和 CLOSE，其语法分别如下。</p>
<p>声明光标：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> select_statement ;</span><br></pre></td></tr></table></figure>

<p>OPEN 光标：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> cursor_name ;</span><br></pre></td></tr></table></figure>

<p>FETCH 光标：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FETCH</span> cursor_name <span class="keyword">INTO</span> var_name [, var_name] ...</span><br></pre></td></tr></table></figure>

<p>CLOSE 光标：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CLOSE</span> cursor_name ;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">  id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment ,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  age <span class="type">int</span>(<span class="number">11</span>) comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  salary <span class="type">int</span>(<span class="number">11</span>) comment <span class="string">&#x27;薪水&#x27;</span>,</span><br><span class="line">  <span class="keyword">primary</span> key(`id`)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(id,name,age,salary) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;金毛狮王&#x27;</span>,<span class="number">55</span>,<span class="number">3800</span>),(<span class="keyword">null</span>,<span class="string">&#x27;白眉鹰王&#x27;</span>,<span class="number">60</span>,<span class="number">4000</span>),(<span class="keyword">null</span>,<span class="string">&#x27;青翼蝠王&#x27;</span>,<span class="number">38</span>,<span class="number">2800</span>),(<span class="keyword">null</span>,<span class="string">&#x27;紫衫龙王&#x27;</span>,<span class="number">42</span>,<span class="number">1800</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询emp表中数据, 并逐行获取进行展示</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test11()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> e_id <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">declare</span> e_name <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line">  <span class="keyword">declare</span> e_age <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">declare</span> e_salary <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">declare</span> emp_result <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">open</span> emp_result;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> concat(<span class="string">&#x27;id=&#x27;</span>,e_id , <span class="string">&#x27;, name=&#x27;</span>,e_name, <span class="string">&#x27;, age=&#x27;</span>, e_age, <span class="string">&#x27;, 薪资为: &#x27;</span>,e_salary);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> concat(<span class="string">&#x27;id=&#x27;</span>,e_id , <span class="string">&#x27;, name=&#x27;</span>,e_name, <span class="string">&#x27;, age=&#x27;</span>, e_age, <span class="string">&#x27;, 薪资为: &#x27;</span>,e_salary);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> concat(<span class="string">&#x27;id=&#x27;</span>,e_id , <span class="string">&#x27;, name=&#x27;</span>,e_name, <span class="string">&#x27;, age=&#x27;</span>, e_age, <span class="string">&#x27;, 薪资为: &#x27;</span>,e_salary);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> concat(<span class="string">&#x27;id=&#x27;</span>,e_id , <span class="string">&#x27;, name=&#x27;</span>,e_name, <span class="string">&#x27;, age=&#x27;</span>, e_age, <span class="string">&#x27;, 薪资为: &#x27;</span>,e_salary);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> concat(<span class="string">&#x27;id=&#x27;</span>,e_id , <span class="string">&#x27;, name=&#x27;</span>,e_name, <span class="string">&#x27;, age=&#x27;</span>, e_age, <span class="string">&#x27;, 薪资为: &#x27;</span>,e_salary);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">close</span> emp_result;</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure>

<p>通过循环结构 , 获取游标中的数据 : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test12()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">DECLARE</span> id <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> name <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> age <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> salary <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> has_data <span class="type">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">DECLARE</span> emp_result <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line">  <span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">NOT</span> FOUND <span class="keyword">set</span> has_data <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">open</span> emp_result;</span><br><span class="line"></span><br><span class="line">  repeat</span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> id , name , age , salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">&#x27;id为&#x27;</span>,id, <span class="string">&#x27;, name 为&#x27;</span> ,name , <span class="string">&#x27;, age为 &#x27;</span> ,age , <span class="string">&#x27;, 薪水为: &#x27;</span>, salary);</span><br><span class="line">    until has_data <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span> repeat;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">close</span> emp_result;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">DELIMITER ; </span><br></pre></td></tr></table></figure>

<h3 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h3><p>语法结构:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> function_name([param type ... ]) </span><br><span class="line"><span class="keyword">RETURNS</span> type </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>案例 : 定义一个存储过程, 请求满足条件的总记录数 ;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> count_city(countryId <span class="type">int</span>)</span><br><span class="line"><span class="keyword">returns</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> cnum <span class="type">int</span> ;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">into</span> cnum <span class="keyword">from</span> city <span class="keyword">where</span> country_id <span class="operator">=</span> countryId;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cnum;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<p>调用: </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> count_city(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> count_city(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>触发器是与表有关的数据库对象，指在 insert/update/delete 之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性 , 日志记录 , 数据校验等操作 。</p>
<p>使用别名 OLD 和 NEW 来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。</p>
<table>
<thead>
<tr>
<th>触发器类型</th>
<th>NEW 和 OLD的使用</th>
</tr>
</thead>
<tbody><tr>
<td>INSERT 型触发器</td>
<td>NEW 表示将要或者已经新增的数据</td>
</tr>
<tr>
<td>UPDATE 型触发器</td>
<td>OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据</td>
</tr>
<tr>
<td>DELETE 型触发器</td>
<td>OLD 表示将要或者已经删除的数据</td>
</tr>
</tbody></table>
<h2 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h2><p>语法结构 : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trigger_name </span><br><span class="line"></span><br><span class="line">before<span class="operator">/</span>after <span class="keyword">insert</span><span class="operator">/</span>update<span class="operator">/</span><span class="keyword">delete</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">on</span> tbl_name </span><br><span class="line"></span><br><span class="line">[ <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> ]  <span class="comment">-- 行级触发器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">    trigger_stmt ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>示例：通过触发器记录 emp 表的数据变更日志 , 包含增加, 修改 , 删除 ;</p>
<p>首先创建一张日志表 : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_logs(</span><br><span class="line">  id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">  operation <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;操作类型, insert/update/delete&#x27;</span>,</span><br><span class="line">  operate_time datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">  operate_id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;操作表的ID&#x27;</span>,</span><br><span class="line">  operate_params <span class="type">varchar</span>(<span class="number">500</span>) comment <span class="string">&#x27;操作参数&#x27;</span>,</span><br><span class="line">  <span class="keyword">primary</span> key(`id`)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<p>创建 insert 型触发器，完成插入数据时的日志记录 : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> emp_logs_insert_trigger</span><br><span class="line">after <span class="keyword">insert</span> </span><br><span class="line"><span class="keyword">on</span> emp </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs (id,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;insert&#x27;</span>,now(),new.id,concat(<span class="string">&#x27;插入后(id:&#x27;</span>,new.id,<span class="string">&#x27;, name:&#x27;</span>,new.name,<span class="string">&#x27;, age:&#x27;</span>,new.age,<span class="string">&#x27;, salary:&#x27;</span>,new.salary,<span class="string">&#x27;)&#x27;</span>));    </span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>创建 update 型触发器，完成更新数据时的日志记录 : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> emp_logs_update_trigger</span><br><span class="line">after update </span><br><span class="line"><span class="keyword">on</span> emp </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs (id,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;update&#x27;</span>,now(),new.id,concat(<span class="string">&#x27;修改前(id:&#x27;</span>,old.id,<span class="string">&#x27;, name:&#x27;</span>,old.name,<span class="string">&#x27;, age:&#x27;</span>,old.age,<span class="string">&#x27;, salary:&#x27;</span>,old.salary,<span class="string">&#x27;) , 修改后(id&#x27;</span>,new.id, <span class="string">&#x27;name:&#x27;</span>,new.name,<span class="string">&#x27;, age:&#x27;</span>,new.age,<span class="string">&#x27;, salary:&#x27;</span>,new.salary,<span class="string">&#x27;)&#x27;</span>));                                                                      </span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>创建delete 行的触发器 , 完成删除数据时的日志记录 : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> emp_logs_delete_trigger</span><br><span class="line">after <span class="keyword">delete</span> </span><br><span class="line"><span class="keyword">on</span> emp </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs (id,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;delete&#x27;</span>,now(),old.id,concat(<span class="string">&#x27;删除前(id:&#x27;</span>,old.id,<span class="string">&#x27;, name:&#x27;</span>,old.name,<span class="string">&#x27;, age:&#x27;</span>,old.age,<span class="string">&#x27;, salary:&#x27;</span>,old.salary,<span class="string">&#x27;)&#x27;</span>));                                                                      </span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(id,name,age,salary) <span class="keyword">values</span>(<span class="keyword">null</span>, <span class="string">&#x27;光明左使&#x27;</span>,<span class="number">30</span>,<span class="number">3500</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(id,name,age,salary) <span class="keyword">values</span>(<span class="keyword">null</span>, <span class="string">&#x27;光明右使&#x27;</span>,<span class="number">33</span>,<span class="number">3200</span>);</span><br><span class="line"></span><br><span class="line">update emp <span class="keyword">set</span> age <span class="operator">=</span> <span class="number">39</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<h2 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h2><p>语法结构 : 如果没有指定 schema_name，默认为当前数据库 。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> [schema_name.]trigger_name</span><br></pre></td></tr></table></figure>

<p>如果没有指定 schema_name，默认为当前数据库 。</p>
<h2 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h2><p>可以通过执行 SHOW TRIGGERS 命令查看触发器的状态、语法等信息。</p>
<p>语法结构 ： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在 SHOW TRIGGERS 命令后添加\G，这样显示信息会比较有条理</span></span><br><span class="line"><span class="keyword">show</span> triggers \G ；</span><br></pre></td></tr></table></figure>

<h1 id="体系结构概览"><a href="#体系结构概览" class="headerlink" title="体系结构概览"></a>体系结构概览</h1><p><img data-src="000001.jpg" alt="体系结构"></p>
<p>整个MySQL Server由以下组成</p>
<ul>
<li>Connection Pool : 连接池组件</li>
<li>Management Services &amp; Utilities : 管理服务和工具组件</li>
<li>SQL Interface : SQL接口组件</li>
<li>Parser : 查询分析器组件</li>
<li>Optimizer : 优化器组件</li>
<li>Caches &amp; Buffers : 缓冲池组件</li>
<li>Pluggable Storage Engines : 存储引擎</li>
<li>File System : 文件系统</li>
</ul>
<p>1） 连接层</p>
<p>最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端/服务端工具实现的类似于 TCP/IP的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p>
<p>2） 服务层</p>
<p>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如 过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等， 最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p>
<p>3） 引擎层</p>
<p>存储引擎层， 存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。</p>
<p>4）存储层</p>
<p>数据存储层， 主要是将数据存储在文件系统之上，并完成与存储引擎的交互。</p>
<p>和其他数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎上，插件式的存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p>
<h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><h2 id="存储引擎概述"><a href="#存储引擎概述" class="headerlink" title="存储引擎概述"></a>存储引擎概述</h2><p>和大多数的数据库不同, MySQL中有一个存储引擎的概念, 针对不同的存储需求可以选择最优的存储引擎。</p>
<p>​存储引擎就是存储数据，建立索引，更新查询数据等等技术的实现方式 。存储引擎是基于表的，而不是基于库的。所以存储引擎也可被称为表类型。</p>
<p>​Oracle，SqlServer等数据库只有一种存储引擎。MySQL提供了插件式的存储引擎架构。所以MySQL存在多种存储引擎，可以根据需要使用相应引擎，或者编写存储引擎。</p>
<p>​MySQL5.0支持的存储引擎包含 ： InnoDB 、MyISAM 、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED等，其中InnoDB和BDB提供事务安全表，其他存储引擎是非事务安全表。</p>
<p>可以通过指定 show engines ， 来查询当前数据库支持的存储引擎 ： </p>
<p><img data-src="1551186043529.png"></p>
<p>创建新表时如果不指定存储引擎，那么系统就会使用默认的存储引擎，MySQL5.5之前的默认存储引擎是MyISAM，5.5之后就改为了InnoDB。</p>
<p>查看Mysql数据库默认的存储引擎 ，指令 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%storage_engine%&#x27;</span> ； </span><br></pre></td></tr></table></figure>

<p><img data-src="1556086372754.png"></p>
<h2 id="各种存储引擎特性"><a href="#各种存储引擎特性" class="headerlink" title="各种存储引擎特性"></a>各种存储引擎特性</h2><p>下面重点介绍几种常用的存储引擎， 并对比各个存储引擎之间的区别， 如下表所示 ： </p>
<table>
<thead>
<tr>
<th>特点</th>
<th>InnoDB</th>
<th>MyISAM</th>
<th>MEMORY</th>
<th>MERGE</th>
<th>NDB</th>
</tr>
</thead>
<tbody><tr>
<td>存储限制</td>
<td>64TB</td>
<td>有</td>
<td>有</td>
<td>没有</td>
<td>有</td>
</tr>
<tr>
<td>事务安全</td>
<td>==支持==</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>锁机制</td>
<td>==行锁(适合高并发)==</td>
<td>==表锁==</td>
<td>表锁</td>
<td>表锁</td>
<td>行锁</td>
</tr>
<tr>
<td>B树索引</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>哈希索引</td>
<td></td>
<td></td>
<td>支持</td>
<td></td>
<td></td>
</tr>
<tr>
<td>全文索引</td>
<td>支持(5.6版本之后)</td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>集群索引</td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据索引</td>
<td>支持</td>
<td></td>
<td>支持</td>
<td></td>
<td>支持</td>
</tr>
<tr>
<td>索引缓存</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>数据可压缩</td>
<td></td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>空间使用</td>
<td>高</td>
<td>低</td>
<td>N/A</td>
<td>低</td>
<td>低</td>
</tr>
<tr>
<td>内存使用</td>
<td>高</td>
<td>低</td>
<td>中等</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>批量插入速度</td>
<td>低</td>
<td>高</td>
<td>高</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>支持外键</td>
<td>==支持==</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>下面我们将重点介绍最长使用的两种存储引擎： InnoDB、MyISAM ， 另外两种 MEMORY、MERGE ， 了解即可。</p>
<h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB存储引擎是Mysql的默认存储引擎。InnoDB存储引擎提供了具有提交、回滚、崩溃恢复能力的事务安全。但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些，并且会占用更多的磁盘空间以保留数据和索引。</p>
<p>InnoDB存储引擎不同于其他存储引擎的特点 ： </p>
<p><strong>事务控制</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods_innodb(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">primary</span> key(id)</span><br><span class="line">)ENGINE<span class="operator">=</span>innodb <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> goods_innodb(id,name)<span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Meta20&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1556075130115.png"></p>
<p>测试，发现在InnoDB中是存在事务的 ；</p>
<p><strong>外键约束</strong></p>
<p>MySQL支持外键的存储引擎只有InnoDB ， 在创建外键的时候， 要求父表必须有对应的索引 ， 子表在创建外键的时候， 也会自动的创建对应的索引。</p>
<p>​下面两张表中 ， country_innodb是父表 ， country_id为主键索引，city_innodb表是子表，country_id字段为外键，对应于country_innodb表的主键country_id 。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> country_innodb(</span><br><span class="line">    country_id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    country_name <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">primary</span> key(country_id)</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> city_innodb(</span><br><span class="line">    city_id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    city_name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    country_id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">primary</span> key(city_id),</span><br><span class="line">    key idx_fk_country_id(country_id),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> `fk_city_country` <span class="keyword">FOREIGN</span> KEY(country_id) <span class="keyword">REFERENCES</span> country_innodb(country_id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> UPDATE CASCADE</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> country_innodb <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;China&#x27;</span>),(<span class="keyword">null</span>,<span class="string">&#x27;America&#x27;</span>),(<span class="keyword">null</span>,<span class="string">&#x27;Japan&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> city_innodb <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Xian&#x27;</span>,<span class="number">1</span>),(<span class="keyword">null</span>,<span class="string">&#x27;NewYork&#x27;</span>,<span class="number">2</span>),(<span class="keyword">null</span>,<span class="string">&#x27;BeiJing&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>在创建索引时， 可以指定在删除、更新父表时，对子表进行的相应操作，包括 RESTRICT、CASCADE、SET NULL 和 NO ACTION。</p>
<p>RESTRICT和NO ACTION相同， 是指限制在子表有关联记录的情况下， 父表不能更新；</p>
<p>CASCADE表示父表在更新或者删除时，更新或者删除子表对应的记录；</p>
<p>SET NULL 则表示父表在更新或者删除的时候，子表的对应字段被SET NULL 。</p>
<p>针对上面创建的两个表， 子表的外键指定是ON DELETE RESTRICT ON UPDATE CASCADE 方式的， 那么在主表删除记录的时候， 如果子表有对应记录， 则不允许删除， 主表在更新记录的时候， 如果子表有对应记录， 则子表对应更新 。</p>
<p>表中数据如下图所示 ： </p>
<p><img data-src="1556087540767.png"></p>
<p>外键信息可以使用如下两种方式查看 ： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> city_innodb ;</span><br></pre></td></tr></table></figure>

<p><img data-src="1556087611295.png"></p>
<p>删除country_id为1 的country数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> country_innodb <span class="keyword">where</span> country_id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1556087719145.png" alt="1556087719145"></p>
<p>更新主表country表的字段 country_id : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update country_innodb <span class="keyword">set</span> country_id <span class="operator">=</span> <span class="number">100</span> <span class="keyword">where</span> country_id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1556087759615.png" alt="1556087759615"></p>
<p>更新后， 子表的数据信息为 ： </p>
<p><img data-src="1556087793738.png" alt="1556087793738"></p>
<p><strong>存储方式</strong>    </p>
<p>InnoDB 存储表和索引有以下两种方式 ： </p>
<p>①. 使用共享表空间存储， 这种方式创建的表的表结构保存在.frm文件中， 数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path定义的表空间中，可以是多个文件。</p>
<p>②. 使用多表空间存储， 这种方式创建的表的表结构仍然存在 .frm 文件中，但是每个表的数据和索引单独保存在 .ibd 中。</p>
<p><img data-src="1556075336630.png" alt="1556075336630"></p>
<h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM 不支持事务、也不支持外键，其优势是访问的速度快，对事务的完整性没有要求或者以SELECT、INSERT为主的应用基本上都可以使用这个引擎来创建表 。有以下两个比较重要的特点： </p>
<p><strong>不支持事务</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods_myisam(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">primary</span> key(id)</span><br><span class="line">)ENGINE<span class="operator">=</span>myisam <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<p><img data-src="1551347590309.png" alt="1551347590309"></p>
<p>通过测试，我们发现，在MyISAM存储引擎中，是没有事务控制的 ；</p>
<p><strong>文件存储方式</strong></p>
<p>每个MyISAM在磁盘上存储成3个文件，其文件名都和表名相同，但拓展名分别是 ： </p>
<p>.frm (存储表定义)；</p>
<p>.MYD(MYData , 存储数据)；</p>
<p>.MYI(MYIndex , 存储索引)；</p>
<p><img data-src="1556075073836.png" alt="1556075073836"></p>
<h3 id="MEMORY"><a href="#MEMORY" class="headerlink" title="MEMORY"></a>MEMORY</h3><p>​Memory存储引擎将表的数据存放在内存中。每个MEMORY表实际对应一个磁盘文件，格式是.frm ，该文件中只存储表的结构，而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。MEMORY 类型的表访问非常地快，因为他的数据是存放在内存中的，并且默认使用HASH索引 ， 但是服务一旦关闭，表中的数据就会丢失。</p>
<h3 id="MERGE"><a href="#MERGE" class="headerlink" title="MERGE"></a>MERGE</h3><p>​MERGE存储引擎是一组MyISAM表的组合，这些MyISAM表必须结构完全相同，MERGE表本身并没有存储数据，对MERGE类型的表可以进行查询、更新、删除操作，这些操作实际上是对内部的MyISAM表进行的。</p>
<p>​对于MERGE类型表的插入操作，是通过INSERT_METHOD子句定义插入的表，可以有3个不同的值，使用FIRST 或 LAST 值使得插入操作被相应地作用在第一或者最后一个表上，不定义这个子句或者定义为NO，表示不能对这个MERGE表执行插入操作。</p>
<p>​可以对MERGE表进行DROP操作，但是这个操作只是删除MERGE表的定义，对内部的表是没有任何影响的。</p>
<p>下面是一个创建和使用MERGE表的示例 ： </p>
<p>1）. 创建3个测试表 order_1990, order_1991, order_all , 其中order_all是前两个表的MERGE表 ： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_1990(</span><br><span class="line">    order_id <span class="type">int</span> ,</span><br><span class="line">    order_money <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    order_address <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">    <span class="keyword">primary</span> key (order_id)</span><br><span class="line">)engine <span class="operator">=</span> myisam <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_1991(</span><br><span class="line">    order_id <span class="type">int</span> ,</span><br><span class="line">    order_money <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    order_address <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">    <span class="keyword">primary</span> key (order_id)</span><br><span class="line">)engine <span class="operator">=</span> myisam <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_all(</span><br><span class="line">    order_id <span class="type">int</span> ,</span><br><span class="line">    order_money <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    order_address <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">    <span class="keyword">primary</span> key (order_id)</span><br><span class="line">)engine <span class="operator">=</span> <span class="keyword">merge</span> <span class="keyword">union</span> <span class="operator">=</span> (order_1990,order_1991) INSERT_METHOD<span class="operator">=</span><span class="keyword">LAST</span> <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<p>2）. 分别向两张表中插入记录 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1990 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">100.0</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1990 <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">100.0</span>,<span class="string">&#x27;上海&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1991 <span class="keyword">values</span>(<span class="number">10</span>,<span class="number">200.0</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1991 <span class="keyword">values</span>(<span class="number">11</span>,<span class="number">200.0</span>,<span class="string">&#x27;上海&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>3）. 查询3张表中的数据。</p>
<p>order_1990中的数据 ： </p>
<p><img data-src="1551408083254.png" alt="1551408083254"></p>
<p>order_1991中的数据 ： </p>
<p><img data-src="1551408133323.png" alt="1551408133323"></p>
<p>order_all中的数据 ：</p>
<p><img data-src="1551408216185.png" alt="1551408216185"></p>
<p>4）. 往order_all中插入一条记录 ，由于在MERGE表定义时，INSERT_METHOD 选择的是LAST，那么插入的数据会想最后一张表中插入。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_all <span class="keyword">values</span>(<span class="number">100</span>,<span class="number">10000.0</span>,<span class="string">&#x27;西安&#x27;</span>)；</span><br></pre></td></tr></table></figure>

<p><img data-src="1551408519889.png" alt="1551408519889"></p>
<h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>​在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。以下是几种常用的存储引擎的使用环境。</p>
<ul>
<li>InnoDB : 是Mysql的默认存储引擎，用于事务处理应用程序，支持外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询意外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。InnoDB存储引擎除了有效的降低由于删除和更新导致的锁定， 还可以确保事务的完整提交和回滚，对于类似于计费系统或者财务系统等对数据准确性要求比较高的系统，InnoDB是最合适的选择。</li>
<li>MyISAM ： 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。</li>
<li>MEMORY：将所有数据保存在RAM中，在需要快速定位记录和其他类似数据环境下，可以提供几块的访问。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。MEMORY表通常用于更新不太频繁的小表，用以快速得到访问结果。</li>
<li>MERGE：用于将一系列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用他们。MERGE表的优点在于可以突破对单个MyISAM表的大小限制，并且通过将不同的表分布在多个磁盘上，可以有效的改善MERGE表的访问效率。这对于存储诸如数据仓储等VLDB环境十分合适。</li>
</ul>
<h1 id="优化SQL的步骤"><a href="#优化SQL的步骤" class="headerlink" title="优化SQL的步骤"></a>优化SQL的步骤</h1><p>在应用的的开发过程中，由于初期数据量小，开发人员写 SQL 语句时更重视功能上的实现，但是当应用系统正式上线后，随着生产数据量的急剧增长，很多 SQL 语句开始逐渐显露出性能问题，对生产的影响也越来越大，此时这些有问题的 SQL 语句就成为整个系统性能的瓶颈，因此我们必须要对它们进行优化，本章将详细介绍在 MySQL 中优化 SQL 语句的方法。</p>
<p>当面对一个有 SQL 性能问题的数据库时，我们应该从何处入手来进行系统的分析，使得能够尽快定位问题 SQL 并尽快解决问题。</p>
<h2 id="查看SQL执行频率"><a href="#查看SQL执行频率" class="headerlink" title="查看SQL执行频率"></a>查看SQL执行频率</h2><p>MySQL 客户端连接成功后，通过 show [session|global] status 命令可以提供服务器状态信息。show [session|global] status 可以根据需要加上参数“session”或者“global”来显示 session 级（当前连接）的计结果和 global 级（自数据库上次启动至今）的统计结果。如果不写，默认使用参数是“session”。</p>
<p>下面的命令显示了当前 session 中所有统计参数的值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;Com_______&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1552487172501.png" alt="1552487172501"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;Innodb_rows_%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1552487245859.png" alt="1552487245859"></p>
<p>Com_xxx 表示每个 xxx 语句执行的次数，我们通常比较关心的是以下几个统计参数。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Com_select</td>
<td>执行 select 操作的次数，一次查询只累加 1。</td>
</tr>
<tr>
<td align="left">Com_insert</td>
<td>执行 INSERT 操作的次数，对于批量插入的 INSERT 操作，只累加一次。</td>
</tr>
<tr>
<td align="left">Com_update</td>
<td>执行 UPDATE 操作的次数。</td>
</tr>
<tr>
<td align="left">Com_delete</td>
<td>执行 DELETE 操作的次数。</td>
</tr>
<tr>
<td align="left">Innodb_rows_read</td>
<td>select 查询返回的行数。</td>
</tr>
<tr>
<td align="left">Innodb_rows_inserted</td>
<td>执行 INSERT 操作插入的行数。</td>
</tr>
<tr>
<td align="left">Innodb_rows_updated</td>
<td>执行 UPDATE 操作更新的行数。</td>
</tr>
<tr>
<td align="left">Innodb_rows_deleted</td>
<td>执行 DELETE 操作删除的行数。</td>
</tr>
<tr>
<td align="left">Connections</td>
<td>试图连接 MySQL 服务器的次数。</td>
</tr>
<tr>
<td align="left">Uptime</td>
<td>服务器工作时间。</td>
</tr>
<tr>
<td align="left">Slow_queries</td>
<td>慢查询的次数。</td>
</tr>
</tbody></table>
<ul>
<li>Com_***    :  这些参数对于所有存储引擎的表操作都会进行累计。</li>
<li>Innodb_*** :  这几个参数只是针对InnoDB 存储引擎的，累加的算法也略有不同。</li>
</ul>
<h2 id="定位低效率执行SQL"><a href="#定位低效率执行SQL" class="headerlink" title="定位低效率执行SQL"></a>定位低效率执行SQL</h2><p>可以通过以下两种方式定位执行效率较低的 SQL 语句。</p>
<ul>
<li>慢查询日志 : 通过慢查询日志定位那些执行效率较低的 SQL 语句，用–log-slow-queries[=file_name]选项启动时，mysqld 写一个包含所有执行时间超过 long_query_time 秒的 SQL 语句的日志文件。具体可以查看本书第 26 章中日志管理的相关部分。</li>
<li>show processlist  : 慢查询日志在查询结束以后才纪录，所以在应用反映执行效率出现问题的时候查询慢查询日志并不能定位问题，可以使用show processlist命令查看当前MySQL在进行的线程，包括线程的状态、是否锁表等，可以实时地查看 SQL 的执行情况，同时对一些锁表操作进行优化。</li>
</ul>
<p><img data-src="1556098544349.png" alt="1556098544349"></p>
<p>1） id列，用户登录mysql时，系统分配的”connection_id”，可以使用函数connection_id()查看</p>
<p>2） user列，显示当前用户。如果不是root，这个命令就只显示用户权限范围的sql语句</p>
<p>3） host列，显示这个语句是从哪个ip的哪个端口上发的，可以用来跟踪出现问题语句的用户</p>
<p>4） db列，显示这个进程目前连接的是哪个数据库</p>
<p>5） command列，显示当前连接的执行的命令，一般取值为休眠（sleep），查询（query），连接（connect）等</p>
<p>6） time列，显示这个状态持续的时间，单位是秒</p>
<p>7） state列，显示使用当前连接的sql语句的状态，很重要的列。state描述的是语句执行中的某一个状态。一个sql语句，以查询为例，可能需要经过copying to tmp table、sorting result、sending data等状态才可以完成</p>
<p>8） info列，显示这个sql语句，是判断问题语句的一个重要依据</p>
<h2 id="explain分析执行计划"><a href="#explain分析执行计划" class="headerlink" title="explain分析执行计划"></a>explain分析执行计划</h2><p>通过以上步骤查询到效率低的 SQL 语句后，可以通过 EXPLAIN或者 DESC命令获取 MySQL如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。</p>
<p>查询SQL语句的执行计划 ： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_item <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1552487489859.png" alt="1552487489859"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_item <span class="keyword">where</span> title <span class="operator">=</span> <span class="string">&#x27;阿尔卡特 (OT-979) 冰川白 联通3G手机3&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1552487526919.png" alt="1552487526919"></p>
<table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。</td>
</tr>
<tr>
<td>select_type</td>
<td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个 SELECT）等</td>
</tr>
<tr>
<td>table</td>
<td>输出结果集的表</td>
</tr>
<tr>
<td>type</td>
<td>表示表的连接类型，性能由好到差的连接类型为( system  —&gt;  const  —–&gt;  eq_ref  ——&gt;  ref  ——-&gt;  ref_or_null—-&gt;  index_merge  —&gt;  index_subquery  —–&gt;  range  —–&gt;  index  ——&gt; all )</td>
</tr>
<tr>
<td>possible_keys</td>
<td>表示查询时，可能使用的索引</td>
</tr>
<tr>
<td>key</td>
<td>表示实际使用的索引</td>
</tr>
<tr>
<td>key_len</td>
<td>索引字段的长度</td>
</tr>
<tr>
<td>rows</td>
<td>扫描行的数量</td>
</tr>
<tr>
<td>extra</td>
<td>执行情况的说明和描述</td>
</tr>
</tbody></table>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><img data-src="1556122799330.png" alt="1556122799330"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_role` (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role_code` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `description` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `unique_role_name` (`role_name`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_user` (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">96</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `unique_user_username` (`username`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> auto_increment ,</span><br><span class="line">  `user_id` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role_id` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `fk_ur_user_id` (`user_id`),</span><br><span class="line">  KEY `fk_ur_role_id` (`role_id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fk_ur_role_id` <span class="keyword">FOREIGN</span> KEY (`role_id`) <span class="keyword">REFERENCES</span> `t_role` (`id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> ACTION <span class="keyword">ON</span> UPDATE <span class="keyword">NO</span> ACTION,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fk_ur_user_id` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `t_user` (`id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> ACTION <span class="keyword">ON</span> UPDATE <span class="keyword">NO</span> ACTION</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `t_user` (`id`, `username`, `password`, `name`) <span class="keyword">values</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;super&#x27;</span>,<span class="string">&#x27;$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#x27;</span>,<span class="string">&#x27;超级管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `t_user` (`id`, `username`, `password`, `name`) <span class="keyword">values</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#x27;</span>,<span class="string">&#x27;系统管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `t_user` (`id`, `username`, `password`, `name`) <span class="keyword">values</span>(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;itcast&#x27;</span>,<span class="string">&#x27;$2a$10$8qmaHgUFUAmPR5pOuWhYWOr291WJYjHelUlYn07k5ELF8ZCrW0Cui&#x27;</span>,<span class="string">&#x27;test02&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `t_user` (`id`, `username`, `password`, `name`) <span class="keyword">values</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;stu1&#x27;</span>,<span class="string">&#x27;$2a$10$pLtt2KDAFpwTWLjNsmTEi.oU1yOZyIn9XkziK/y/spH5rftCpUMZa&#x27;</span>,<span class="string">&#x27;学生1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `t_user` (`id`, `username`, `password`, `name`) <span class="keyword">values</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;stu2&#x27;</span>,<span class="string">&#x27;$2a$10$nxPKkYSez7uz2YQYUnwhR.z57km3yqKn3Hr/p1FR6ZKgc18u.Tvqm&#x27;</span>,<span class="string">&#x27;学生2&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `t_user` (`id`, `username`, `password`, `name`) <span class="keyword">values</span>(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;t1&#x27;</span>,<span class="string">&#x27;$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#x27;</span>,<span class="string">&#x27;老师1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_role` (`id`, `role_name`, `role_code`, `description`) <span class="keyword">VALUES</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;学生&#x27;</span>,<span class="string">&#x27;student&#x27;</span>,<span class="string">&#x27;学生&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_role` (`id`, `role_name`, `role_code`, `description`) <span class="keyword">VALUES</span>(<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;老师&#x27;</span>,<span class="string">&#x27;teacher&#x27;</span>,<span class="string">&#x27;老师&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_role` (`id`, `role_name`, `role_code`, `description`) <span class="keyword">VALUES</span>(<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;教学管理员&#x27;</span>,<span class="string">&#x27;teachmanager&#x27;</span>,<span class="string">&#x27;教学管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_role` (`id`, `role_name`, `role_code`, `description`) <span class="keyword">VALUES</span>(<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;管理员&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_role` (`id`, `role_name`, `role_code`, `description`) <span class="keyword">VALUES</span>(<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;超级管理员&#x27;</span>,<span class="string">&#x27;super&#x27;</span>,<span class="string">&#x27;超级管理员&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_role(id,user_id,role_id) <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;5&#x27;</span>),(<span class="keyword">NULL</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;7&#x27;</span>),(<span class="keyword">NULL</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>),(<span class="keyword">NULL</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;9&#x27;</span>),(<span class="keyword">NULL</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;8&#x27;</span>),(<span class="keyword">NULL</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;10&#x27;</span>) ;</span><br></pre></td></tr></table></figure>

<h3 id="explain-之-id"><a href="#explain-之-id" class="headerlink" title="explain 之 id"></a>explain 之 id</h3><p>id 字段是 select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。id 情况有三种 ： </p>
<p>1） id 相同表示加载表的顺序是从上到下。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_role r, t_user u, user_role ur <span class="keyword">where</span> r.id <span class="operator">=</span> ur.role_id <span class="keyword">and</span> u.id <span class="operator">=</span> ur.user_id ;</span><br></pre></td></tr></table></figure>

<p><img data-src="1556102471304.png" alt="1556102471304"></p>
<p>2） id 不同id值越大，优先级越高，越先被执行。 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_role <span class="keyword">WHERE</span> id <span class="operator">=</span> (<span class="keyword">SELECT</span> role_id <span class="keyword">FROM</span> user_role <span class="keyword">WHERE</span> user_id <span class="operator">=</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> t_user <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;stu1&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><img data-src="1556103009534.png" alt="1556103009534"></p>
<p>3） id 有相同，也有不同，同时存在。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_role r , (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_role ur <span class="keyword">WHERE</span> ur.`user_id` <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>) a <span class="keyword">WHERE</span> r.id <span class="operator">=</span> a.role_id ; </span><br></pre></td></tr></table></figure>

<p><img data-src="1556103294182.png" alt="1556103294182"></p>
<h3 id="explain-之-select-type"><a href="#explain-之-select-type" class="headerlink" title="explain 之 select_type"></a>explain 之 select_type</h3><p>表示 SELECT 的类型，常见的取值，如下表所示：</p>
<table>
<thead>
<tr>
<th>type</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>NULL</td>
<td>MySQL不访问任何表，索引，直接返回结果</td>
</tr>
<tr>
<td>system</td>
<td>表只有一行记录(等于系统表)，这是const类型的特例，一般不会出现</td>
</tr>
<tr>
<td>const</td>
<td>表示通过索引一次就找到了，const 用于比较primary key 或者 unique 索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL 就能将该查询转换为一个常亮。const于将 “主键” 或 “唯一” 索引的所有部分与常量值进行比较</td>
</tr>
<tr>
<td>eq_ref</td>
<td>类似ref，区别在于使用的是唯一索引，使用主键的关联查询，关联查询出的记录只有一条。常见于主键或唯一索引扫描</td>
</tr>
<tr>
<td>ref</td>
<td>非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，返回所有匹配某个单独值的所有行（多个）</td>
</tr>
<tr>
<td>range</td>
<td>只检索给定返回的行，使用一个索引来选择行。 where 之后出现 between ， &lt; , &gt; , in 等操作。</td>
</tr>
<tr>
<td>index</td>
<td>index 与 ALL的区别为  index 类型只是遍历了索引树， 通常比ALL 快， ALL 是遍历数据文件。</td>
</tr>
<tr>
<td>all</td>
<td>将遍历全表以找到匹配的行</td>
</tr>
</tbody></table>
<p>结果值从最好到最坏以此是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">NULL</span> <span class="operator">&gt;</span> <span class="keyword">system</span> <span class="operator">&gt;</span> const <span class="operator">&gt;</span> eq_ref <span class="operator">&gt;</span> <span class="keyword">ref</span> <span class="operator">&gt;</span> fulltext <span class="operator">&gt;</span> ref_or_null <span class="operator">&gt;</span> index_merge <span class="operator">&gt;</span> unique_subquery <span class="operator">&gt;</span> index_subquery <span class="operator">&gt;</span> <span class="keyword">range</span> <span class="operator">&gt;</span> index <span class="operator">&gt;</span> <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">system</span> <span class="operator">&gt;</span> const <span class="operator">&gt;</span> eq_ref <span class="operator">&gt;</span> <span class="keyword">ref</span> <span class="operator">&gt;</span> <span class="keyword">range</span> <span class="operator">&gt;</span> index <span class="operator">&gt;</span> <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure>

<p>一般来说， 我们需要保证查询至少达到 range 级别， 最好达到ref </p>
<h3 id="explain-之-key"><a href="#explain-之-key" class="headerlink" title="explain 之  key"></a>explain 之  key</h3><ul>
<li>possible_keys : 显示可能应用在这张表的索引， 一个或多个。 </li>
<li>key ： 实际使用的索引， 如果为NULL， 则没有使用索引。</li>
<li>key_len : 表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下， 长度越短越好 。</li>
</ul>
<h3 id="explain-之-rows"><a href="#explain-之-rows" class="headerlink" title="explain 之 rows"></a>explain 之 rows</h3><p>扫描行的数量。</p>
<h3 id="explain-之-extra"><a href="#explain-之-extra" class="headerlink" title="explain 之 extra"></a>explain 之 extra</h3><p>其他的额外的执行计划信息，在该列展示 。</p>
<table>
<thead>
<tr>
<th>extra</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>using  filesort</td>
<td>说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取， 称为 “文件排序”, 效率低。</td>
</tr>
<tr>
<td>using  temporary</td>
<td>使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于 order by 和 group by； 效率低</td>
</tr>
<tr>
<td>using  index</td>
<td>表示相应的select操作使用了覆盖索引， 避免访问表的数据行， 效率不错。</td>
</tr>
</tbody></table>
<h2 id="show-profile分析SQL"><a href="#show-profile分析SQL" class="headerlink" title="show profile分析SQL"></a>show profile分析SQL</h2><p>Mysql从5.0.37版本开始增加了对 show profiles 和 show profile 语句的支持。show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。</p>
<p>通过 have_profiling 参数，能够看到当前MySQL是否支持profile：</p>
<p><img data-src="1552488401999.png" alt="1552488401999"> </p>
<p>默认profiling是关闭的，可以通过set语句在Session级别开启profiling：</p>
<p><img data-src="1552488372405.png" alt="1552488372405"> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> profiling<span class="operator">=</span><span class="number">1</span>; <span class="operator">/</span><span class="operator">/</span>开启profiling 开关；</span><br></pre></td></tr></table></figure>

<p>通过profile，我们能够更清楚地了解SQL执行的过程。</p>
<p>首先，我们可以执行一系列的操作，如下图所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line">use db01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_item <span class="keyword">where</span> id <span class="operator">&lt;</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_item;</span><br></pre></td></tr></table></figure>

<p>执行完上述命令之后，再执行show profiles 指令， 来查看SQL语句执行的耗时：</p>
<p><img data-src="1552489017940.png" alt="1552489017940">  </p>
<p>通过show  profile for  query  query_id 语句可以查看到该SQL执行过程中每个线程的状态和消耗的时间：</p>
<p><img data-src="1552489053763.png" alt="1552489053763"> </p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">TIP ：</span><br><span class="line">    Sending data 状态表示MySQL线程开始访问数据行并把结果返回给客户端，而不仅仅是返回个客户端。由于在Sending data状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整各查询中耗时最长的状态。</span><br></pre></td></tr></table></figure>

<p>在获取到最消耗时间的线程状态后，MySQL支持进一步选择all、cpu、block io 、context switch、page faults等明细类型类查看MySQL在使用什么资源上耗费了过高的时间。例如，选择查看CPU的耗费时间  ：</p>
<p><img data-src="1552489671119.png" alt="1552489671119"> </p>
<table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Status</td>
<td>sql 语句执行的状态</td>
</tr>
<tr>
<td>Duration</td>
<td>sql 执行过程中每一个步骤的耗时</td>
</tr>
<tr>
<td>CPU_user</td>
<td>当前用户占有的cpu</td>
</tr>
<tr>
<td>CPU_system</td>
<td>系统占有的cpu</td>
</tr>
</tbody></table>
<h2 id="trace分析优化器执行计划"><a href="#trace分析优化器执行计划" class="headerlink" title="trace分析优化器执行计划"></a>trace分析优化器执行计划</h2><p>MySQL5.6提供了对SQL的跟踪trace, 通过trace文件能够进一步了解为什么优化器选择A计划, 而不是选择B计划。</p>
<p>打开trace ， 设置格式为 JSON，并设置trace最大能够使用的内存大小，避免解析过程中因为默认内存过小而不能够完整展示。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> optimizer_trace<span class="operator">=</span>&quot;enabled=on&quot;,end_markers_in_json<span class="operator">=</span><span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">set</span> optimizer_trace_max_mem_size<span class="operator">=</span><span class="number">1000000</span>;</span><br></pre></td></tr></table></figure>

<p>执行SQL语句 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_item <span class="keyword">where</span> id <span class="operator">&lt;</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure>

<p>最后， 检查information_schema.optimizer_trace就可以知道MySQL是如何执行SQL的 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">QUERY: select * from tb_item where id &lt; 4</span><br><span class="line">TRACE: &#123;</span><br><span class="line">  &quot;steps&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;join_preparation&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;select#&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;steps&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;expanded_query&quot;</span>: <span class="string">&quot;/* select#1 */ select `tb_item`.`id` AS `id`,`tb_item`.`title` AS `title`,`tb_item`.`price` AS `price`,`tb_item`.`num` AS `num`,`tb_item`.`categoryid` AS `categoryid`,`tb_item`.`status` AS `status`,`tb_item`.`sellerid` AS `sellerid`,`tb_item`.`createtime` AS `createtime`,`tb_item`.`updatetime` AS `updatetime` from `tb_item` where (`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ] <span class="comment">/* steps */</span></span><br><span class="line">      &#125; <span class="comment">/* join_preparation */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;join_optimization&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;select#&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;steps&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;condition_processing&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;condition&quot;</span>: <span class="string">&quot;WHERE&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;original_condition&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;steps&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">&quot;transformation&quot;</span>: <span class="string">&quot;equality_propagation&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;resulting_condition&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">&quot;transformation&quot;</span>: <span class="string">&quot;constant_propagation&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;resulting_condition&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">&quot;transformation&quot;</span>: <span class="string">&quot;trivial_condition_removal&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;resulting_condition&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              ] <span class="comment">/* steps */</span></span><br><span class="line">            &#125; <span class="comment">/* condition_processing */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;table_dependencies&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;`tb_item`&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;row_may_be_null&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">&quot;map_bit&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;depends_on_map_bits&quot;</span>: [</span><br><span class="line">                ] <span class="comment">/* depends_on_map_bits */</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* table_dependencies */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;ref_optimizer_key_uses&quot;</span>: [</span><br><span class="line">            ] <span class="comment">/* ref_optimizer_key_uses */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;rows_estimation&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;`tb_item`&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;range_analysis&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;table_scan&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;rows&quot;</span>: <span class="number">9816098</span>,</span><br><span class="line">                    <span class="attr">&quot;cost&quot;</span>: <span class="number">2.04e6</span></span><br><span class="line">                  &#125; <span class="comment">/* table_scan */</span>,</span><br><span class="line">                  <span class="attr">&quot;potential_range_indices&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;PRIMARY&quot;</span>,</span><br><span class="line">                      <span class="attr">&quot;usable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                      <span class="attr">&quot;key_parts&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;id&quot;</span></span><br><span class="line">                      ] <span class="comment">/* key_parts */</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ] <span class="comment">/* potential_range_indices */</span>,</span><br><span class="line">                  <span class="attr">&quot;setup_range_conditions&quot;</span>: [</span><br><span class="line">                  ] <span class="comment">/* setup_range_conditions */</span>,</span><br><span class="line">                  <span class="attr">&quot;group_index_range&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;chosen&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">&quot;cause&quot;</span>: <span class="string">&quot;not_group_by_or_distinct&quot;</span></span><br><span class="line">                  &#125; <span class="comment">/* group_index_range */</span>,</span><br><span class="line">                  <span class="attr">&quot;analyzing_range_alternatives&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;range_scan_alternatives&quot;</span>: [</span><br><span class="line">                      &#123;</span><br><span class="line">                        <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;PRIMARY&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;ranges&quot;</span>: [</span><br><span class="line">                          <span class="string">&quot;id &lt; 4&quot;</span></span><br><span class="line">                        ] <span class="comment">/* ranges */</span>,</span><br><span class="line">                        <span class="attr">&quot;index_dives_for_eq_ranges&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">&quot;rowid_ordered&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">&quot;using_mrr&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                        <span class="attr">&quot;index_only&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                        <span class="attr">&quot;rows&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                        <span class="attr">&quot;cost&quot;</span>: <span class="number">1.6154</span>,</span><br><span class="line">                        <span class="attr">&quot;chosen&quot;</span>: <span class="literal">true</span></span><br><span class="line">                      &#125;</span><br><span class="line">                    ] <span class="comment">/* range_scan_alternatives */</span>,</span><br><span class="line">                    <span class="attr">&quot;analyzing_roworder_intersect&quot;</span>: &#123;</span><br><span class="line">                      <span class="attr">&quot;usable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                      <span class="attr">&quot;cause&quot;</span>: <span class="string">&quot;too_few_roworder_scans&quot;</span></span><br><span class="line">                    &#125; <span class="comment">/* analyzing_roworder_intersect */</span></span><br><span class="line">                  &#125; <span class="comment">/* analyzing_range_alternatives */</span>,</span><br><span class="line">                  <span class="attr">&quot;chosen_range_access_summary&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;range_access_plan&quot;</span>: &#123;</span><br><span class="line">                      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;range_scan&quot;</span>,</span><br><span class="line">                      <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;PRIMARY&quot;</span>,</span><br><span class="line">                      <span class="attr">&quot;rows&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                      <span class="attr">&quot;ranges&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;id &lt; 4&quot;</span></span><br><span class="line">                      ] <span class="comment">/* ranges */</span></span><br><span class="line">                    &#125; <span class="comment">/* range_access_plan */</span>,</span><br><span class="line">                    <span class="attr">&quot;rows_for_plan&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="attr">&quot;cost_for_plan&quot;</span>: <span class="number">1.6154</span>,</span><br><span class="line">                    <span class="attr">&quot;chosen&quot;</span>: <span class="literal">true</span></span><br><span class="line">                  &#125; <span class="comment">/* chosen_range_access_summary */</span></span><br><span class="line">                &#125; <span class="comment">/* range_analysis */</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* rows_estimation */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;considered_execution_plans&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;plan_prefix&quot;</span>: [</span><br><span class="line">                ] <span class="comment">/* plan_prefix */</span>,</span><br><span class="line">                <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;`tb_item`&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;best_access_path&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;considered_access_paths&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">&quot;access_type&quot;</span>: <span class="string">&quot;range&quot;</span>,</span><br><span class="line">                      <span class="attr">&quot;rows&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                      <span class="attr">&quot;cost&quot;</span>: <span class="number">2.2154</span>,</span><br><span class="line">                      <span class="attr">&quot;chosen&quot;</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ] <span class="comment">/* considered_access_paths */</span></span><br><span class="line">                &#125; <span class="comment">/* best_access_path */</span>,</span><br><span class="line">                <span class="attr">&quot;cost_for_plan&quot;</span>: <span class="number">2.2154</span>,</span><br><span class="line">                <span class="attr">&quot;rows_for_plan&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">&quot;chosen&quot;</span>: <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* considered_execution_plans */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;attaching_conditions_to_tables&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;original_condition&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;attached_conditions_computation&quot;</span>: [</span><br><span class="line">              ] <span class="comment">/* attached_conditions_computation */</span>,</span><br><span class="line">              <span class="attr">&quot;attached_conditions_summary&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;`tb_item`&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;attached&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              ] <span class="comment">/* attached_conditions_summary */</span></span><br><span class="line">            &#125; <span class="comment">/* attaching_conditions_to_tables */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;refine_plan&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;`tb_item`&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;access_type&quot;</span>: <span class="string">&quot;range&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* refine_plan */</span></span><br><span class="line">          &#125;</span><br><span class="line">        ] <span class="comment">/* steps */</span></span><br><span class="line">      &#125; <span class="comment">/* join_optimization */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;join_execution&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;select#&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;steps&quot;</span>: [</span><br><span class="line">        ] <span class="comment">/* steps */</span></span><br><span class="line">      &#125; <span class="comment">/* join_execution */</span></span><br><span class="line">    &#125;</span><br><span class="line">  ] /* steps */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h1><p>索引是数据库优化最常用也是最重要的手段之一, 通过索引通常可以帮助用户解决大多数的MySQL的性能优化问题。</p>
<h2 id="验证索引提升查询效率"><a href="#验证索引提升查询效率" class="headerlink" title="验证索引提升查询效率"></a>验证索引提升查询效率</h2><p>在我们准备的表结构tb_item 中， 一共存储了 300 万记录；</p>
<p>1). 根据ID查询 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_item <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1999</span>\G;</span><br></pre></td></tr></table></figure>

<p><img data-src="1553261992653.png" alt="1553261992653"></p>
<p>查询速度很快， 接近0s ， 主要的原因是因为id为主键， 有索引；</p>
<p><img data-src="1553262044466.png" alt="1553262044466"></p>
<p>2). 根据 title 进行精确查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_item <span class="keyword">where</span> title <span class="operator">=</span> <span class="string">&#x27;iphoneX 移动3G 32G941&#x27;</span>\G; </span><br></pre></td></tr></table></figure>

<p><img data-src="1553262215900.png" alt="1553262215900"></p>
<p>查看SQL语句的执行计划 ： </p>
<p><img data-src="1553262469785.png" alt="1553262469785"></p>
<p>处理方案 ， 针对title字段， 创建索引 ： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_item_title <span class="keyword">on</span> tb_item(title);</span><br></pre></td></tr></table></figure>

<p><img data-src="1553263229523.png" alt="1553263229523"></p>
<p>索引创建完成之后，再次进行查询 ： </p>
<p><img data-src="1553263302706.png" alt="1553263302706"></p>
<p>通过explain ， 查看执行计划，执行SQL时使用了刚才创建的索引 </p>
<p><img data-src="1553263355262.png" alt="1553263355262"></p>
<h2 id="索引的使用-1"><a href="#索引的使用-1" class="headerlink" title="索引的使用"></a>索引的使用</h2><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `tb_seller` (</span><br><span class="line">    `sellerid` <span class="type">varchar</span> (<span class="number">100</span>),</span><br><span class="line">    `name` <span class="type">varchar</span> (<span class="number">100</span>),</span><br><span class="line">    `nickname` <span class="type">varchar</span> (<span class="number">50</span>),</span><br><span class="line">    `password` <span class="type">varchar</span> (<span class="number">60</span>),</span><br><span class="line">    `status` <span class="type">varchar</span> (<span class="number">1</span>),</span><br><span class="line">    `address` <span class="type">varchar</span> (<span class="number">100</span>),</span><br><span class="line">    `createtime` datetime,</span><br><span class="line">    <span class="keyword">primary</span> key(`sellerid`)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4; </span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;alibaba&#x27;</span>,<span class="string">&#x27;阿里巴巴&#x27;</span>,<span class="string">&#x27;阿里小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;baidu&#x27;</span>,<span class="string">&#x27;百度科技有限公司&#x27;</span>,<span class="string">&#x27;百度小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;huawei&#x27;</span>,<span class="string">&#x27;华为科技有限公司&#x27;</span>,<span class="string">&#x27;华为小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;itcast&#x27;</span>,<span class="string">&#x27;传智播客教育科技有限公司&#x27;</span>,<span class="string">&#x27;传智播客&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;itheima&#x27;</span>,<span class="string">&#x27;黑马程序员&#x27;</span>,<span class="string">&#x27;黑马程序员&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;luoji&#x27;</span>,<span class="string">&#x27;罗技科技有限公司&#x27;</span>,<span class="string">&#x27;罗技小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;oppo&#x27;</span>,<span class="string">&#x27;OPPO科技有限公司&#x27;</span>,<span class="string">&#x27;OPPO官方旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;ourpalm&#x27;</span>,<span class="string">&#x27;掌趣科技股份有限公司&#x27;</span>,<span class="string">&#x27;掌趣小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;qiandu&#x27;</span>,<span class="string">&#x27;千度科技&#x27;</span>,<span class="string">&#x27;千度小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;sina&#x27;</span>,<span class="string">&#x27;新浪科技有限公司&#x27;</span>,<span class="string">&#x27;新浪官方旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;xiaomi&#x27;</span>,<span class="string">&#x27;小米科技&#x27;</span>,<span class="string">&#x27;小米官方旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;西安市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;yijia&#x27;</span>,<span class="string">&#x27;宜家家居&#x27;</span>,<span class="string">&#x27;宜家家居旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index idx_seller_name_sta_addr <span class="keyword">on</span> tb_seller(name,status,address);</span><br></pre></td></tr></table></figure>

<h3 id="避免索引失效"><a href="#避免索引失效" class="headerlink" title="避免索引失效"></a>避免索引失效</h3><p>1).  全值匹配 ，对索引中所有列都指定具体值。</p>
<p>此情况下，索引生效，执行效率高。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_seller <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;小米科技&#x27;</span> <span class="keyword">and</span> status<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> address<span class="operator">=</span><span class="string">&#x27;北京市&#x27;</span>\G;</span><br></pre></td></tr></table></figure>

<p><img data-src="1556170997921.png" alt="1556170997921"></p>
<p>2). 最左前缀法则</p>
<p>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。<br>匹配最左前缀法则，走索引：</p>
<p><img data-src="1556171348995.png" alt="1556171348995"></p>
<p>违法最左前缀法则 ， 索引失效：</p>
<p><img data-src="1556171428140.png" alt="1556171428140"></p>
<p>如果符合最左法则，但是出现跳跃某一列，只有最左列索引生效：</p>
<p><img data-src="1556171662203.png" alt="1556171662203"></p>
<p>3). 范围查询右边的列，不能使用索引 。</p>
<p><img data-src="1556172256791.png" alt="1556172256791"></p>
<p>根据前面的两个字段name ， status 查询是走索引的， 但是最后一个条件address 没有用到索引。</p>
<p>4). 不要在索引列上进行运算操作， 索引将失效。</p>
<p><img data-src="1556172813715.png" alt="1556172813715"></p>
<p>5). 字符串不加单引号，造成索引失效。</p>
<p><img data-src="1556172967493.png" alt="1556172967493"></p>
<p>由于，在查询是，没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。</p>
<p>6). 尽量使用覆盖索引，避免select *</p>
<p>尽量使用覆盖索引（只访问索引的查询（索引列完全包含查询列）），减少select * 。</p>
<p><img data-src="1556173928299.png" alt="1556173928299"></p>
<p>如果查询列，超出索引列，也会降低性能。</p>
<p><img data-src="assets/1556173986068.png" alt="1556173986068"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">TIP : </span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> index ：使用覆盖索引的时候就会出现</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">where</span>：在查找使用索引的情况下，需要回表去查询所需的数据</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> index <span class="keyword">condition</span>：查找使用了索引，但是需要回表查询数据</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> index ; <span class="keyword">using</span> <span class="keyword">where</span>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</span><br></pre></td></tr></table></figure>

<p>7). 用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</p>
<p>示例，name字段是索引列 ， 而createtime不是索引列，中间是or进行连接是不走索引的 ： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_seller <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;黑马程序员&#x27;</span> <span class="keyword">or</span> createtime <span class="operator">=</span> <span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>\G;    </span><br></pre></td></tr></table></figure>

<p><img data-src="1556174994440.png" alt="1556174994440"></p>
<p>8).  以%开头的Like模糊查询，索引失效。</p>
<p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p>
<p><img data-src="1556175114369.png" alt="1556175114369"></p>
<p>解决方案 ： </p>
<p>通过覆盖索引来解决 </p>
<p><img data-src="1556247686483.png" alt="1556247686483"></p>
<p>9). 如果MySQL评估使用索引比全表更慢，则不使用索引。</p>
<p><img data-src="1556175445210.png" alt="1556175445210"></p>
<p>10). is  NULL ， is NOT NULL  有时索引失效。</p>
<p><img data-src="1556180634889.png" alt="1556180634889"></p>
<p>11). in 走索引， not in 索引失效。注：这条有争议</p>
<p><img data-src="1556249602732.png" alt="1556249602732"></p>
<p>12). 单列索引和复合索引。</p>
<p>尽量使用复合索引，而少使用单列索引 。</p>
<p>创建复合索引 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_name_sta_address <span class="keyword">on</span> tb_seller(name, status, address);</span><br><span class="line"></span><br><span class="line">就相当于创建了三个索引 ： </span><br><span class="line">    name</span><br><span class="line">    name <span class="operator">+</span> status</span><br><span class="line">    name <span class="operator">+</span> status <span class="operator">+</span> address</span><br></pre></td></tr></table></figure>

<p>创建单列索引 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_seller_name <span class="keyword">on</span> tb_seller(name);</span><br><span class="line"><span class="keyword">create</span> index idx_seller_status <span class="keyword">on</span> tb_seller(status);</span><br><span class="line"><span class="keyword">create</span> index idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br></pre></td></tr></table></figure>

<p>数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部索引 。</p>
<h2 id="查看索引使用情况"><a href="#查看索引使用情况" class="headerlink" title="查看索引使用情况"></a>查看索引使用情况</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;Handler_read%&#x27;</span>;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;Handler_read%&#x27;</span>;    </span><br></pre></td></tr></table></figure>

<p><img data-src="1552885364563.png" alt="1552885364563"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Handler_read_first：索引中第一条被读的次数。如果较高，表示服务器正执行大量全索引扫描（这个值越低越好）。</span><br><span class="line"></span><br><span class="line">Handler_read_key：如果索引正在工作，这个值代表一个行被索引值读的次数，如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）。</span><br><span class="line"></span><br><span class="line">Handler_read_next ：按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。</span><br><span class="line"></span><br><span class="line">Handler_read_prev：按照键顺序读前一行的请求数。该读方法主要用于优化<span class="keyword">ORDER</span> <span class="keyword">BY</span> ... <span class="keyword">DESC</span>。</span><br><span class="line"></span><br><span class="line">Handler_read_rnd ：根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救。</span><br><span class="line"></span><br><span class="line">Handler_read_rnd_next：在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。</span><br></pre></td></tr></table></figure>

<h1 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h1><h2 id="大批量插入数据"><a href="#大批量插入数据" class="headerlink" title="大批量插入数据"></a>大批量插入数据</h2><p>环境准备：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user_2` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">96</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `birthday` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sex` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `phone` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `qq` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `status` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户状态&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `unique_user_username` (`username`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ;</span><br></pre></td></tr></table></figure>

<p>当使用load 命令导入数据的时候，适当的设置可以提高导入的效率。</p>
<p><img data-src="1556269346488.png" alt="1556269346488"></p>
<p>对于 InnoDB 类型的表，有以下几种方式可以提高导入的效率：</p>
<p>1） 主键顺序插入<br>因为InnoDB类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率。</p>
<p>脚本文件介绍 :<br>    sql1.log  —-&gt; 主键有序<br>    sql2.log  —-&gt; 主键无序</p>
<p>插入ID顺序排列数据：</p>
<p><img data-src="1555771750567.png" alt="1555771750567"></p>
<p>插入ID无序排列数据：</p>
<p><img data-src="1555771959734.png" alt="1555771959734"></p>
<p>2） 关闭唯一性校验<br>在导入数据前执行 SET UNIQUE_CHECKS=0，关闭唯一性校验，在导入结束后执行SET UNIQUE_CHECKS=1，恢复唯一性校验，可以提高导入的效率。</p>
<p><img data-src="1555772132736.png" alt="1555772132736"></p>
<p>3） 手动提交事务<br>如果应用使用自动提交的方式，建议在导入前执行 SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行 SET AUTOCOMMIT=1，打开自动提交，也可以提高导入的效率。</p>
<h2 id="优化insert语句"><a href="#优化insert语句" class="headerlink" title="优化insert语句"></a>优化insert语句</h2><p>当进行数据的insert操作的时候，可以考虑采用以下几种优化方案。</p>
<ol>
<li>如果需要同时对一张表插入很多行数据时，应该尽量使用多个值表的insert语句，这种方式将大大的缩减客户端与数据库之间的连接、关闭等消耗。使得效率比分开执行的单个insert语句快。</li>
</ol>
<p>示例， 原始方式为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>优化后的方案为 ： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>)，(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在事务中进行数据插入。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>数据有序插入</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;Tim&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;Rose&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>优化后</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;Tim&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;Rose&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="优化order-by语句"><a href="#优化order-by语句" class="headerlink" title="优化order by语句"></a>优化order by语句</h2><p>环境准备</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `emp` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `salary` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB  <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;2300&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;30&#x27;</span>,<span class="string">&#x27;3500&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;Luci&#x27;</span>,<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;2800&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;Jay&#x27;</span>,<span class="string">&#x27;36&#x27;</span>,<span class="string">&#x27;3500&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;Tom2&#x27;</span>,<span class="string">&#x27;21&#x27;</span>,<span class="string">&#x27;2200&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;Jerry2&#x27;</span>,<span class="string">&#x27;31&#x27;</span>,<span class="string">&#x27;3300&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;Luci2&#x27;</span>,<span class="string">&#x27;26&#x27;</span>,<span class="string">&#x27;2700&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;Jay2&#x27;</span>,<span class="string">&#x27;33&#x27;</span>,<span class="string">&#x27;3500&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;Tom3&#x27;</span>,<span class="string">&#x27;23&#x27;</span>,<span class="string">&#x27;2400&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;Jerry3&#x27;</span>,<span class="string">&#x27;32&#x27;</span>,<span class="string">&#x27;3100&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;11&#x27;</span>,<span class="string">&#x27;Luci3&#x27;</span>,<span class="string">&#x27;26&#x27;</span>,<span class="string">&#x27;2900&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;12&#x27;</span>,<span class="string">&#x27;Jay3&#x27;</span>,<span class="string">&#x27;37&#x27;</span>,<span class="string">&#x27;4500&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index idx_emp_age_salary <span class="keyword">on</span> emp(age,salary);</span><br></pre></td></tr></table></figure>

<h3 id="两种排序方式"><a href="#两种排序方式" class="headerlink" title="两种排序方式"></a>两种排序方式</h3><p>1). 第一种是通过对返回数据进行排序，也就是通常说的 filesort 排序，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</p>
<p><img data-src="1556335817763.png" alt="1556335817763"></p>
<p>2). 第二种通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。</p>
<p><img data-src="1556335866539.png" alt="1556335866539"></p>
<p>多字段排序</p>
<p><img data-src="1556336352061.png" alt="1556336352061"></p>
<p>了解了MySQL的排序方式，优化目标就清晰了：尽量减少额外的排序，通过索引直接返回有序数据。where 条件和Order by 使用相同的索引，并且Order By 的顺序和索引顺序相同， 并且Order  by 的字段都是升序，或者都是降序。否则肯定需要额外的操作，这样就会出现FileSort。</p>
<h3 id="Filesort-的优化"><a href="#Filesort-的优化" class="headerlink" title="Filesort 的优化"></a>Filesort 的优化</h3><p>通过创建合适的索引，能够减少 Filesort 的出现，但是在某些情况下，条件限制不能让Filesort消失，那就需要加快 Filesort的排序操作。对于Filesort ， MySQL 有两种排序算法：</p>
<p>1） 两次扫描算法 ：MySQL4.1 之前，使用该方式排序。首先根据条件取出排序字段和行指针信息，然后在排序区 sort buffer 中排序，如果sort buffer不够，则在临时表 temporary table 中存储排序结果。完成排序之后，再根据行指针回表读取记录，该操作可能会导致大量随机I/O操作。</p>
<p>2）一次扫描算法：一次性取出满足条件的所有字段，然后在排序区 sort  buffer 中排序后直接输出结果集。排序时内存开销较大，但是排序效率比两次扫描算法要高。</p>
<p>MySQL 通过比较系统变量 max_length_for_sort_data 的大小和Query语句取出的字段总大小， 来判定是否那种排序算法，如果max_length_for_sort_data 更大，那么使用第二种优化之后的算法；否则使用第一种。</p>
<p>可以适当提高 sort_buffer_size  和 max_length_for_sort_data  系统变量，来增大排序区的大小，提高排序的效率。</p>
<p><img data-src="1556338367593.png" alt="1556338367593"></p>
<h3 id="优化group-by-语句"><a href="#优化group-by-语句" class="headerlink" title="优化group by 语句"></a>优化group by 语句</h3><p>由于GROUP BY 实际上也同样会进行排序操作，而且与ORDER BY 相比，GROUP BY 主要只是多了排序之后的分组操作。当然，如果在分组的时候还使用了其他的一些聚合函数，那么还需要一些聚合函数的计算。所以，在GROUP BY 的实现过程中，与 ORDER BY 一样也可以利用到索引。</p>
<p>如果查询包含 group by 但是用户想要避免排序结果的消耗， 则可以执行order by null 禁止排序。如下 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> index idx_emp_age_salary <span class="keyword">on</span> emp;</span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> age,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure>

<p><img data-src="1556339573979.png" alt="1556339573979"></p>
<p>优化后</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> age,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>从上面的例子可以看出，第一个SQL语句需要进行”filesort”，而第二个SQL由于order  by  null 不需要进行 “filesort”， 而上文提过Filesort往往非常耗费时间。</p>
<p>创建索引 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_emp_age_salary <span class="keyword">on</span> emp(age,salary)；</span><br></pre></td></tr></table></figure>

<p><img data-src="1556339688158.png" alt="1556339688158"></p>
<h2 id="优化嵌套查询"><a href="#优化嵌套查询" class="headerlink" title="优化嵌套查询"></a>优化嵌套查询</h2><p>Mysql4.1版本之后，开始支持SQL的子查询。这个技术可以使用SELECT语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询是可以被更高效的连接（JOIN）替代。</p>
<p>示例 ，查找有角色的所有的用户信息 : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="keyword">select</span> user_id <span class="keyword">from</span> user_role );</span><br></pre></td></tr></table></figure>

<p>执行计划为 : </p>
<p><img data-src="1556359399199.png" alt="1556359399199"></p>
<p>优化后 :</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user u , user_role ur <span class="keyword">where</span> u.id <span class="operator">=</span> ur.user_id;</span><br></pre></td></tr></table></figure>

<p><img data-src="1556359482142.png" alt="1556359482142"></p>
<p>连接(Join)查询之所以更有效率一些 ，是因为MySQL不需要在内存中创建临时表来完成这个逻辑上需要两个步骤的查询工作。</p>
<h2 id="优化OR条件"><a href="#优化OR条件" class="headerlink" title="优化OR条件"></a>优化OR条件</h2><p>对于包含OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引 ， 而且不能使用到复合索引； 如果没有索引，则应该考虑增加索引。</p>
<p>获取 emp 表中的所有的索引 ： </p>
<p><img data-src="1556354464657.png" alt="1556354464657"></p>
<p>示例 ： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1556354887509.png" alt="1556354887509"></p>
<p><img data-src="1556354920964.png" alt="1556354920964"></p>
<p>建议使用 union 替换 or ： </p>
<p><img data-src="1556355027728.png" alt="1556355027728"></p>
<p>我们来比较下重要指标，发现主要差别是 type 和 ref 这两项</p>
<p>type 显示的是访问类型，是较为重要的一个指标，结果值从好到坏依次是：</p>
<p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null  &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p>
<p>UNION 语句的 type 值为 ref，OR 语句的 type 值为 range，可以看到这是一个很明显的差距<br>UNION 语句的 ref 值为 const，OR 语句的 type 值为 null，const 表示是常量值引用，非常快</p>
<p>这两项的差距就说明了 UNION 要优于 OR 。</p>
<h2 id="优化分页查询"><a href="#优化分页查询" class="headerlink" title="优化分页查询"></a>优化分页查询</h2><p>一般分页查询时，通过创建覆盖索引能够比较好地提高性能。一个常见又非常头疼的问题就是 limit 2000000,10  ，此时需要MySQL排序前2000010 记录，仅仅返回2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大 。</p>
<p><img data-src="1556361314783.png" alt="1556361314783"></p>
<h3 id="优化思路一"><a href="#优化思路一" class="headerlink" title="优化思路一"></a>优化思路一</h3><p>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。</p>
<p><img data-src="1556416102800.png" alt="1556416102800"></p>
<h3 id="优化思路二"><a href="#优化思路二" class="headerlink" title="优化思路二"></a>优化思路二</h3><p>该方案适用于主键自增的表，可以把Limit 查询转换成某个位置的查询 。</p>
<p><img data-src="1556363928151.png" alt="1556363928151"></p>
<h2 id="使用SQL提示"><a href="#使用SQL提示" class="headerlink" title="使用SQL提示"></a>使用SQL提示</h2><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p>
<h3 id="USE-INDEX"><a href="#USE-INDEX" class="headerlink" title="USE INDEX"></a>USE INDEX</h3><p>在查询语句中表名的后面，添加 use index 来提供希望MySQL去参考的索引列表，就可以让MySQL不再考虑其他可用的索引。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_seller_name <span class="keyword">on</span> tb_seller(name);</span><br></pre></td></tr></table></figure>

<p><img data-src="1556370971576.png" alt="1556370971576"></p>
<h3 id="IGNORE-INDEX"><a href="#IGNORE-INDEX" class="headerlink" title="IGNORE INDEX"></a>IGNORE INDEX</h3><p>如果用户只是单纯的想让MySQL忽略一个或者多个索引，则可以使用 ignore index 作为 hint 。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_seller ignore index(idx_seller_name) <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;小米科技&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1556371004594.png" alt="1556371004594"></p>
<h3 id="FORCE-INDEX"><a href="#FORCE-INDEX" class="headerlink" title="FORCE INDEX"></a>FORCE INDEX</h3><p>为强制MySQL使用一个特定的索引，可在查询中使用 force index 作为hint 。 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br></pre></td></tr></table></figure>

<p><img data-src="1556371355788.png" alt="1556371355788"></p>
<h1 id="应用优化"><a href="#应用优化" class="headerlink" title="应用优化"></a>应用优化</h1><p>前面章节，我们介绍了很多数据库的优化措施。但是在实际生产环境中，由于数据库本身的性能局限，就必须要对前台的应用进行一些优化，来降低数据库的访问压力。</p>
<h2 id="使用连接池"><a href="#使用连接池" class="headerlink" title="使用连接池"></a>使用连接池</h2><p>对于访问数据库来说，建立连接的代价是比较昂贵的，因为我们频繁的创建关闭连接，是比较耗费资源的，我们有必要建立 数据库连接池，以提高访问的性能。</p>
<h2 id="减少对MySQL的访问"><a href="#减少对MySQL的访问" class="headerlink" title="减少对MySQL的访问"></a>减少对MySQL的访问</h2><h3 id="避免对数据进行重复检索"><a href="#避免对数据进行重复检索" class="headerlink" title="避免对数据进行重复检索"></a>避免对数据进行重复检索</h3><p>在编写应用代码时，需要能够理清对数据库的访问逻辑。能够一次连接就获取到结果的，就不用两次连接，这样可以大大减少对数据库无用的重复请求。</p>
<p>比如 ，需要获取书籍的id 和name字段 ， 则查询如下： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id , name from tb_book;</span><br></pre></td></tr></table></figure>

<p>之后，在业务逻辑中有需要获取到书籍状态信息， 则查询如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id , status from tb_book;</span><br></pre></td></tr></table></figure>

<p>这样，就需要向数据库提交两次请求，数据库就要做两次查询操作。其实完全可以用一条SQL语句得到想要的结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id, name , status from tb_book;</span><br></pre></td></tr></table></figure>

<h3 id="增加cache层"><a href="#增加cache层" class="headerlink" title="增加cache层"></a>增加cache层</h3><p>在应用中，我们可以在应用中增加 缓存 层来达到减轻数据库负担的目的。缓存层有很多种，也有很多实现方式，只要能达到降低数据库的负担又能满足应用需求就可以。</p>
<p>因此可以部分数据从数据库中抽取出来放到应用端以文本方式存储， 或者使用框架(Mybatis, Hibernate)提供的一级缓存/二级缓存，或者使用redis数据库来缓存数据 。</p>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>负载均衡是应用中使用非常普遍的一种优化方法，它的机制就是利用某种均衡算法，将固定的负载量分布到不同的服务器上， 以此来降低单台服务器的负载，达到优化的效果。</p>
<h3 id="利用MySQL复制分流查询"><a href="#利用MySQL复制分流查询" class="headerlink" title="利用MySQL复制分流查询"></a>利用MySQL复制分流查询</h3><p>通过MySQL的主从复制，实现读写分离，使增删改操作走主节点，查询操作走从节点，从而可以降低单台服务器的读写压力。</p>
<p><img data-src="1.jpg" alt="1"></p>
<h3 id="采用分布式数据库架构"><a href="#采用分布式数据库架构" class="headerlink" title="采用分布式数据库架构"></a>采用分布式数据库架构</h3><p>分布式数据库架构适合大数据量、负载高的情况，它有良好的拓展性和高可用性。通过在多台服务器之间分布数据，可以实现在多台服务器之间的负载均衡，提高访问效率。</p>
<h1 id="Mysql中查询缓存优化"><a href="#Mysql中查询缓存优化" class="headerlink" title="Mysql中查询缓存优化"></a>Mysql中查询缓存优化</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>开启Mysql的查询缓存，当执行完全相同的SQL语句的时候，服务器就会直接从缓存中读取结果，当数据被修改，之前的缓存会失效，修改比较频繁的表不适合做查询缓存。</p>
<h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><p><img data-src="20180919131632347.png" alt="20180919131632347"></p>
<ol>
<li>客户端发送一条查询给服务器；</li>
<li>服务器先会检查查询缓存，如果命中了缓存，则立即返回存储在缓存中的结果。否则进入下一阶段；</li>
<li>服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划；</li>
<li>MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询；</li>
<li>将结果返回给客户端。</li>
</ol>
<h2 id="查询缓存配置"><a href="#查询缓存配置" class="headerlink" title="查询缓存配置"></a>查询缓存配置</h2><ol>
<li>查看当前的MySQL数据库是否支持查询缓存：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;have_query_cache&#x27;</span>;    </span><br></pre></td></tr></table></figure>

<p><img data-src="1555249929012.png" alt="1555249929012"></p>
<ol start="2">
<li><strong>Mysql8，已经取消了查询缓存</strong> ：如图所示</li>
</ol>
<p><img data-src="image-20210322150841055.png" alt="image-20210322150841055"></p>
<ol start="3">
<li>查看当前MySQL是否开启了查询缓存 ：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;query_cache_type&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1555250015377.png" alt="1555250015377"></p>
<ol start="4">
<li>查看查询缓存的占用大小 ：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;query_cache_size&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1555250142451.png" alt="1555250142451"></p>
<ol start="5">
<li>查看查询缓存的状态变量：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Qcache%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1555250443958.png" alt="1555250443958"></p>
<p>各个变量的含义如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Qcache_free_blocks</td>
<td>查询缓存中的可用内存块数</td>
</tr>
<tr>
<td>Qcache_free_memory</td>
<td>查询缓存的可用内存量</td>
</tr>
<tr>
<td>Qcache_hits</td>
<td>查询缓存命中数</td>
</tr>
<tr>
<td>Qcache_inserts</td>
<td>添加到查询缓存的查询数</td>
</tr>
<tr>
<td>Qcache_lowmen_prunes</td>
<td>由于内存不足而从查询缓存中删除的查询数</td>
</tr>
<tr>
<td>Qcache_not_cached</td>
<td>非缓存查询的数量（由于 query_cache_type 设置而无法缓存或未缓存）</td>
</tr>
<tr>
<td>Qcache_queries_in_cache</td>
<td>查询缓存中注册的查询数</td>
</tr>
<tr>
<td>Qcache_total_blocks</td>
<td>查询缓存中的块总数</td>
</tr>
</tbody></table>
<h2 id="开启查询缓存"><a href="#开启查询缓存" class="headerlink" title="开启查询缓存"></a>开启查询缓存</h2><p>MySQL的查询缓存默认是关闭的，需要手动配置参数 query_cache_type ， 来开启查询缓存。query_cache_type 该参数的可取值有三个 ：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>OFF 或 0</td>
<td>查询缓存功能关闭</td>
</tr>
<tr>
<td>ON 或 1</td>
<td>查询缓存功能打开，SELECT的结果符合缓存条件即会缓存，否则，不予缓存，显式指定 SQL_NO_CACHE，不予缓存</td>
</tr>
<tr>
<td>DEMAND 或 2</td>
<td>查询缓存功能按需进行，显式指定 SQL_CACHE 的SELECT语句才会缓存；其它均不予缓存</td>
</tr>
</tbody></table>
<p>在 /usr/my.cnf 配置中，增加以下配置 ： </p>
<p><img data-src="1555251383805.png" alt="1555251383805"></p>
<p>配置完毕之后，重启服务既可生效 ；</p>
<p>然后就可以在命令行执行SQL语句进行验证 ，执行一条比较耗时的SQL语句，然后再多执行几次，查看后面几次的执行时间；获取通过查看查询缓存的缓存命中数，来判定是否走查询缓存。</p>
<h2 id="查询缓存SELECT选项"><a href="#查询缓存SELECT选项" class="headerlink" title="查询缓存SELECT选项"></a>查询缓存SELECT选项</h2><p>可以在SELECT语句中指定两个与查询缓存相关的选项 ：</p>
<p>SQL_CACHE : 如果查询结果是可缓存的，并且 query_cache_type 系统变量的值为ON或 DEMAND ，则缓存查询结果 。</p>
<p>SQL_NO_CACHE : 服务器不使用查询缓存。它既不检查查询缓存，也不检查结果是否已缓存，也不缓存查询结果。</p>
<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SQL_CACHE id, name <span class="keyword">FROM</span> customer;</span><br><span class="line"><span class="keyword">SELECT</span> SQL_NO_CACHE id, name <span class="keyword">FROM</span> customer;</span><br></pre></td></tr></table></figure>

<h2 id="查询缓存失效的情况"><a href="#查询缓存失效的情况" class="headerlink" title="查询缓存失效的情况"></a>查询缓存失效的情况</h2><p>1） SQL 语句不一致的情况， 要想命中查询缓存，查询的SQL语句必须一致。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SQL1 : <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_item;</span><br><span class="line">SQL2 : <span class="keyword">Select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_item;</span><br></pre></td></tr></table></figure>

<p>2） 当查询语句中有一些不确定的时，则不会缓存。如 ： now() , current_date() , curdate() , curtime() , rand() , uuid() , user() , database() 。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SQL1 : <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_item <span class="keyword">where</span> updatetime <span class="operator">&lt;</span> now() limit <span class="number">1</span>;</span><br><span class="line">SQL2 : <span class="keyword">select</span> <span class="keyword">user</span>();</span><br><span class="line">SQL3 : <span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure>

<p>3） 不使用任何表查询语句。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;A&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>4）  查询 mysql， information_schema或  performance_schema 数据库中的表时，不会走查询缓存。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.engines;</span><br></pre></td></tr></table></figure>

<p>5） 在存储的函数，触发器或事件的主体内执行的查询。</p>
<p>6） 如果表更改，则使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除。这包括使用<code>MERGE</code>映射到已更改表的表的查询。一个表可以被许多类型的语句，如被改变 INSERT， UPDATE， DELETE， TRUNCATE TABLE， ALTER TABLE， DROP TABLE，或 DROP DATABASE 。</p>
<h1 id="Mysql内存管理及优化"><a href="#Mysql内存管理及优化" class="headerlink" title="Mysql内存管理及优化"></a>Mysql内存管理及优化</h1><h2 id="内存优化原则"><a href="#内存优化原则" class="headerlink" title="内存优化原则"></a>内存优化原则</h2><p>1） 将尽量多的内存分配给MySQL做缓存，但要给操作系统和其他程序预留足够内存。<br>2） MyISAM 存储引擎的数据文件读取依赖于操作系统自身的IO缓存，因此，如果有MyISAM表，就要预留更多的内存给操作系统做IO缓存。<br>3） 排序区、连接区等缓存是分配给每个数据库会话（session）专用的，其默认值的设置要根据最大连接数合理分配，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽。</p>
<h2 id="MyISAM-内存优化"><a href="#MyISAM-内存优化" class="headerlink" title="MyISAM 内存优化"></a>MyISAM 内存优化</h2><p>myisam存储引擎使用 key_buffer 缓存索引块，加速myisam索引的读写速度。对于myisam表的数据块，mysql没有特别的缓存机制，完全依赖于操作系统的IO缓存。</p>
<ol>
<li>key_buffer_size</li>
</ol>
<p>key_buffer_size决定MyISAM索引块缓存区的大小，直接影响到MyISAM表的存取效率。可以在MySQL参数文件中设置key_buffer_size的值，对于一般MyISAM数据库，建议至少将1/4可用内存分配给key_buffer_size。</p>
<p>在/usr/my.cnf 中做如下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key_buffer_size&#x3D;512M</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>read_buffer_size</li>
</ol>
<p>如果需要经常顺序扫描myisam表，可以通过增大read_buffer_size的值来改善性能。但需要注意的是read_buffer_size是每个session独占的，如果默认值设置太大，就会造成内存浪费。</p>
<ol start="3">
<li>read_rnd_buffer_size</li>
</ol>
<p>对于需要做排序的myisam表的查询，如带有order by子句的sql，适当增加 read_rnd_buffer_size 的值，可以改善此类的sql性能。但需要注意的是 read_rnd_buffer_size 是每个session独占的，如果默认值设置太大，就会造成内存浪费。</p>
<h2 id="InnoDB-内存优化"><a href="#InnoDB-内存优化" class="headerlink" title="InnoDB 内存优化"></a>InnoDB 内存优化</h2><p>innodb用一块内存区做IO缓存池，该缓存池不仅用来缓存innodb的索引块，而且也用来缓存innodb的数据块。</p>
<ol>
<li>innodb_buffer_pool_size</li>
</ol>
<p>该变量决定了 innodb 存储引擎表数据和索引数据的最大缓存区大小。在保证操作系统及其他程序有足够内存可用的情况下，innodb_buffer_pool_size 的值越大，缓存命中率越高，访问InnoDB表需要的磁盘I/O 就越少，性能也就越高。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">innodb_buffer_pool_size&#x3D;512M</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>innodb_log_buffer_size</li>
</ol>
<p>决定了innodb重做日志缓存的大小，对于可能产生大量更新记录的大事务，增加innodb_log_buffer_size的大小，可以避免innodb在事务提交前就执行不必要的日志写入磁盘操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">innodb_log_buffer_size&#x3D;10M</span><br></pre></td></tr></table></figure>

<h1 id="Mysql并发参数调整"><a href="#Mysql并发参数调整" class="headerlink" title="Mysql并发参数调整"></a>Mysql并发参数调整</h1><p>从实现上来说，MySQL Server 是多线程结构，包括后台线程和客户服务线程。多线程可以有效利用服务器资源，提高数据库的并发性能。在Mysql中，控制并发连接和线程的主要参数包括 max_connections、back_log、thread_cache_size、table_open_cahce。</p>
<h2 id="max-connections"><a href="#max-connections" class="headerlink" title="max_connections"></a>max_connections</h2><p>采用max_connections 控制允许连接到MySQL数据库的最大数量，默认值是 151。如果状态变量 connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败，这是可以考虑增大max_connections 的值。</p>
<p>Mysql 最大可支持的连接数，取决于很多因素，包括给定操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度，期望的响应时间等。在Linux 平台下，性能好的服务器，支持 500-1000 个连接不是难事，需要根据服务器性能进行评估设定。</p>
<h2 id="back-log"><a href="#back-log" class="headerlink" title="back_log"></a>back_log</h2><p>back_log 参数控制MySQL监听TCP端口时设置的积压请求栈大小。如果MySql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。5.6.6 版本之前默认值为 50 ， 之后的版本默认为 50 + （max_connections / 5）， 但最大不超过900。</p>
<p>如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大back_log 的值。</p>
<h2 id="table-open-cache"><a href="#table-open-cache" class="headerlink" title="table_open_cache"></a>table_open_cache</h2><p>该参数用来控制所有SQL语句执行线程可打开表缓存的数量， 而在执行SQL语句时，每一个SQL执行线程至少要打开 1 个表缓存。该参数的值应该根据设置的最大连接数 max_connections 以及每个连接执行关联查询中涉及的表的最大数量来设定 ：</p>
<p>max_connections x N ；</p>
<h2 id="thread-cache-size"><a href="#thread-cache-size" class="headerlink" title="thread_cache_size"></a>thread_cache_size</h2><p>为了加快连接数据库的速度，MySQL 会缓存一定数量的客户服务线程以备重用，通过参数 thread_cache_size 可控制 MySQL 缓存客户服务线程的数量。</p>
<h2 id="innodb-lock-wait-timeout"><a href="#innodb-lock-wait-timeout" class="headerlink" title="innodb_lock_wait_timeout"></a>innodb_lock_wait_timeout</h2><p>该参数是用来设置InnoDB 事务等待行锁的时间，默认值是50ms ， 可以根据需要进行动态设置。对于需要快速反馈的业务系统来说，可以将行锁的等待时间调小，以避免事务长时间挂起； 对于后台运行的批量处理程序来说， 可以将行锁的等待时间调大， 以避免发生大的回滚操作。</p>
<h1 id="Mysql锁问题"><a href="#Mysql锁问题" class="headerlink" title="Mysql锁问题"></a>Mysql锁问题</h1><h2 id="锁概述"><a href="#锁概述" class="headerlink" title="锁概述"></a>锁概述</h2><p>锁是计算机协调多个进程或线程并发访问某一资源的机制（避免争抢）。</p>
<p>在数据库中，除传统的计算资源（如 CPU、RAM、I/O 等）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p>
<h2 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h2><p>从对数据操作的粒度分 ： </p>
<p>1） 表锁：操作时，会锁定整个表。<br>2） 行锁：操作时，会锁定当前操作行。</p>
<p>从对数据操作的类型分：</p>
<p>1） 读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。<br>2） 写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。</p>
<h2 id="Mysql-锁"><a href="#Mysql-锁" class="headerlink" title="Mysql 锁"></a>Mysql 锁</h2><p>相对其他数据库而言，MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。下表中罗列出了各存储引擎对锁的支持情况：</p>
<table>
<thead>
<tr>
<th>存储引擎</th>
<th>表级锁</th>
<th>行级锁</th>
<th>页面锁</th>
</tr>
</thead>
<tbody><tr>
<td>MyISAM</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr>
<td>InnoDB</td>
<td>支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>MEMORY</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr>
<td>BDB</td>
<td>支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
</tbody></table>
<p>MySQL这3种锁的特性可大致归纳如下 ：</p>
<table>
<thead>
<tr>
<th>锁类型</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>表级锁</td>
<td>偏向MyISAM 存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。</td>
</tr>
<tr>
<td>行级锁</td>
<td>偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</td>
</tr>
<tr>
<td>页面锁</td>
<td>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</td>
</tr>
</tbody></table>
<p>从上述特点可见，很难笼统地说哪种锁更好，只能就具体应用的特点来说哪种锁更合适！仅从锁的角度来说：表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web 应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并查询的应用，如一些在线事务处理（OLTP）系统。</p>
<h2 id="MyISAM-表锁"><a href="#MyISAM-表锁" class="headerlink" title="MyISAM 表锁"></a>MyISAM 表锁</h2><p>MyISAM 存储引擎只支持表锁，这也是MySQL开始几个版本中唯一支持的锁类型。</p>
<h3 id="如何加表锁"><a href="#如何加表锁" class="headerlink" title="如何加表锁"></a>如何加表锁</h3><p>MyISAM 在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT 等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此，用户一般不需要直接用 LOCK TABLE 命令给 MyISAM 表显式加锁。</p>
<p>显示加表锁语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">加读锁 ： lock <span class="keyword">table</span> table_name read;</span><br><span class="line"></span><br><span class="line">加写锁 ： lock <span class="keyword">table</span> table_name write；</span><br></pre></td></tr></table></figure>

<h3 id="读锁案例"><a href="#读锁案例" class="headerlink" title="读锁案例"></a>读锁案例</h3><p>准备环境</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database demo_03 <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line">use demo_03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_book` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">11</span>) auto_increment,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `publish_time` <span class="type">DATE</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `status` <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>myisam <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_book (id, name, publish_time, status) <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;java编程思想&#x27;</span>,<span class="string">&#x27;2088-08-01&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_book (id, name, publish_time, status) <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;solr编程思想&#x27;</span>,<span class="string">&#x27;2088-08-08&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">11</span>) auto_increment,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>myisam <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user (id, name) <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;令狐冲&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user (id, name) <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;田伯光&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>客户端 一 ：</p>
<p>1）获得tb_book 表的读锁</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">lock <span class="keyword">table</span> tb_book read;</span><br></pre></td></tr></table></figure>

<p>2） 执行查询操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure>

<p><img data-src="1553906896564.png" alt="1553906896564"></p>
<p>可以正常执行 ， 查询出数据。</p>
<p>客户端 二 ：</p>
<p>3） 执行查询操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure>

<p><img data-src="1553907044500.png" alt="1553907044500"></p>
<p>客户端 一 ：</p>
<p>4）查询未锁定的表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> tb_seller;</span><br></pre></td></tr></table></figure>

<p><img data-src="1553908913515.png" alt="1553908913515"></p>
<p>客户端 二 ：</p>
<p>5）查询未锁定的表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> tb_seller;</span><br></pre></td></tr></table></figure>

<p><img data-src="1553908973840.png" alt="1553908973840"></p>
<p>可以正常查询出未锁定的表；</p>
<p>客户端 一 ：</p>
<p>6） 执行插入操作 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_book <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Mysql高级&#x27;</span>,<span class="string">&#x27;2088-01-01&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img data-src="1553907198462.png" alt="1553907198462"></p>
<p>执行插入， 直接报错 ， 由于当前tb_book 获得的是 读锁， 不能执行更新操作。</p>
<p>客户端 二 ：</p>
<p>7） 执行插入操作 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_book <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Mysql高级&#x27;</span>,<span class="string">&#x27;2088-01-01&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img data-src="1553907403957.png" alt="1553907403957"></p>
<p>当在客户端一中释放锁指令 unlock tables  后 ， 客户端二中的 inesrt 语句 ， 立即执行；</p>
<h3 id="写锁案例"><a href="#写锁案例" class="headerlink" title="写锁案例"></a>写锁案例</h3><p>客户端 一 :</p>
<p>1）获得tb_book 表的写锁 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">lock <span class="keyword">table</span> tb_book write ;</span><br></pre></td></tr></table></figure>

<p>2）执行查询操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_book ;</span><br></pre></td></tr></table></figure>

<p><img data-src="1553907849829.png" alt="1553907849829"></p>
<p>查询操作执行成功；</p>
<p>3）执行更新操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update tb_book <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;java编程思想（第二版）&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1553907875221.png" alt="1553907875221"></p>
<p>更新操作执行成功 ；</p>
<p>客户端 二 :</p>
<p>4）执行查询操作</p>
<p>select * from tb_book ;</p>
<p><img data-src="1553908019755.png" alt="1553908019755"></p>
<p>当在客户端一中释放锁指令 unlock tables  后 ， 客户端二中的 select 语句 ， 立即执行 ；</p>
<p><img data-src="1553908131373.png" alt="1553908131373"></p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>锁模式的相互兼容性如表中所示：</p>
<p><img data-src="1553905621992.png" alt="1553905621992"></p>
<p>由上表可见：<br>1） 对MyISAM 表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；<br>2） 对MyISAM 表的写操作，则会阻塞其他用户对同一表的读和写操作；</p>
<p>简而言之，就是读锁会阻塞写，但是不会阻塞读。而写锁，则既会阻塞读，又会阻塞写。</p>
<p>此外，MyISAM 的读写锁调度是写优先，这也是MyISAM不适合做写为主的表的存储引擎的原因。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</p>
<h3 id="查看锁的争用情况"><a href="#查看锁的争用情况" class="headerlink" title="查看锁的争用情况"></a>查看锁的争用情况</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> tables；</span><br></pre></td></tr></table></figure>

<p><img data-src="1556443073322.png" alt="1556443073322"></p>
<p>In_user : 表当前被查询使用的次数。如果该数为零，则表是打开的，但是当前没有被使用。<br>Name_locked：表名称是否被锁定。名称锁定用于取消表或对表进行重命名等操作。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;Table_locks%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1556443170082.png" alt="1556443170082"></p>
<p>Table_locks_immediate ： 指的是能够立即获得表级锁的次数，每立即获取锁，值加1。<br>Table_locks_waited ： 指的是不能立即获取表级锁而需要等待的次数，每等待一次，该值加1，此值高说明存在着较为严重的表级锁争用情况。</p>
<h2 id="InnoDB行锁"><a href="#InnoDB行锁" class="headerlink" title="InnoDB行锁"></a>InnoDB行锁</h2><h3 id="行锁介绍"><a href="#行锁介绍" class="headerlink" title="行锁介绍"></a>行锁介绍</h3><p>行锁特点 ：偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</p>
<p>InnoDB 与 MyISAM 的最大不同有两点：一是支持事务；二是 采用了行级锁。</p>
<h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><p><strong>事务及其ACID属性</strong></p>
<p>事务是由一组SQL语句组成的逻辑处理单元。</p>
<p>事务具有以下4个特性，简称为事务ACID属性。</p>
<table>
<thead>
<tr>
<th>ACID属性</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>原子性（Atomicity）</td>
<td>事务是一个原子操作单元，其对数据的修改，要么全部成功，要么全部失败。</td>
</tr>
<tr>
<td>一致性（Consistent）</td>
<td>在事务开始和完成时，数据都必须保持一致状态。</td>
</tr>
<tr>
<td>隔离性（Isolation）</td>
<td>数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的 “独立” 环境下运行。</td>
</tr>
<tr>
<td>持久性（Durable）</td>
<td>事务完成之后，对于数据的修改是永久的。</td>
</tr>
</tbody></table>
<p><strong>并发事务处理带来的问题</strong></p>
<table>
<thead>
<tr>
<th>问题</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>丢失更新（Lost Update）</td>
<td>当两个或多个事务选择同一行，最初的事务修改的值，会被后面的事务修改的值覆盖。</td>
</tr>
<tr>
<td>脏读（Dirty Reads）</td>
<td>当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</td>
</tr>
<tr>
<td>不可重复读（Non-Repeatable Reads）</td>
<td>一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现和以前读出的数据不一致。</td>
</tr>
<tr>
<td>幻读（Phantom Reads）</td>
<td>一个事务按照相同的查询条件重新读取以前查询过的数据，却发现其他事务插入了满足其查询条件的新数据。</td>
</tr>
</tbody></table>
<p><strong>事务隔离级别</strong></p>
<p>为了解决上述提到的事务并发问题，数据库提供一定的事务隔离机制来解决这个问题。数据库的事务隔离越严格，并发副作用越小，但付出的代价也就越大，因为事务隔离实质上就是使用事务在一定程度上“串行化” 进行，这显然与“并发” 是矛盾的。 </p>
<p>数据库的隔离级别有4个，由低到高依次为Read uncommitted、Read committed、Repeatable read、Serializable，这四个级别可以逐个解决脏写、脏读、不可重复读、幻读这几类问题。</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>丢失更新</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>Read uncommitted</td>
<td>×</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>Read committed</td>
<td>×</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>Repeatable read（默认）</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>Serializable</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<p>备注 ： √  代表可能出现 ， × 代表不会出现 。</p>
<p>Mysql 的数据库的默认隔离级别为 Repeatable read ， 查看方式：</p>
<p>show variables like ‘tx_isolation’;</p>
<p><img data-src="1554331600009.png" alt="1554331600009"></p>
<h3 id="InnoDB-的行锁模式"><a href="#InnoDB-的行锁模式" class="headerlink" title="InnoDB 的行锁模式"></a>InnoDB 的行锁模式</h3><p>InnoDB  实现了以下两种类型的行锁。</p>
<ul>
<li>共享锁（S）：又称为读锁，简称S锁，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。</li>
<li>排他锁（X）：又称为写锁，简称X锁，排他锁就是不能与其他锁并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行读取和修改。</li>
</ul>
<p>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁（X)；</p>
<p>对于普通SELECT语句，InnoDB不会加任何锁；</p>
<p>可以通过以下语句显示给记录集加共享锁或排他锁 。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">共享锁（S）：<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> ... LOCK <span class="keyword">IN</span> SHARE MODE</span><br><span class="line"></span><br><span class="line">排他锁（X) ：<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> ... <span class="keyword">FOR</span> UPDATE</span><br></pre></td></tr></table></figure>

<h3 id="行锁基本演示"><a href="#行锁基本演示" class="headerlink" title="行锁基本演示"></a>行锁基本演示</h3><table>
<thead>
<tr>
<th>Session-1</th>
<th>Session-2</th>
</tr>
</thead>
<tbody><tr>
<td><img data-src="1554354615030.png" alt="1554354615030">      关闭自动提交功能</td>
<td><img data-src="1554354601867.png" alt="1554354601867">  关闭自动提交功能</td>
</tr>
<tr>
<td><img data-src="1554354713628.png" alt="1554354713628"> 可以正常的查询出全部的数据</td>
<td><img data-src="1554354717336.png" alt="1554354717336"> 可以正常的查询出全部的数据</td>
</tr>
<tr>
<td><img data-src="1554354830589.png" alt="1554354830589">查询id 为3的数据 ；</td>
<td><img data-src="1554354832708.png" alt="1554354832708">获取id为3的数据 ；</td>
</tr>
<tr>
<td><img data-src="1554382789984.png" alt="1554382789984"> 更新id为3的数据，但是不提交；</td>
<td><img data-src="1554382905352.png" alt="1554382905352"> 更新id为3 的数据， 出于等待状态</td>
</tr>
<tr>
<td><img data-src="1554382977653.png" alt="1554382977653"> 通过commit， 提交事务</td>
<td><img data-src="1554383044542.png" alt="1554383044542"> 解除阻塞，更新正常进行</td>
</tr>
<tr>
<td>以上， 操作的都是同一行的数据，接下来，演示不同行的数据 ：</td>
<td></td>
</tr>
<tr>
<td><img data-src="1554385220580.png" alt="1554385220580"> 更新id为3数据，正常的获取到行锁 ， 执行更新 ；</td>
<td><img data-src="1554385236768.png" alt="1554385236768"> 由于与Session-1 操作不是同一行，获取当前行锁，执行更新；</td>
</tr>
</tbody></table>
<h3 id="无索引行锁升级为表锁"><a href="#无索引行锁升级为表锁" class="headerlink" title="无索引行锁升级为表锁"></a>无索引行锁升级为表锁</h3><p>如果不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，实际效果跟表锁一样。</p>
<p>查看当前表的索引 ： show  index  from test_innodb_lock ;</p>
<p><img data-src="1554385956215.png" alt="1554385956215"></p>
<table>
<thead>
<tr>
<th>Session-1</th>
<th>Session-2</th>
</tr>
</thead>
<tbody><tr>
<td>关闭事务的自动提交<img data-src="1554386287454.png" alt="1554386287454"></td>
<td>关闭事务的自动提交<img data-src="1554386312524.png" alt="1554386312524"></td>
</tr>
<tr>
<td>执行更新语句 ：<img data-src="1554386654793.png" alt="1554386654793"></td>
<td>执行更新语句， 但处于阻塞状态：<img data-src="1554386685610.png" alt="1554386685610"></td>
</tr>
<tr>
<td>提交事务：<img data-src="1554386721653.png" alt="1554386721653"></td>
<td>解除阻塞，执行更新成功 ：<img data-src="1554386750004.png" alt="1554386750004"></td>
</tr>
<tr>
<td></td>
<td>执行提交操作 ：<img data-src="1554386804807.png" alt="1554386804807"></td>
</tr>
</tbody></table>
<p>由于 执行更新时 ， name字段本来为varchar类型， 我们是作为数组类型使用，存在类型转换，索引失效，最终行锁变为表锁 ；</p>
<h3 id="间隙锁危害"><a href="#间隙锁危害" class="headerlink" title="间隙锁危害"></a>间隙锁危害</h3><p>当我们用范围条件，而不是使用相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据进行加锁； 对于键值在条件范围内但并不存在的记录，叫做 “间隙（GAP）” ， InnoDB也会对这个 “间隙” 加锁，这种锁机制就是所谓的 间隙锁（Next-Key锁） 。</p>
<p>示例 ： </p>
<table>
<thead>
<tr>
<th>Session-1</th>
<th>Session-2</th>
</tr>
</thead>
<tbody><tr>
<td>关闭事务自动提交 <img data-src="1554387987130.png" alt="1554387987130"></td>
<td>关闭事务自动提交<img data-src="1554387994533.png" alt="1554387994533"></td>
</tr>
<tr>
<td>根据id范围更新数据<img data-src="1554388492478.png" alt="1554388492478"></td>
<td></td>
</tr>
<tr>
<td></td>
<td>插入id为2的记录， 出于阻塞状态<img data-src="1554388515936.png" alt="1554388515936"></td>
</tr>
<tr>
<td>提交事务 ；<img data-src="1554388149305.png" alt="1554388149305"></td>
<td></td>
</tr>
<tr>
<td></td>
<td>解除阻塞 ， 执行插入操作 ：<img data-src="1554388548562.png" alt="1554388548562"></td>
</tr>
<tr>
<td></td>
<td>提交事务 ：</td>
</tr>
</tbody></table>
<h3 id="InnoDB-行锁争用情况"><a href="#InnoDB-行锁争用情况" class="headerlink" title="InnoDB 行锁争用情况"></a>InnoDB 行锁争用情况</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span>  status <span class="keyword">like</span> <span class="string">&#x27;innodb_row_lock%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1556455943670.png" alt="1556455943670"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Innodb_row_lock_current_waits: 当前正在等待锁定的数量</span><br><span class="line"></span><br><span class="line">Innodb_row_lock_time: 从系统启动到现在锁定总时间长度</span><br><span class="line"></span><br><span class="line">Innodb_row_lock_time_avg:每次等待所花平均时长</span><br><span class="line"></span><br><span class="line">Innodb_row_lock_time_max:从系统启动到现在等待最长的一次所花的时间</span><br><span class="line"></span><br><span class="line">Innodb_row_lock_waits: 系统启动后到现在总共等待的次数</span><br><span class="line"></span><br><span class="line">当等待的次数很高，而且每次等待的时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手制定优化计划。</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>InnoDB存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面带来了性能损耗可能比表锁会更高一些，但是在整体并发处理能力方面要远远由于MyISAM的表锁的。当系统并发量较高的时候，InnoDB的整体性能和MyISAM相比就会有比较明显的优势。</p>
<p>但是，InnoDB的行级锁同样也有其脆弱的一面，当我们使用不当的时候，可能会让InnoDB的整体性能表现不仅不能比MyISAM高，甚至可能会更差。</p>
<p>优化建议：</p>
<ul>
<li>尽可能让所有数据检索都能通过索引来完成，避免无索引行锁升级为表锁。</li>
<li>合理设计索引，尽量缩小锁的范围</li>
<li>尽可能减少索引条件，及索引范围，避免间隙锁</li>
<li>尽量控制事务大小，减少锁定资源量和时间长度</li>
<li>尽可使用低级别事务隔离（但是需要业务层面满足需求）</li>
</ul>
<h1 id="常用SQL技巧"><a href="#常用SQL技巧" class="headerlink" title="常用SQL技巧"></a>常用SQL技巧</h1><h2 id="SQL执行顺序"><a href="#SQL执行顺序" class="headerlink" title="SQL执行顺序"></a>SQL执行顺序</h2><p>编写顺序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">select</span> list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="operator">&lt;</span>left_table<span class="operator">&gt;</span> <span class="operator">&lt;</span>join_type<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">JOIN</span></span><br><span class="line">    <span class="operator">&lt;</span>right_table<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    <span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">    <span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    <span class="operator">&lt;</span>order_by_condition<span class="operator">&gt;</span></span><br><span class="line">LIMIT</span><br><span class="line">    <span class="operator">&lt;</span>limit_params<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行顺序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span>    <span class="operator">&lt;</span>left_table<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ON</span>         <span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span>join_type<span class="operator">&gt;</span>        <span class="keyword">JOIN</span>    <span class="operator">&lt;</span>right_table<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span>        <span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>     <span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">HAVING</span>        <span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>        <span class="operator">&lt;</span><span class="keyword">select</span> list<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>    <span class="operator">&lt;</span>order_by_condition<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">LIMIT        <span class="operator">&lt;</span>limit_params<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="正则表达式使用"><a href="#正则表达式使用" class="headerlink" title="正则表达式使用"></a>正则表达式使用</h2><p>正则表达式（Regular Expression）是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td>在字符串开始处进行匹配</td>
</tr>
<tr>
<td>$</td>
<td>在字符串末尾处进行匹配</td>
</tr>
<tr>
<td>.</td>
<td>匹配任意单个字符, 包括换行符</td>
</tr>
<tr>
<td>[…]</td>
<td>匹配出括号内的任意字符</td>
</tr>
<tr>
<td>[^…]</td>
<td>匹配不出括号内的任意字符</td>
</tr>
<tr>
<td>a*</td>
<td>匹配零个或者多个a(包括空串)</td>
</tr>
<tr>
<td>a+</td>
<td>匹配一个或者多个a(不包括空串)</td>
</tr>
<tr>
<td>a?</td>
<td>匹配零个或者一个a</td>
</tr>
<tr>
<td>a1|a2</td>
<td>匹配a1或a2</td>
</tr>
<tr>
<td>a(m)</td>
<td>匹配m个a</td>
</tr>
<tr>
<td>a(m,)</td>
<td>至少匹配m个a</td>
</tr>
<tr>
<td>a(m,n)</td>
<td>匹配m个a 到 n个a</td>
</tr>
<tr>
<td>a(,n)</td>
<td>匹配0到n个a</td>
</tr>
<tr>
<td>(…)</td>
<td>将模式元素组成单一元素</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from emp where name regexp &#39;^T&#39;;</span><br><span class="line"></span><br><span class="line">select * from emp where name regexp &#39;2$&#39;;</span><br><span class="line"></span><br><span class="line">select * from emp where name regexp &#39;[uvw]&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-常用函数"><a href="#MySQL-常用函数" class="headerlink" title="MySQL 常用函数"></a>MySQL 常用函数</h2><p>数字函数</p>
<table>
<thead>
<tr>
<th>函数名称</th>
<th>作 用</th>
</tr>
</thead>
<tbody><tr>
<td>ABS</td>
<td>求绝对值</td>
</tr>
<tr>
<td>SQRT</td>
<td>求二次方根</td>
</tr>
<tr>
<td>MOD</td>
<td>求余数</td>
</tr>
<tr>
<td>CEIL 和 CEILING</td>
<td>两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</td>
</tr>
<tr>
<td>FLOOR</td>
<td>向下取整，返回值转化为一个BIGINT</td>
</tr>
<tr>
<td>RAND</td>
<td>生成一个0~1之间的随机数，传入整数参数是，用来产生重复序列</td>
</tr>
<tr>
<td>ROUND</td>
<td>对所传参数进行四舍五入</td>
</tr>
<tr>
<td>SIGN</td>
<td>返回参数的符号</td>
</tr>
<tr>
<td>POW 和 POWER</td>
<td>两个函数的功能相同，都是所传参数的次方的结果值</td>
</tr>
<tr>
<td>SIN</td>
<td>求正弦值</td>
</tr>
<tr>
<td>ASIN</td>
<td>求反正弦值，与函数 SIN 互为反函数</td>
</tr>
<tr>
<td>COS</td>
<td>求余弦值</td>
</tr>
<tr>
<td>ACOS</td>
<td>求反余弦值，与函数 COS 互为反函数</td>
</tr>
<tr>
<td>TAN</td>
<td>求正切值</td>
</tr>
<tr>
<td>ATAN</td>
<td>求反正切值，与函数 TAN 互为反函数</td>
</tr>
<tr>
<td>COT</td>
<td>求余切值</td>
</tr>
</tbody></table>
<p>字符串函数</p>
<table>
<thead>
<tr>
<th>函数名称</th>
<th>作 用</th>
</tr>
</thead>
<tbody><tr>
<td>LENGTH</td>
<td>计算字符串长度函数，返回字符串的字节长度</td>
</tr>
<tr>
<td>CONCAT</td>
<td>合并字符串函数，返回结果为连接参数产生的字符串，参数可以使一个或多个</td>
</tr>
<tr>
<td>INSERT</td>
<td>替换字符串函数</td>
</tr>
<tr>
<td>LOWER</td>
<td>将字符串中的字母转换为小写</td>
</tr>
<tr>
<td>UPPER</td>
<td>将字符串中的字母转换为大写</td>
</tr>
<tr>
<td>LEFT</td>
<td>从左侧字截取符串，返回字符串左边的若干个字符</td>
</tr>
<tr>
<td>RIGHT</td>
<td>从右侧字截取符串，返回字符串右边的若干个字符</td>
</tr>
<tr>
<td>TRIM</td>
<td>删除字符串左右两侧的空格</td>
</tr>
<tr>
<td>REPLACE</td>
<td>字符串替换函数，返回替换后的新字符串</td>
</tr>
<tr>
<td>SUBSTRING</td>
<td>截取字符串，返回从指定位置开始的指定长度的字符换</td>
</tr>
<tr>
<td>REVERSE</td>
<td>字符串反转（逆序）函数，返回与原始字符串顺序相反的字符串</td>
</tr>
</tbody></table>
<p>日期函数</p>
<table>
<thead>
<tr>
<th>函数名称</th>
<th>作 用</th>
</tr>
</thead>
<tbody><tr>
<td>CURDATE 和 CURRENT_DATE</td>
<td>两个函数作用相同，返回当前系统的日期值</td>
</tr>
<tr>
<td>CURTIME 和 CURRENT_TIME</td>
<td>两个函数作用相同，返回当前系统的时间值</td>
</tr>
<tr>
<td>NOW 和  SYSDATE</td>
<td>两个函数作用相同，返回当前系统的日期和时间值</td>
</tr>
<tr>
<td>MONTH</td>
<td>获取指定日期中的月份</td>
</tr>
<tr>
<td>MONTHNAME</td>
<td>获取指定日期中的月份英文名称</td>
</tr>
<tr>
<td>DAYNAME</td>
<td>获取指定曰期对应的星期几的英文名称</td>
</tr>
<tr>
<td>DAYOFWEEK</td>
<td>获取指定日期对应的一周的索引位置值</td>
</tr>
<tr>
<td>WEEK</td>
<td>获取指定日期是一年中的第几周，返回值的范围是否为 0〜52 或 1〜53</td>
</tr>
<tr>
<td>DAYOFYEAR</td>
<td>获取指定曰期是一年中的第几天，返回值范围是1~366</td>
</tr>
<tr>
<td>DAYOFMONTH</td>
<td>获取指定日期是一个月中是第几天，返回值范围是1~31</td>
</tr>
<tr>
<td>YEAR</td>
<td>获取年份，返回值范围是 1970〜2069</td>
</tr>
<tr>
<td>TIME_TO_SEC</td>
<td>将时间参数转换为秒数</td>
</tr>
<tr>
<td>SEC_TO_TIME</td>
<td>将秒数转换为时间，与TIME_TO_SEC 互为反函数</td>
</tr>
<tr>
<td>DATE_ADD 和 ADDDATE</td>
<td>两个函数功能相同，都是向日期添加指定的时间间隔</td>
</tr>
<tr>
<td>DATE_SUB 和 SUBDATE</td>
<td>两个函数功能相同，都是向日期减去指定的时间间隔</td>
</tr>
<tr>
<td>ADDTIME</td>
<td>时间加法运算，在原始时间上添加指定的时间</td>
</tr>
<tr>
<td>SUBTIME</td>
<td>时间减法运算，在原始时间上减去指定的时间</td>
</tr>
<tr>
<td>DATEDIFF</td>
<td>获取两个日期之间间隔，返回参数 1 减去参数 2 的值</td>
</tr>
<tr>
<td>DATE_FORMAT</td>
<td>格式化指定的日期，根据参数返回指定格式的值</td>
</tr>
<tr>
<td>WEEKDAY</td>
<td>获取指定日期在一周内的对应的工作日索引</td>
</tr>
</tbody></table>
<p>聚合函数</p>
<table>
<thead>
<tr>
<th>函数名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>MAX</td>
<td>查询指定列的最大值</td>
</tr>
<tr>
<td>MIN</td>
<td>查询指定列的最小值</td>
</tr>
<tr>
<td>COUNT</td>
<td>统计查询结果的行数</td>
</tr>
<tr>
<td>SUM</td>
<td>求和，返回指定列的总和</td>
</tr>
<tr>
<td>AVG</td>
<td>求平均值，返回指定列数据的平均值</td>
</tr>
</tbody></table>
<h1 id="MySql中常用工具"><a href="#MySql中常用工具" class="headerlink" title="MySql中常用工具"></a>MySql中常用工具</h1><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>该mysql不是指mysql服务，而是指mysql的客户端工具。</p>
<p>语法 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql [options] [database]</span><br></pre></td></tr></table></figure>

<h3 id="连接选项"><a href="#连接选项" class="headerlink" title="连接选项"></a>连接选项</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">参数 ： </span><br><span class="line">    <span class="operator">-</span>u, <span class="comment">--user=name            指定用户名</span></span><br><span class="line">    <span class="operator">-</span>p, <span class="comment">--password[=name]    指定密码</span></span><br><span class="line">    <span class="operator">-</span>h, <span class="comment">--host=name            指定服务器IP或域名</span></span><br><span class="line">    <span class="operator">-</span>P, <span class="comment">--port=#            指定连接端口</span></span><br><span class="line"></span><br><span class="line">示例 ：</span><br><span class="line">    mysql <span class="operator">-</span>h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="operator">-</span>P <span class="number">3306</span> <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line"></span><br><span class="line">    mysql <span class="operator">-</span>h127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span> <span class="operator">-</span>P3306 <span class="operator">-</span>uroot <span class="operator">-</span>p2143</span><br></pre></td></tr></table></figure>

<h3 id="执行选项"><a href="#执行选项" class="headerlink" title="执行选项"></a>执行选项</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span>e, <span class="comment">--execute=name        执行SQL语句并退出</span></span><br></pre></td></tr></table></figure>

<p>此选项可以在Mysql客户端执行SQL语句，而不用连接到MySQL数据库再执行，对于一些批处理脚本，这种方式尤其方便。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line">    mysql <span class="operator">-</span>uroot <span class="operator">-</span>p2143 db01 <span class="operator">-</span>e &quot;select * from tb_book&quot;;</span><br></pre></td></tr></table></figure>

<p><img data-src="1555325632715.png" alt="1555325632715"></p>
<h2 id="mysqladmin"><a href="#mysqladmin" class="headerlink" title="mysqladmin"></a>mysqladmin</h2><p>mysqladmin 是一个执行管理操作的客户端程序。可以用它来检查服务器的配置和当前状态、创建并删除数据库等。</p>
<p>可以通过 ： mysqladmin –help  指令查看帮助文档</p>
<p><img data-src="1555326108697.png" alt="1555326108697"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">示例 ：</span><br><span class="line">    mysqladmin <span class="operator">-</span>uroot <span class="operator">-</span>p2143 <span class="keyword">create</span> <span class="string">&#x27;test01&#x27;</span>;  </span><br><span class="line">    mysqladmin <span class="operator">-</span>uroot <span class="operator">-</span>p2143 <span class="keyword">drop</span> <span class="string">&#x27;test01&#x27;</span>;</span><br><span class="line">    mysqladmin <span class="operator">-</span>uroot <span class="operator">-</span>p2143 version;</span><br></pre></td></tr></table></figure>

<p>mysqlbinlog</p>
<p>由于服务器生成的二进制日志文件以二进制格式保存，所以如果想要检查这些文本的文本格式，就会使用到mysqlbinlog 日志管理工具。</p>
<p>语法 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqlbinlog [options]  log<span class="operator">-</span>files1 log<span class="operator">-</span>files2 ...</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line"></span><br><span class="line">    <span class="operator">-</span>d, <span class="comment">--database=name : 指定数据库名称，只列出指定的数据库相关操作。</span></span><br><span class="line"></span><br><span class="line">    <span class="operator">-</span>o, <span class="comment">--offset=# : 忽略掉日志中的前n行命令。</span></span><br><span class="line"></span><br><span class="line">    <span class="operator">-</span>r,<span class="comment">--result-file=name : 将输出的文本格式日志输出到指定文件。</span></span><br><span class="line"></span><br><span class="line">    <span class="operator">-</span>s, <span class="comment">--short-form : 显示简单格式， 省略掉一些信息。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">--start-datatime=date1  --stop-datetime=date2 : 指定日期间隔内的所有日志。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">--start-position=pos1 --stop-position=pos2 : 指定位置间隔内的所有日志。</span></span><br></pre></td></tr></table></figure>

<h2 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h2><p>mysqldump 客户端工具用来备份数据库或在不同数据库之间进行数据迁移。备份内容包含创建表，及插入表的SQL语句。</p>
<p>语法 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump [options] db_name [tables]</span><br><span class="line"></span><br><span class="line">mysqldump [options] <span class="comment">--database/-B db1 [db2 db3...]</span></span><br><span class="line"></span><br><span class="line">mysqldump [options] <span class="comment">--all-databases/-A</span></span><br></pre></td></tr></table></figure>

<h3 id="连接选项-1"><a href="#连接选项-1" class="headerlink" title="连接选项"></a>连接选项</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">参数 ： </span><br><span class="line">    <span class="operator">-</span>u, <span class="comment">--user=name            指定用户名</span></span><br><span class="line">    <span class="operator">-</span>p, <span class="comment">--password[=name]    指定密码</span></span><br><span class="line">    <span class="operator">-</span>h, <span class="comment">--host=name            指定服务器IP或域名</span></span><br><span class="line">    <span class="operator">-</span>P, <span class="comment">--port=#            指定连接端口</span></span><br></pre></td></tr></table></figure>

<h3 id="输出内容选项"><a href="#输出内容选项" class="headerlink" title="输出内容选项"></a>输出内容选项</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">参数：</span><br><span class="line">    <span class="comment">--add-drop-database        在每个数据库创建语句前加上 Drop database 语句</span></span><br><span class="line">    <span class="comment">--add-drop-table        在每个表创建语句前加上 Drop table 语句 , 默认开启 ; 不开启 (--skip-add-drop-table)</span></span><br><span class="line"></span><br><span class="line">    <span class="operator">-</span>n, <span class="comment">--no-create-db        不包含数据库的创建语句</span></span><br><span class="line">    <span class="operator">-</span>t, <span class="comment">--no-create-info    不包含数据表的创建语句</span></span><br><span class="line">    <span class="operator">-</span>d <span class="comment">--no-data            不包含数据</span></span><br><span class="line"></span><br><span class="line">     <span class="operator">-</span>T, <span class="comment">--tab=name            自动生成两个文件：一个.sql文件，创建表结构的语句；</span></span><br><span class="line">                             一个.txt文件，数据文件，相当于<span class="keyword">select</span> <span class="keyword">into</span> outfile  </span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">示例 ： </span><br><span class="line">    mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p2143 db01 tb_book <span class="comment">--add-drop-database --add-drop-table &gt; a</span></span><br><span class="line"></span><br><span class="line">    mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p2143 <span class="operator">-</span>T <span class="operator">/</span>tmp test city</span><br></pre></td></tr></table></figure>

<h2 id="mysqlimport-source"><a href="#mysqlimport-source" class="headerlink" title="mysqlimport/source"></a>mysqlimport/source</h2><p>mysqlimport 是客户端数据导入工具，用来导入mysqldump 加 -T 参数后导出的文本文件。</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqlimport [options]  db_name  textfile1  [textfile2...]</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqlimport <span class="operator">-</span>uroot <span class="operator">-</span>p2143 test <span class="operator">/</span>tmp<span class="operator">/</span>city.txt</span><br></pre></td></tr></table></figure>

<p>如果需要导入sql文件,可以使用mysql中的source 指令 : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">source <span class="operator">/</span>root<span class="operator">/</span>tb_book.sql</span><br></pre></td></tr></table></figure>

<h2 id="mysqlshow"><a href="#mysqlshow" class="headerlink" title="mysqlshow"></a>mysqlshow</h2><p>mysqlshow 客户端对象查找工具，用来很快地查找存在哪些数据库、数据库中的表、表中的列或者索引。</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqlshow [options] [db_name [table_name [col_name]]]</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- count        显示数据库及表的统计信息（数据库，表 均可以不指定）</span></span><br><span class="line"></span><br><span class="line"><span class="operator">-</span>i            显示指定数据库或者指定表的状态信息</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询每个数据库的表的数量及表中记录的数量</span><br><span class="line">mysqlshow <span class="operator">-</span>uroot <span class="operator">-</span>p2143 <span class="comment">--count</span></span><br><span class="line"></span><br><span class="line">#查询test库中每个表中的字段书，及行数</span><br><span class="line">mysqlshow <span class="operator">-</span>uroot <span class="operator">-</span>p2143 test <span class="comment">--count</span></span><br><span class="line"></span><br><span class="line">#查询test库中book表的详细情况</span><br><span class="line">mysqlshow <span class="operator">-</span>uroot <span class="operator">-</span>p2143 test book <span class="comment">--count</span></span><br></pre></td></tr></table></figure>

<h1 id="Mysql日志"><a href="#Mysql日志" class="headerlink" title="Mysql日志"></a>Mysql日志</h1><p>在任何一种数据库中，都会有各种各样的日志，记录着数据库工作的方方面面，以帮助数据库管理员追踪数据库曾经发生过的各种事件。MySQL 也不例外，在 MySQL 中，有 4 种不同的日志，分别是错误日志、二进制日志（BINLOG 日志）、查询日志和慢查询日志，这些日志记录着数据库在不同方面的踪迹。</p>
<h2 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h2><p>错误日志是 MySQL 中最重要的日志之一，它记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，可以首先查看此日志。</p>
<p>该日志是默认开启的 ， 默认存放目录为 mysql 的数据目录（var/lib/mysql）, 默认的日志文件名为  hostname.err（hostname是主机名）。</p>
<p>查看日志位置指令 ： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;log_error%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1553993244446.png" alt="1553993244446"></p>
<p>查看日志内容 ： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -f &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;xaxh-server.err</span><br></pre></td></tr></table></figure>

<p><img data-src="1553993537874.png" alt="1553993537874"></p>
<h2 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>二进制日志（BINLOG）记录了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句，但是不包括数据查询语句。此日志对于灾难时的数据恢复起着极其重要的作用，MySQL的主从复制， 就是通过该binlog实现的。</p>
<p>二进制日志，默认情况下是没有开启的，需要到MySQL的配置文件中开启，并配置MySQL日志的格式。 </p>
<p>配置文件位置 : /usr/my.cnf</p>
<p>日志存放位置 : 配置时，给定了文件名但是没有指定路径，日志默认写入Mysql的数据目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#配置开启binlog日志， 日志的文件前缀为 mysqlbin -----&gt; 生成的文件名如 : mysqlbin.000001,mysqlbin.000002</span><br><span class="line">log_bin&#x3D;mysqlbin</span><br><span class="line"></span><br><span class="line">#配置二进制日志的格式</span><br><span class="line">binlog_format&#x3D;STATEMENT</span><br></pre></td></tr></table></figure>

<h3 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h3><p><strong>STATEMENT</strong></p>
<p>该日志格式在日志文件中记录的都是SQL语句（statement），每一条对数据进行修改的SQL都会记录在日志文件中，通过Mysql提供的mysqlbinlog工具，可以清晰的查看到每条语句的文本。主从复制的时候，从库（slave）会将日志解析为原文本，并在从库重新执行一次。</p>
<p><strong>ROW</strong></p>
<p>该日志格式在日志文件中记录的是每一行的数据变更，而不是记录SQL语句。比如，执行SQL语句 ： update tb_book set status=’1’ , 如果是STATEMENT 日志格式，在日志中会记录一行SQL文件； 如果是ROW，由于是对全表进行更新，也就是每一行记录都会发生变更，ROW 格式的日志中会记录每一行的数据变更。</p>
<p><strong>MIXED</strong></p>
<p>这是目前MySQL默认的日志格式，即混合了STATEMENT 和 ROW两种格式。默认情况下采用STATEMENT，但是在一些特殊情况下采用ROW来进行记录。MIXED 格式能尽量利用两种模式的优点，而避开他们的缺点。</p>
<h3 id="日志读取"><a href="#日志读取" class="headerlink" title="日志读取"></a>日志读取</h3><p>由于日志以二进制方式存储，不能直接读取，需要用mysqlbinlog工具来查看，语法如下 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqlbinlog log-file；</span><br></pre></td></tr></table></figure>

<p><strong>查看STATEMENT格式日志</strong> </p>
<p>执行插入语句 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_book <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Lucene&#x27;</span>,<span class="string">&#x27;2088-05-01&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>查看日志文件 ：</p>
<p><img data-src="1554079717375.png" alt="1554079717375"></p>
<p>mysqlbin.index : 该文件是日志索引文件 ， 记录日志的文件名；</p>
<p>mysqlbing.000001 ：日志文件</p>
<p>查看日志内容 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqlbinlog mysqlbing<span class="number">.000001</span>；</span><br></pre></td></tr></table></figure>

<p><img data-src="1554080016778.png" alt="1554080016778"></p>
<p><strong>查看ROW格式日志</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#配置开启binlog日志， 日志的文件前缀为 mysqlbin <span class="comment">-----&gt; 生成的文件名如 : mysqlbin.000001,mysqlbin.000002</span></span><br><span class="line">log_bin<span class="operator">=</span>mysqlbin</span><br><span class="line"></span><br><span class="line">#配置二进制日志的格式</span><br><span class="line">binlog_format<span class="operator">=</span><span class="type">ROW</span></span><br></pre></td></tr></table></figure>

<p>插入数据 :</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_book <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;SpringCloud实战&#x27;</span>,<span class="string">&#x27;2088-05-05&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如果日志格式是 ROW , 直接查看数据 , 是查看不懂的 ; 可以在mysqlbinlog 后面加上参数 -vv  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqlbinlog <span class="operator">-</span>vv mysqlbin<span class="number">.000002</span> </span><br></pre></td></tr></table></figure>

<p><img data-src="1554095452022.png" alt="1554095452022"></p>
<h3 id="日志删除"><a href="#日志删除" class="headerlink" title="日志删除"></a>日志删除</h3><p>对于比较繁忙的系统，由于每天生成日志量大 ，这些日志如果长时间不清楚，将会占用大量的磁盘空间。下面我们将会讲解几种删除日志的常见方法 ：</p>
<p><strong>方式一</strong> </p>
<p>通过 Reset Master 指令删除全部 binlog 日志，删除之后，日志编号，将从 xxxx.000001重新开始 。</p>
<p>查询之前 ，先查询下日志文件 ： </p>
<p><img data-src="1554118609489.png" alt="1554118609489"></p>
<p>执行删除日志指令： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Reset Master</span><br></pre></td></tr></table></figure>

<p>执行之后， 查看日志文件 ：</p>
<p><img data-src="1554118675264.png" alt="1554118675264"></p>
<p><strong>方式二</strong></p>
<p>执行指令 <code> purge  master logs to &#39;mysqlbin.******&#39;</code> ，该命令将删除  <code> ******</code> 编号之前的所有日志。 </p>
<p><strong>方式三</strong></p>
<p>执行指令 <code> purge master logs before &#39;yyyy-mm-dd hh24:mi:ss&#39;</code> ，该命令将删除日志为 “yyyy-mm-dd hh24:mi:ss” 之前产生的所有日志 。</p>
<p><strong>方式四</strong></p>
<p>设置参数 –expire_logs_days=# ，此参数的含义是设置日志的过期天数， 过了指定的天数后日志将会被自动删除，这样将有利于减少DBA 管理日志的工作量。</p>
<p>配置如下 ： </p>
<p><img data-src="1554125506938.png" alt="1554125506938"></p>
<h2 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h2><p>查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的SQL语句。<br>默认情况下， 查询日志是未开启的。如果需要开启查询日志，可以设置以下配置 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#该选项用来开启查询日志 ， 可选值 ： 0 或者 1 ； 0 代表关闭， 1 代表开启 </span><br><span class="line">general_log&#x3D;1</span><br><span class="line"></span><br><span class="line">#设置日志的文件名 ， 如果没有指定， 默认的文件名为 host_name.log </span><br><span class="line">general_log_file&#x3D;file_name</span><br></pre></td></tr></table></figure>

<p>在 mysql 的配置文件 /usr/my.cnf 中配置如下内容 ： </p>
<p><img data-src="1554128184632.png" alt="1554128184632"></p>
<p>配置完毕之后，在数据库执行以下操作 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_book;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_book <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">update tb_book <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;lucene入门指南&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_book <span class="keyword">where</span> id <span class="operator">&lt;</span> <span class="number">8</span>;</span><br></pre></td></tr></table></figure>

<p>执行完毕之后， 再次来查询日志文件 ： </p>
<p><img data-src="1554128089851.png" alt="1554128089851"></p>
<h2 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h2><p>慢查询日志记录了所有执行时间超过参数 long_query_time 设置值并且扫描记录数不小于 min_examined_row_limit 的所有的SQL语句的日志。long_query_time 默认为 10 秒，最小为 0， 精度可以到微秒。</p>
<h3 id="文件位置和格式"><a href="#文件位置和格式" class="headerlink" title="文件位置和格式"></a>文件位置和格式</h3><p>慢查询日志默认是关闭的 。可以通过两个参数来控制慢查询日志 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 该参数用来控制慢查询日志是否开启， 可取值： <span class="number">1</span> 和 <span class="number">0</span> ， <span class="number">1</span> 代表开启， <span class="number">0</span> 代表关闭</span><br><span class="line">slow_query_log<span class="operator">=</span><span class="number">1</span> </span><br><span class="line"></span><br><span class="line"># 该参数用来指定慢查询日志的文件名</span><br><span class="line">slow_query_log_file<span class="operator">=</span>slow_query.log</span><br><span class="line"></span><br><span class="line"># 该选项用来配置查询的时间限制， 超过这个时间将认为值慢查询， 将需要进行日志记录， 默认<span class="number">10</span>s</span><br><span class="line">long_query_time<span class="operator">=</span><span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="日志的读取"><a href="#日志的读取" class="headerlink" title="日志的读取"></a>日志的读取</h3><p>和错误日志、查询日志一样，慢查询日志记录的格式也是纯文本，可以被直接读取。</p>
<p>1） 查询long_query_time 的值。</p>
<p><img data-src="1554130333472.png" alt="1554130333472"></p>
<p>2） 执行查询操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, title,price,num ,status <span class="keyword">from</span> tb_item <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="1554130448709.png" alt="1554130448709"></p>
<p>由于该语句执行时间很短，为0s ， 所以不会记录在慢查询日志中。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_item <span class="keyword">where</span> title <span class="keyword">like</span> <span class="string">&#x27;%阿尔卡特 (OT-927) 炭黑 联通3G手机 双卡双待165454%&#x27;</span> ;</span><br></pre></td></tr></table></figure>

<p><img data-src="1554130532577.png" alt="1554130532577"></p>
<p>该SQL语句 ， 执行时长为 26.77s ，超过10s ， 所以会记录在慢查询日志文件中。</p>
<p>3） 查看慢查询日志文件</p>
<p>直接通过cat 指令查询该日志文件 ： </p>
<p><img data-src="1554130669360.png" alt="1554130669360"></p>
<p>如果慢查询日志内容很多， 直接查看文件，比较麻烦， 这个时候可以借助于mysql自带的 mysqldumpslow 工具， 来对慢查询日志进行分类汇总。 </p>
<p><img data-src="1554130856485.png" alt="1554130856485"></p>
<h1 id="Mysql复制"><a href="#Mysql复制" class="headerlink" title="Mysql复制"></a>Mysql复制</h1><h2 id="复制概述"><a href="#复制概述" class="headerlink" title="复制概述"></a>复制概述</h2><p>复制是指将主数据库的DDL 和 DML 操作通过二进制日志传到从库服务器中，然后在从库上对这些日志重新执行（也叫重做），从而使得从库和主库的数据保持同步。</p>
<p>MySQL支持一台主库同时向多台从库进行复制， 从库同时也可以作为其他从服务器的主库，实现链状复制。</p>
<h2 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h2><p>MySQL 的主从复制原理如下。</p>
<p><img data-src="1.jpg" alt="1554423698190"></p>
<p>从上层来看，复制分成三步：</p>
<ul>
<li>Master 主库在事务提交时，会把数据变更作为时间 Events 记录在二进制日志文件 Binlog 中。</li>
<li>主库推送二进制日志文件 Binlog 中的日志事件到从库的中继日志 Relay Log 。</li>
<li>slave重做中继日志中的事件，将改变反映它自己的数据。</li>
</ul>
<h2 id="复制优势"><a href="#复制优势" class="headerlink" title="复制优势"></a>复制优势</h2><p>MySQL 复制的有点主要包含以下三个方面：</p>
<ul>
<li>主库出现问题，可以快速切换到从库提供服务。</li>
<li>可以在从库上执行查询操作，从主库中更新，实现读写分离，降低主库的访问压力。</li>
<li>可以在从库中执行备份，以避免备份期间影响主库的服务。</li>
</ul>
<h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="master"><a href="#master" class="headerlink" title="master"></a>master</h3><p>1） 在master 的配置文件（/usr/my.cnf）中，配置如下内容：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#mysql 服务ID,保证整个集群环境中唯一</span><br><span class="line">server<span class="operator">-</span>id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line">#mysql binlog 日志的存储路径和文件名</span><br><span class="line">log<span class="operator">-</span>bin<span class="operator">=</span><span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>mysqlbin</span><br><span class="line"></span><br><span class="line">#错误日志,默认已经开启</span><br><span class="line">#log<span class="operator">-</span>err</span><br><span class="line"></span><br><span class="line">#mysql的安装目录</span><br><span class="line">#basedir</span><br><span class="line"></span><br><span class="line">#mysql的临时目录</span><br><span class="line">#tmpdir</span><br><span class="line"></span><br><span class="line">#mysql的数据存放目录</span><br><span class="line">#datadir</span><br><span class="line"></span><br><span class="line">#是否只读,<span class="number">1</span> 代表只读, <span class="number">0</span> 代表读写</span><br><span class="line">read<span class="operator">-</span><span class="keyword">only</span><span class="operator">=</span><span class="number">0</span></span><br><span class="line"></span><br><span class="line">#忽略的数据, 指不需要同步的数据库</span><br><span class="line">binlog<span class="operator">-</span>ignore<span class="operator">-</span>db<span class="operator">=</span>mysql</span><br><span class="line"></span><br><span class="line">#指定同步的数据库</span><br><span class="line">#binlog<span class="operator">-</span>do<span class="operator">-</span>db<span class="operator">=</span>db01</span><br></pre></td></tr></table></figure>

<p>2） 执行完毕之后，需要重启Mysql：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">service mysql restart ；</span><br></pre></td></tr></table></figure>

<p>3） 创建同步数据的账户，并且进行授权操作：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;192.168.192.131&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;itcast&#x27;</span>;    </span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p>4） 查看master状态：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> master status;</span><br></pre></td></tr></table></figure>

<p><img data-src="1554477759735.png" alt="1554477759735"></p>
<p>字段含义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File : 从哪个日志文件开始推送日志文件 </span><br><span class="line">Position ： 从哪个位置开始推送日志</span><br><span class="line">Binlog_Ignore_DB : 指定不需要同步的数据库</span><br></pre></td></tr></table></figure>

<h3 id="slave"><a href="#slave" class="headerlink" title="slave"></a>slave</h3><p>1） 在 slave 端配置文件中，配置如下内容：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mysql服务端ID,唯一</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定binlog日志</span></span><br><span class="line"><span class="meta">log-bin</span>=<span class="string">/var/lib/mysql/mysqlbin</span></span><br></pre></td></tr></table></figure>

<p>2）  执行完毕之后，需要重启Mysql：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">service mysql restart；</span><br></pre></td></tr></table></figure>

<p>3） 执行如下指令 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span> <span class="string">&#x27;192.168.192.130&#x27;</span>, master_user<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>, master_password<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>, master_log_file<span class="operator">=</span><span class="string">&#x27;mysqlbin.000001&#x27;</span>, master_log_pos<span class="operator">=</span><span class="number">413</span>;</span><br></pre></td></tr></table></figure>

<p>指定当前从库对应的主库的IP地址，用户名，密码，从哪个日志文件开始的那个位置开始同步推送日志。</p>
<p>4） 开启同步操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> slave;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> slave status;</span><br></pre></td></tr></table></figure>

<p><img data-src="1554479387365.png" alt="1554479387365"></p>
<p>5） 停止同步操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure>

<h3 id="验证同步操作"><a href="#验证同步操作" class="headerlink" title="验证同步操作"></a>验证同步操作</h3><p>1） 在主库中创建数据库，创建表，并插入数据 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database db01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">user</span> db01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">    id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    sex <span class="type">varchar</span>(<span class="number">1</span>),</span><br><span class="line">    <span class="keyword">primary</span> key (id)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id,name,sex) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id,name,sex) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Trigger&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id,name,sex) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Dawn&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>2） 在从库中查询数据，进行验证 ：</p>
<p>在从库中，可以查看到刚才创建的数据库：</p>
<p><img data-src="1554544658640.png" alt="1554544658640"></p>
<p>在该数据库中，查询user表中的数据：</p>
<p><img data-src="1554544679538.png" alt="1554544679538"></p>
<h1 id="综合案例（Java没看）"><a href="#综合案例（Java没看）" class="headerlink" title="综合案例（Java没看）"></a>综合案例（Java没看）</h1>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-04</title>
    <url>/2023/04/05/2023-04/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="49a524a46ee928b15b84fec2a726a8dd904c4a8ec215cab1ff2b3598e32afb6c">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7f38719e88d8d7a5082f0e85f17f9cecbe7a8ed694bc5b484a55f75b64815dedc20c33569eb445d7bed157625a0aa4538a27588de341c4fbb5a0adfebbbabfa95700d0f94fbde46de7704ad66ae53202f1b91fa86dd6918223baa448a060255a7725b6706515a111b12e8796b601a0d242918cfff8886738a0efd96624546e0043b549b0437535bfa5a9b2ec0a322759d5a54ca0c05cfea165c473e45951155a28bd1ea6f47b1d3d778f825866489eaf550a358032c052b7e078074f33f860cfbac498436c61e9e76dcad4662bdb9ced7f89a0c90e2133ab40a935b3db1ba22e6c4b6f32010ac23c722a296d01aa4c4d2cd192436a4f094a612cde320dc94eef77b8d360677e234a7db26f5819a738a54a7abd4495e25a4178217b66c68449bbee40393ee959c1dfcec644b20f7a3ce963669206e14e3955d12ab8087c40c377c2b57bfc6f3223725dc9d04597a12ae55ce6e8be93aaa870223259abdcb9ce56197c74d0aa52cbc903a58db0123a4f4585df38ad7c27b2fb419638f17a5a371a7a177f10b4144f2378e1d548fe7c89eac7ca820b3c78d498997a27c705deb940f4b006659dc53c223486f527b92265a85d60b908a23a6299f2bc0d0673bb5e586d8aa8cdec5df47501cc42b49c5822747ac175e6fd8afb5cc17e1b982023e93e3a0b73c05763de26713a181769eef62dab290b48cd5ba6f52f5d28a0203b3a6ed2dae6491934880c7ba4bca0393e4c3ff583fe4dc94d2d4566e4a62404b7c2c5496728c65f821f753176259c9cde7d077884bec6ac88319614571bbc511ee14cccdabb5b5533efc6cf4a045aa50285ffc0041d61b8dfc8e08bd4d9a1167b636211ede5a3bf3d1b1b256f2a8fc02d6b2d844dd8aa02d729d837dfbfebf852d8bab0ed3cb0eef4317029d74a8d6e1a96579b884155d7f95544df21ec5a3816c15b77a75bce5fd3c9e2419dff2226da9b124ada950bef801988aee1058c8c75b53bcbfb29eea71280dfe05a7f0b4d4bec198be9d5439678583c031a87764ce14202502723710e2b05a9c59a738a7d1cf8bc471553c022aa758b70cd727143ebbd1b8cdd11567e8ba660f9f891ecb4d8e77b5fa1a8d59e3f82e7550dcfa83de8c3844fb731cf8fb1201d8c29e4cace0afbdb487e67a44d4c7f7b3e6c9b01f1a579f2321acd836ab59e1706358d8a58526680d512736428a5b805109ab11913f7f5e07373afb7629af504ff13f24851080e8a30cf263ce75651b64b94ed1ee40822251779d30b98439bc4f828551b83fc816df324bca5f2addae28f876628d2a268afd60e33c0fbb8c36d6c1c0f84612a837f54a678b895b804f308323af34db6cb55f012015d42d2cc48fd85a3eaed45623e8f937655bd0ea72126e8b14ccb4fa67e06a5f32b59696946dc8bf1c79ea37c37f8991c749f155010c23ee19fe36d9beac4277987fcac850320ff467c3829f8e2c068fb457dd753118a177b2cf2a4074e44163b90343a15ff9ecb4be908fee1ed7644ae2892d64f9e56cedd1587e4779aa7a1700a10d2554c7e8e77fa6b59524279ed0ba783ae0040496321e0cdd2b913ca48dbceba56079832e647926310c19636751b4fa8f08b342e9bb7beeeecbbe6098684e56faabd83a3cdd4033b9bd09cce94893cfb5bdb2fcd7f9c52aeb7ed5377095aaa17df5b7480facaa2f3e527634c66883c231fe4ac2c4113170a07e50cd5f57fff85ec1b0957b0abb4200fe45396a43ae13a6e30876cc62b84925fa93ba8cee0b4d36454ebc2d0df2a47577f30f4479405972837cecc93ad89e481497eb87b96bc3e1b7d3669e709698b984b83729219cb936fc66e9b25e1c58d0026e562ff34e2b55f759960f25963a91e124cff2fb59ea90f38afc9c80628bce76e73d722ea78d3bd8cc54613ecfddb4a8444f55b5101237e440dece52ed55c10b8e228977540e7f569d7d15444447d9294bf086bf35097f1227b465c10015866822fa52f0f46bea7a769adfa092d20721b30163f3f8508027b10ce9e212113704d1918a94c63badea24c9efa4418557eb188f2b30285f735bfbab9a46952250ac72514eb70b256912c4169e110a417aabf0f42f126ccba23c4a1eac0b32fc0ad5f5bbd16957a49cc9097a180d0e5179c3c399de21b6854347c107c552864737c42e2dd197516710d8fef1e313c7a5492dccc8ae0dfc8d01018b253e1eddf9fde5b8d278211c53be4c39ab326e1f10a8c5bb3a5cb155f4399a5159d8ade243734a73bfb90df5b78b661a5363a0a387438f283d26476e0beff5491b4ea15273c2dba68624d16b824c58d77eec4056fe810e757e406168a9d7812675ac71030c2e615365ea0c421c26ec2314fda465a19a0f71cfd4567d569a2c36998623acee9adedc7d0007173956c5fbddc6a1fc47816aed501954134c6a11eccd6bcaf3185c77c5e70f5fc22f6d2c3fda7a7abe6d20b967615a7a99036a5f62d398cb58bf0a2e38a603897b8859251d5fad8bd75d90bf3e7677811c52568993475d7a392d9b44d13b6bbce79114ec6b7fd0c8fa9508e26b3c507c36acb9bc15a4a3ac74cde2ddca9d14b5fb24c5a5707736ec5a3f84dcdd758e405b6260d9abd3f00ea1b802d537a25d700e61264623dbc7102065b7fccf4ddfd7c6cae6f8f020cd6aaf5a296f1b34f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-05</title>
    <url>/2023/05/01/2023-05/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="12725c9b72bf73a6a302db8aa69517341079835649fde790667b067d5b46c347">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7f67dadc996321a626f0d6fe80e446495b506a114c0b98b27f0bde8c3f36774d7314d2e9d77d71513d0998eb57706bef3511b1e0641cf06a2674531d615a218116e6a270e02727743482285f26c5644879a15f2c0214c12a959b5a53ca7f89ca6f5cdbfe993604e9c0cab933fb2c1d1381dcc95a6feed9f10ab74521354abdc96181dd52ae9e70aac33fd2284859f8e75e43536219cf3f99c5322d2eb853194036f6e7f4083209f035e68097ce9f910347e81cc4f29763e099a355a462e2aba7148f3d43fa271c06f12c4df7e9b046a8d4734354618010de04548409fbf94b473a4d1534d965246b07a61dc6879a55c9632bfe4dff2ff766647ce31f660aa6b6db8cba77a0ab4aeab08437f4333ccda52bae37f873d217cbdb01b2b0fe9575c5eb62062f8407e1ece504b788de82126b9fd64bf8060b083774b59d5ef2923687818a449ad24c36358f48b9a92c4a7300580eb4e3ddf04d7db83da7b539c561386d5513e47cd4d613bec9a72b53481335cb5ee034117eb3a159092314b3a2fc04155667d3bf1750d46166a268c591b7cbe42b3815712e46e7047f77142784f5bb0e44cff3cb2bdb28268c6b9e3d504261dab54bb2582bfef63cbd745915f46daf7c8adce284d0a15da2b9ac5a73f1f49c5eb6f638fc32ac3daf4ff7b2ddb7b84720d394677171579eabb1f9b5aaa906d8efb61a880ad1ae3ddf2f483e71040723e9265adbf00f0c4bbb180012c044b66ab3b85145e9923d8ded0689e6d4608e400f54696f2c4b7b352ecd6e7a5faa7b428af9beed23348ab20893aaf9f3b7a8ec756c98bfadc7f71c93ef462677ee0b7e572f5b1b25d175157af223f03fa60dad0f18c44257d8e52b7ea1dfe18ee75a46e2726ed898d5f45ba918ef959d7cfd1cb8930e80f418627c6cfe24fbdd821d1c42f063320b6dd442e1b75887317532f5a7611b54b71abfe92e6c1c51ff13cd7ecb0861c00923b2d3134f4be98981ec44d4965cc53954390cdccaa550378e26c0bf27a9f7f54ad13420059367cc247bf26a293e06aaa5052636567ec420096a389e0686bd7478be9457fb0f9ac602b445d161aed581473d8c4b397e7e8b8779d2225a6e6d0b1222407ccb1711a5dfeabd4fc763670e15ed1bbdd7425e3fe1a12b2827976219a6e4bbd7ce78743d8d49e8d7ee4856ddf6cb17182480566955d8fbbb21f6b6034a0a0b1aa68760597521d31fb285412e8a1f1118f729098c80c66f75adc71b6ceb504cc949d8dcd962b03648d93352bfb09f0da0fdd1c395ef5d69076ea259461e37ecf70f7c98a3f883c7ad8c7c9c8d0f8f02c99457cceba1ecb960a30339fba3b0739659c5a5e7d2d5b44732e53ec7f381a12c2108f3f987f153a8c38b5195944f8710fed30c631f8d44b64cc7a2d6a45b826297a7dc8933e661e30e3ac81be026dac7b9c2856ebb941441a9c6be39f3d18807c3f3f0f2085a9dceef7d94937e088cb5eb343b788c7b7221c4378787d6e1d0f05c18b3b1e87b812d4a501d22e53f4a753c1b869c679c1a47fd81154f78f59d123c574dfbf430a71af8351784c19a49b36d7906bb4be64c5bf8fe6691987a0d2f69c7fb06e70b2532868112b0171ed17bded3911f79babe247537058ca27b1b68b8e936dc562cb43573b325580bdf59076d95e2bb2f0bba7fa698e63d09094d70865fadf71ef6be87e1a471aaabc22a9b495608d8566de6df5310de415aadbe62b3b3995ff34d612b5481096586257c991c4dee60f7a688fbb17c3bec0e0224f240196f14d047fab6f1582e8735ece93d17a52d01c25e2c33b4f573f57498902c075934d7abed3b178bd8d5c7764ceaa4db795ccd90b9534d4d4d6b16688cfc89c46f66003503a133be33094e5369a02aa5e45340555712a9b465b0b9970eff5e3f28195ec0b3f4bd5c58629da931f77a7a7a3e50449054614a91925a458d36cd0b258f2ff9db4ee60c81aa9b985bee02bfb70ed24fc1cbae9b9794e79305c18ad305f1464cfb2b496bafef1064eda4f34786cf0621c3ba324fdc0d88c0b481c45a750226fd22d5a551941897ee76228d7168d9a5145a0bc8a557e32f2cf75aaff8004a900077115413c0be29bec773c393ff2cb7789135b0a9b093341ba568a0c891502f098e89c9fafe2237e42c05c948cfb68f7ba52fad5c5a041ac7fd07c44291e172d8895eec3096c2dea8cb3fa4e3d91c28b98256ff323713210052e68a4e15f97877b24d9a804ae078a87c2e4302360a6d56f341ca4a336d7319dafe5bde79504bf379cbf6127f2b05bc2e22d77b8e05169818b317</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-07</title>
    <url>/2023/07/03/2023-07/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="70e231d69f66cd3b06f10a2fe518087b162de70c964efb74905b75afe95fa9e2">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7fa76ae039386dd7a79fdb68a27563b9cebe7c225edad124f6ad48002870ec6a8d0fa9a3141ebdf123f1b99d06e697189296f4f8106b3d06d380e2dff5acb257980db6f15b0fba665f793878df9564f3d9108d918b5e80c878b5a27898fd390ce22702c69d5c356fb4aa2a1c0e2915947995f0aab64db67b607887a03fe57ae29504c6375acc0c85b4a421e895afd2062752e414ddb18f4132b520e406b65a6abef03a539add2157492a3af4b78dbd889633dff3bc99928c766dcf88c51b85d239b3446e83228eda2c9fc19bf74d3cb180df63423f426fd70a6654d81d3c9ce70d655e6c89769ba83809f18f586e100027c154779cd8f6bc19366135c376c9099c4ccc22b5fb4081025ce834470547084cc441345b0b7c75a8ccec804655e90275c8eed9e3cfb6809e5f6f075d4d4309d7c6040b965248df3ba23a68cf028a3b1da54a5b8a65ea4690570c2be52ba4b10fb2332358b7198cf66b1dedb0749090cdbd4cde5a1f034f20344224c6d3da1a95c361b3c882bba982600eef5788114efd1d39afb30f3d32c4cd11d471a1f37745027fb5aa6acba9c534db3ed55341b899f3957c4727a333a7f418e860c85a718543d105e4a26af00d2ca35eb2d2f83573ce7a870101a47bf873089f682de2ab99eb6079fa0a4dd5401b05870730d0614e7a8c361ed1aa3efb9f672ba94c661a0c6cc7d32eb019523113b623e9c54c7f679c21f2b8f8750d754c2eb35024467087af463431f25f3af4f2df57de07ceb4225b117db0e3d452b401b50978932305db3b5aab84f6cb587c9544dbf3b0b4e6e1bdbe2108de71de98f05a1e697c6b4a7031ebbf4d7853cb68133a3148c7294663ff4caf34a8935a656621bd3f20fe0f0199dc7e42c765b477d7a2e9a3d6e7293653834e8f9f50c331197ae816d478827320a7cb0f5bf8889a9348bc75929d67e9b4d385a8d9e306cc26be8902fc1a7e14ea368747d6c44101d24fc81db339540a13f0dfa6108b46137ba2072351de0df28a8b083c22fade10b5a394c2b128645f972258728f09d61d397f039821dc2ae2d404b79b54f0f60d79688dd81faf3187a2df7a44537dc25cde86e2d1e11b94a145ccfe80a4b1fb38c3939d3c8c552ed9d71bf26466cd57e7182e170d8fdc99f4c57810c1ed5b4aa80c7836716cc15124df989443ee186c9297dfd48380295d6caa8e11d52eabd03b30feba108ddf6ec8daadb578303b77ad5557decc342662b7a5ab4be5ba635bc538fcdb12285aeaec86326317a1cf98aebe3e9f574112f152ae112ba4e6073c342ccd1547a95c075c77156a576356b978fbd369af820f7325263e838fc4184f9b031b0ac24e6bf4b6582498bfb7bcc74e0cb05ad740ffb946ba3b750b1eb6cc450a6de949390653eaef48a9bb5cd9c894038418874233990d25b4f3a1fc8c723c67cad6ab3a22f73c1382af64ada2aa5776782f0029141c7955284551417278909b0e6b90b0eceab56d183c816e5802a65306d6c0c94222528e703327874175cb61a61a4ae7e68365e991702ce48ff6d7818f7c0a1f8918d709fd36a6508663fdcf2131dcd27422a36be0fabb2e3d9500097ed650333cdac7bfe3c298285c220a251c305d6444771219b33162c3cc9f7304dccdf40086b3f5fd604518aa360a5f33eb76886ab7a7f679a1e42081b64f92a3a078c4ef8ed2ff906dc4b9d53ab8fc1bb19cfdd1de664a11b3822addd2d33cc03aef1e6aebd06713a73de2716eeb3974f725a1651580c2b5f1018fab25f7a7e60d4af6b9f608d76e0c6195bb05185149defe08808c779d187fe5a4a2c63d59cf993970887bad78478c29aa563291ee1d10cf1c5e8779ae92f3719b715ceff7e13dbe4cad5e558554a543a7b0b56884e4f38eeced3afb6d4aee723269f9382b6f0d171c4773764a4c8a7d23341412b9443277e8d1df8864dac2ff0206fb66338d654938de85baaa3d239f04711f2991d8038b5ed7c6085edbf7ddbed9ef5b0b9f8bb52f46699da0f995bec2ce1680543bfe4aeafcfce06b5b9861e3b9f8dcfca337fcfc3e320c9a6427d5ef4de19171d0af99ef1f447f3e005e03ffe94ced571335b8848d04fe5fc864e1239b1ba04fce793c29b96e3f9616c480cd1134c108c03a2f7a64f1b6758211dc053086e5a4f1bb5469e758a7e95e8294bec0440b99ac899793f86611c7a3a0207563cc3fc2493c4f9fd73151118eb27c0617d21c9154b8d4dc53ef123c72961a26568bd2006c31c4461262fb0aab71067db3544cc23abd0c9cad5572d3f53806da2a2045d525efbbe44372ca564816456ab574d5634002af130a473ebcc3ca47e207dff18da1004300547ddd96c13ed882179a42745ee725ae8316668c5e590c95ab50d9c6c52e22281827423867f03555feb808714ada8a1dd4fc40d0f83e91bb6a854ec7c7dc169dd87c24c11e75370bbea2fe9427735cd22c7b03e7ebad199958d79a8303c48859cadea83ca0f1c385fe0a1d6a76ac0b255040cd54af163cf5a0c52ef0dc2d55f6bbdb04842640bb19f015ea117e528ffa44f18d3d7e53059538f84dea642525fe8ad67e278139dd548640e022f65873fc033eca268fecb667dfe25916c46c5a91d85fd5abc33c50250da109aec2c125e0c007c161125ad97605f026bbf88ee0aee5782af431a0c3a4b8a09c162fd37db08e9a44dba8e08ff5b89c48ff7952b58552e570324caf2e3ee22c25156d4eb07c6fe6bbb5c317eebf9e41078ee4aa8c7516df673a366b2b61b9b71c04ab11130bca7709cf</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-08</title>
    <url>/2023/08/06/2023-08/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a9bc48dbce35b5cf26e71bb4d9149101a66d3d1a88fdbcaf03d1530a6907aeb3">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7f9bd1434cff03bcf037266e2aaf3189a024e0eb810c26570b1b2920cd5b77249448e8adacd3c071ad6b8fd4fc006fc0114eff1c705a0cd31acc0aeb9c1648819e161284dc5a4f67a351b391ce96ea00da4c5a72a0b9c377b5b9c4a46462e47353c095c9da0f52d6dbf9874b0d46c73cd31af4c9b11c5b3d122fc479f2979b09b3e0ef549a3078250038d7bfbae460c334de4c2ef8c91c30d0d84deaa8a160a4be24efa0718a9c89598074125e9c00e0495229ad73dd4ad2ddcb8f3cb4a941491182674a61a3bb8e8a0ed86871c4cf4dd51c95601b1efbd0731eb840cb6bbb294b5f449e1b0cdc5eaef128daaaaf46043165856b92f4d97ffa4a3aaca2c7f0e124c27fb135fd99d9c23a7bcdc7bd5fc8a6380f20660e7afc250e71a1d2dd6b91ada2e170ed44a73b81e348d36d86744e3eb65ec4c8500867c0f304b2e2eb378a344adf156ea261306044be02a28f3c178bfebf99ce03b2c0ddeb185af2310c8bb9f5b3706f0a1f5108050b3985b84610cd06bee8ce967770405067e036b18fb8462676c7362f08cefa6116c0b7a4fba000647c240149c5cf7eb96180298241f2c699caf6855c04723cc551e8ba0c3e9bd28c7ad415cc0337972c1f6ccf4ce5d93dc84498fc3be600d84bbf3012093ce978f7b8429fb57b7fe53f0fd84884b9891cb14c343ccfa8c5b10985661a888cdf7330eaff6d9cb8fa6c40e36a3000929dbbf291f3cc8d5ab4f9e1390d7596e695953d8077989135dd86279d113ed3d7a6ca020b19e75c151711217d0096211fcf5db5b2adf21e468b653e120ac6c80e49dc8fe870c98916d5dc43e897c18f8520c55f5ec0f4e5c1224a32790e0861bff8064106302b7374523a52ea6565b6eff97256aa9f954f042811af69cb980d158e27a85bf88deb67a4b79d30999345116e9131c901a456ec9ef50135c78f64bc31efbe3b33f3b199a8147d723732447fd581a9480530a7de1df4019bdda39ae9dc861f9e44a53304ed8599bd568c647034ea719906fa63604a2f155addd1ecd4982e3230af9a4555079b72d012d9cca6f75c9d17b539606ba97e51a445089777d5b03310e7dc60fe73b514b1a8c6cb2939670410d7a02cc723489299054dec64c11d32e90f5f2b7f7b00bf54cefaabafe5076bd52c5cd1178cec66957835950b035f2ae92f5ea877c60b2378d09ea8b5667530931e092281a51367ed2b13d127d185d7b2bd73859dcd5ab70a8529b74cc2bfa4cf66d3df47ab195b0cacf6855c5aacd39b6a511e2166818b1b411d1b24cb6f7eb694773e28389b92ab491337edd25584dac38d00c7b73b617c2ebc044fb341102178094eafd32a997d61b9f170c61eb0e81363c6c0cd98ce7ddddeb4b54e8da615c8c8390fa547fbab6a1a44918e60f24c7a744d5754c87755a223d360dc94c6e5dcdd2ef5bc1e83c1a8915d3071f8eeff462737beb6fc372b150de5da4d126de370a24d3b37b12f256a9d733d354afff5243ecab0c80cb10f6e95d337dc4281b0472a67f749db0e3016df929be532eebfe06bed30e9c591919ada27ce30649f3d7c60098c5dce3e5f9e646a49a7c38a5890d2caea828f8177c2f0d57912555066b401ca9829c685c7d0c3fd59ef8d53b84621dec7fa46d11a594e5674f89daaeed95d7f6829492b96e04dbc660f23a0f51be4cce13f08bbc5b8bd7013142fccecebd61be526d1201949c5b107f7f4533274d5d7f766174fa83f769d968dccbd60d184ff5fb18cf6331494564fcba53fa35dde73501aa2c995c89d8fa2e97d7cf8dc253406679103cf79847a232dcc2545036b3f9197366c31ce0ffa67ec7a00fefa9ada5de46bb3ae024e55fb196168d429baf0a3dccb82a28f68e6cabefa9655909a4902e6bb9f5560ee96a38c5d86440a2ca0b9f4de87db8b62316ff228121f47d9f12f506c15486e767ef4b8c90ca39e63ac12a4476301f145dbfcf5e83251dd07345f385511470c11308973e1b9e997046006b95d651b0812cf942dc8346e454ab924c7b9b7af03cc0861a385bf057a2350bd18b5a881070723c6fc864176f850f5286dd9efc7e7d7260807dfb751a408fc973a42478fbe0aee066d538b13269c039000f5bcdfff40997eae0e1d9f1b528da39cbe2a30d5909524220b9e0e54d19ff9059cb68ba5f5f1a2ce99f4873b32790610640edc7382ce475c89ff6db8a466a35a8156331e48ea541f216c6a0591ac8905908253a2db41b9ff43c413c7feec711558689b2a28614b16397bb83959be3cd2494a5933c0a6f93260a82a4d97717a97784947ac49bf7286fd87f10ecd2f94c9f28f58bbb7ee4cdeed795cb87eb5507e77fed97415e2122b9ba04e81853764b3f26e6a23824127913f235fe82feea47b1edaa90234f530e29b587e7af1ecd14f25b7c2412da5cd3838cc2d4a1e4c69a4c51fff0ee10b9eb5d325c17eca383a9a80dbc41705f4b0a11d23ba94ced77dcdd4fb9d1d4df24df97ef753e308bf42f4249f759c808a3802ad26d5e743528a5bfd269f24524ac1a2eea00f99d1bb4498d87e7cf6622c300303be502515600e8d7e0e8e00adaa69031095b2839317b0a1761b2ea1c0955e6efa0d69902686f3cde221166fe9f9a1737e9024d230c98ef438c7a94b78930f7a811bbed02c0d36274ead8c1c146f1e7758859785f0ad7533ed9c34f8c26e211602c9a7be54048655cb6a3ba364bff8f54c7a8476abdd63d6f70e7d364df803ab69f2359ddabedf5015498219f554e4b3defdd3a6f6c431e7acd49dce1c9bccd2f1e52b74f4b1fce14fe2bb62a8cd2ae5d6303748c010001a1d5d4c3314dd9538647d3543c5d18ac46c67d91a4209d847312bb1aab90e1f8208e7bff6d8b01059a2fada31a5b567a4da87d3c2b71549303e8355ee3f6022e8256545a6de5c275402b5e7bbbc616ae76d9b3fe6b6846061d9483b7ef2c7a6deffe684ea0e900da3d8086c42f9cd24145ba9a86568c77a52161e70c9d3588bda4f9e8995f820fb1f72a8272a17351ac01c275ff16d6a9f46a6bdb98f742492feaa047555b7f973e95e1d4215ae645e0fb7489b6cf30dd2cc7fbcc9d684a3470fbda147604233e819ec56ef1febb4fce856fc10a417d8894284047053ecd57fe879c511b7d7bb534132f12ed7d9641136a9e2370ce582b9aa66</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-06</title>
    <url>/2023/06/04/2023-06/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="246a203580132dcf0eafa836ec9c71a372411b550c03eec3ab7f353cf5c06ddb">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7f09c8e22d57eef660c374a03801a22233341e67000d012695e764fb52ae061575264ce8ad98d011cda2a699ea7bcd068b29988d4542843e5184038f2f256b661777c779a3eb28e5c44aa39e04701c0a41310f255e97464228652f3508493ba9f7afc05daf8b19d2d3f6ae3d1f0dde5108f6a731a85c1d0f60a8fb2c42b433444c87082b4cde43b2c771fb126ec501fb081ceb1550bf88597f73bae7d6148226199a52a0be8dd5e7e4fae29ffbddd37aaeb1a723f76f3f670ebf231b10bcaf6d1a48cd6229a14cdeae0aa80f664cf11b564e351a9dec5830e266f914d07b5ae2a25e1f5fce4a7740ca54a7939518b187e678e1dc3252c8905b4fec23625a75f1034d5bfc1aa1570a46895b6fd3d0992ff190130ef07069a548e6edc092a3986447cb584fda39a253a68014be8ee002d4f7a082f8b3a36ed093f074cf883d349acc02da7b24b7145cfb7db6d8774f7a51fb3f2e17adc05e56ec05cce74f96f35102d27ffc6292453a84ae145d4380516af30be86652d4f892d1f5b4d9b3530eb63cedbcb33c9185b5778bd18e69be34aa7459127bb874b323c41e0136fb0713f1768110bbba04965d59d1c80865a7775616284b7a99899c72afe0aed801354f5d9f1a67aa694753bbf95c9e407b0691763fada2173e6cb190e0ba152771268aa763b88f0ce1fc56a8c6ee3342731735edd6fea986c1e46a2200941d1fa9cf8f5ad2e87c8bc863ebdd2dc3878ce67762326c6cf087923088bed70eacb8bc4925d7741268926896251be24fd54a1d9b3c21281971c9c9f5ebc34d0ba50c7c9cf2c76348380773e10eb176a522cab6d38f5bc6a00b30f9aff66519bf86b4e5adf3be3cf63a8712b672545d5421e8fafeca08defc09ef9197eb4800f9efca6645ad1b404f683f09c3bd3df19bf8a69a680890f73d721a8f73a6718cb0c05320962febd0c8035577a2b5cf633279c22a7896a0ee5fbbe319901165b84716b686a6a268e315974e5e4eecbcbffdd7cafbd243a4cf49ac1fdb720326af9f4c9b240b754ecd55a8832e3740a1b01c82dc044effeec584e43c28c8e335b1108026b762ac6b261e4600d81311108706f68fd4cafaa7e1ecb83fff8bf3ac3e17e71d99f10cbf4b661fe9645f6f008d26e1559cffc7160dff73b1c41f859a06fe08220412464fbc948e3794b51cdc0faab91ff306172bf5c81302d103fd3fb12f5d0f59df05e5eaf4d6946f1484eb428fedcc859f472030c94342bffa025c437ce9cc410505b303fb24201c40d77845d43b2852a75530bd954efe7ba6cb2f977a8c26de25ea79bf33538ad4e50f5db7838e16a8fabe2e27cd193fa632d0ffb52417a629c05199eac2464c31d62e4410c1b735926e083fe765e675de0bd7990bf0fe7812ee804d4fb26375e425322e41c92713118347a64cc56894b7527c9fa7397953461f8becd6f19e980e9e5f3523e056407c1a1b1454b97fa51e87850589e2b232c3062d829ed713b30383bb97008921e72c05005e827941518f201827954add157c02d2dbbcd8fd3f7414559a8038bf29dfd451dafc3766b92a95f794353bce66d5801ffebdef759f4c0f31345c797e0a181b368a07c152357428754c2c1f1fc7f5ad0514d3ce1637f1ea6d726e59bf58805e20246e2fd7a91ae15ccae39f1eccf147c9d802294770302cd1ae1e2ae1c07fab1d825e4176e9e5c5f40d861a74fc218825a99454e052217c51485fc30180b882e456eee2aa4e0a97c2601f4bdef1b4c57462f3fd622d428974b561601ee881e812f1db5bb0227f9ae75645fd9d820a22b2380ce4339566f4810a0c960937779e2b364125007c30a0e8371d0aa9958722ab0ecf74fb146261a05fc6312309c9e93a8265f2a303672f0f354f4d6fca1bbebceff8a6364f7a5f90a977f73dd9e2569b88ba0f5b808fc6ec77f2119664e0a1918772bc0ee973e95553c0230e812bd5757087307f3805c564a61e7543362d8d17cc17aca23f0d872fb45f997caf3a96ebc497e61c3738f8b1dc7fc30bb008e32e026051eb0d7b0079aa264a1c5837191f7a3f4d7596b8b3ec29538f233dd3a52175c7b3745dccf2f984509cb4f2a174aa6b4d2752785d64c80d113646d037620f32436d62649e329ac7b62c1d3e10c5d41ce3401bfa68bd9213a76520d38dda8375e8d559d5861da092d5a62078392d8af157a66a18435181a4abc8a242bd45cdb85578652cba4b828209c49e8bbafb3c1a4772229cdb16c6e2085b47fe263f19f66e81eb393f38a2652f18f286bd95137aaff9f6531726e68ea1c683c1399e9923f114783c64329a5ede568ff8ae33407873c61b0a1c5d1435ad2af42cb47d22d86904fc469688bad1019bf524c280037d0aab01663413d9b6408c4d79ef0da2885a32a32e92f57679b560efb0da90e33191c9cf217bf0d9618c7ffa587c6c37733b0c211acc4f027bbe3df21d0722d67fd6162b6d0d5658e39659cf820d38fcdbdb69c503d0a7544b72cc240c2d86620faa0ac66a4597112cd4a529e9b5123dc895861ccf3acc8c1222655c6c3e7f82d323a5abe38d7f2beb6a7c87c863272b76465660ff8b2e541c1fee36a0639119003913e5d103bb5d6f4944c58da9a240ba79</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-10</title>
    <url>/2023/10/03/2023-10/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="691db67512642c928351a30c62ec29eed955fa4c2b701380eff1a71302ae2f9e">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7fa60b20ad9388beaa7a033c8afe071dcd1c3c0ccf7ee38bf5824d3fa6dae0f3859f3680c2ed73d3aa176d33ae3f24de42558ad6f42cf58b2bd20fe98cf420d5c28a0b384c67bbceb82319f66eca57c5cb0ae70dbdc8ae8ae8c7d231a7a31c93fea4159c5c9612ecc2f7df8faf492fa5d8b24bdbbd3a8af1c74a57160c77d0ac2992584d1d9148bff3c91edbcecfd80e49e10db1dac5a054466b41bb74d0c76911fcb0b63e8969cf7cc52d524fc9dd400e02860d4f02f44ccfa95f5ed8dbfdc785c6fb8aefe2643093afb9ca143cf175ed68f75a1af96db8ba82b4c4cc9e51c850cdb0fe08e483f307f63f99b858de58f2d3af2c1acbcce1b01401a29da74ccc303874fb960614dc651ad3753b867fdd3efa639d898f627056189d0741994816a043851591cb622af41aef1b6a41d6afa88b5447c90349298a3f3ea1a11e00be49b2c07e3f236de1bf2b6e789cc9cf57bfcb62466b36ddedd08109b3b834f176862a536ca87de6951ed1f36e186d038cf853ad60a2dc8e45c25e2f692816c4445ab92b78d73fe055d43e413dfea2cac4b31bcd068f9ded590b6f5e402139003076f2a817e7b990df7e2932cccc58dbeb89a859b2cc7bf3e7cb1989b79edc8656578029e688694093221236119bf53754e603deb61ae91b44c5b77c1e88109e99bd40ca61544a6b81a12f5a8a867bd97e848ae84f0c0b9b5b9092fe5b4c82f44784a2b11a322b81af96bcd1d735023ad3df08ea9734cec52ebfcf1e48fa8763037b5ede283fb2e1ab32550a07afa6814a743a66741cc70d56512cdc12159627063fbbd5d64f837e608db35402e4e88270fecb901543bf58366214ea7a61cbdf60d97f2be533d8e8d0cce7143bc4075e959bc48e6248b9321af1b7a3695d5fe601537ebb0351239fb2f99818856b320f386d48d221394b9e8c0e503d5d4f591c2d1912b3a72cb0b572a69144e35bc790b01dfdeac150bb03e2a1de7cce5119611144c77131a8d8f189e7602a67c3e2be7b6f6cfae0def5539bc2ae39c0826e20ccd2b214ca684a69d5b041b3516fbbb78cacd7e30b37f74186108e854fdf2bf92c06515866a43728fb8e73f995e88322e68b53952020e4df55530fa412ae57e785429798081d887cfe84ed4e110aa6f8378fe498e07864e74b183f2d4865c73708153a8f0dec968c30a58bfe99a4e8ab2849e9076d040cd17c8c8cba1d271ca30d65aa5c2429face613a941d664af3466742417cf5b95eef747ba56b0c3b30057027671288859764abfa16c5f6eb494f5457e43463a2b9475ed1fbfb161b977075bee2eef2b9c6dbd0585fd10084f3162015bbe6a71d6b98e022eaf217aa9990fff2305121fa24d75398f7f7935aa8e15d5bf3d5d6ee0b267db7fad0763eda98a6b546cb82719c9e2405db32dcea2531e3243b6b5938a43bb80222261e359927776d70d6b162353f18e1b3ac191ea939c0959ebbedf410eb4e4114637aa786625b3612448d032020a05bfb5c454268ce64043b4f73965523e12297088d80d400241bc52ec08bc3de88888159547a07939042b98d597d9508996bc69fa7103474b8fb1354d9573736fa426f4ddb4ed1bb6b8e5dd8e8954cc5daf261ba9368d0e0bd619ae9e69b565884484114d81175fd80a2b02bbbf7ad9e40ba9875e478c2b32ddfc831268435693a20809ad55dc89c4863b1dad1fe0fbbbf2c2c21c94727243f070e6512601aba78aac4fefa8fd2036764751ef2bbcd75bc6249bd4a0a90157f904ad83ff787766215205e27d937b0486c91c7b1b698236528a9f06ffcaa9e49d29975a0ed8cf71ae83306291f368be8df75afd20e85a9a6e875a9ff2aba9ede5346d581fe0eb664556fe14a7eb9846701c1789c56b626dcc6bf66d2e85221b170fb3581f71ec31018b1d991acaa760f60e1962fb998a7c910ce542e25aecd029159be3b6645db715205c31930ec5a94e98be193afbbe39deb46e9c2972da8d9cec04717594c9d3d04a16a853cd13e1387de41c1f0d8138d920bcd9e6af89c44647338f2632c92c3526e6260ec15c0b85c9587b31c1ce176e3a6a2a2f31993e232cffc3494b3002867fa42ba92397d404b06cb0dedd239038953c334327a56571e45766aef3c1fb678c4c451c89da7a7a95fabde6f2b07f40b1d882a2e033326c7a445ef6f15621395d1a58196702300f75aad5a01af5ac4464d83b0243b59aade629ea2c2601fc76c1ec834325d39b3691da57daa546b91d7ce8ec3f46d94da469c409a2a1bc9b09ca066264e26b65498cfd6e5fd12f90c171c96b3a801b34060d617534f27e4e0f24801e168e948d25d94e19eef8da208ebf16c433eb9fbc66ea587cd2c26db27b2d0e871fbe8241b15fd65b0a70f932c23a255cba5ebecdd5b27ce31c04101d683e6ab3fb8adf9771deebd3e38b9c50183d6d476d784d88788e748e03412b4f97b3fabeee309a84281d5e3ca83b1380de82bf8a238d66923dc9141ed29a54aeefd8dd0a98835d779eb3c406d1a479ba51b231a6550b17d3df45b8ff6dbbb491c224e21f0753eaddf3c4acdd6d116108a4e106e7187ef34bf05e64cf17bf2e9a326603f6664de3d7e2214fae490711f1b0ed65500d6060f1f60883b847c4c9d929c35069f075eaddcff4792a469b8f9170e7b267aaa59ffc36d8cda45265730782629b411b6b0c96efedd531d93d16db02e69304cd35b7667a8db3eec52d40280d05a434e08777ad5713e918a2c1fe6d7d58447335c23a67c06</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-09</title>
    <url>/2023/09/01/2023-09/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9e620ae90c97c1935591cefae4e64de2fdfee2489a9e8edf8815de4418be73f2">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7fef7a76beb5bebd6cff7b595de8abd7020ccb64fec6b8ca48a51df461babe75b9e84ca943865fcf226946fe2df134d55beed1d851a3d767e3d6621a7fbb7ef1b6ef057654db022f1655af216b12c48bbac32bf292ce632b9cbc20d68f12be9583282c40fb79692dc17ef680625d886048e55b64295b3c77e59110cad6a68d4438915c50b5f99846e6145d216ad0fcf9d4804c7a63686609b1229dcf3d021738900e8d1076e5064e4634bf11170f13cc6226819768419b84912f7b5435454c628716dc80362202ed23a386cee3705a6286a5028eb48feab6053d4b0f4897acee6407d888edb6875c74cffa3781bce5e3604de9d48d9e400e1624d9106dec559b8cccecc4aa1a70e5efeee9cbdb81ddae3836e166dcc74b867f5667a49bbc79c40128344f08cd0cb4c67974ad39f480146e3a35a38dbe852422026c3a522ecde4d1f3a63fa62a4fe8059c8cfa667475191a05e555a02dd77e84ed14f7e0e5387040ecb591abc538a9f010c7d685e2e867d9eed26316b5c987dcaf885a4a902c8e4f3444cdf112cd201960b56a1dcb3ec748713e53dddd48ece252a5b1a196461ceb5529b23b2ac5e56ebcda406071ab234335581e523ae3abbfb28e18b9fa00979639e2ac3bea7dacb16b84805c0dbc81cf9cfd05b87d481778142a1c7abf46d74adc40e5af7f881a18e1ea1416fdd059fd2db9a87b8e80c82071720d99331960c2eb8542974d29b5840dad035cc1c638031fe267754053f0a86a77601f7907a0ff472d473082365e3cd7ffbaf54bf56c41454122446470549c6457c1efc48afd174c0d8d818657d35849c796e264a310c3f8caf433b3bbc7becffefe20089058642c646ed7f1238f832ffe290c9addb697b2f310bae30dbfd7ca56a98979f7380728197434034da0338cdad22ef3ba3f072b7e523ef9e18caa2b654940c800645323f1ee8343c704ad44a82e530e698cbce5bb6895c43f8ea7d13d8dcbdf5e3e60cf1163b6f0b6e74f63ae3bf365be529c33c25e2c6bf686280fe6d8e172d6b713aed97e2966070497be75776805c07d4641dcfe942050fc19d59152c381ba0bae037337389f8ca9b38187c3b28680908afd0324cc8efd764eabef8e63c293f8bf411ab555ab1d53faf83f70dec36259f7ad18ad82b986582c1ab13d059835954d7424038b79741b55a2bf8a11fb9551ac26f3278542e4ac4bca36c0c3b45fa7bce7879bb5bc6408fabaaa0b4d66321a1c03ae006b4664bc25cb4512df49c5ebc7c8779d6efe724371289d24c6135faa345d8a06304637b76c2228fc51cf2079d79d7b1eeb857622adac34ac2da55b315c67db0acdb968a15fc31444fc959aa1715e07da312b99a10693a72fed3cb3e1d2987223b8764222d4957b2c7323ddd1e39dad0e1846741db5af876d73126eeadfbcd6ad655e6c072f99245ed30c7797e7ee129ba77e0de63f2451b0bc8ac0996413ea8d78b62580aea926ba7965d1a074d96bec3a44d70b4b33483d3fbb9780c69e72535c86602e45784810eb9b761aa6ebe2801339c8e9acba275e9cce9251d75df7309170250ea7cde6d3e9a6682196b1923fa4b63e0c5cd749c6f4f01406e59f1699b5e4be5ac294a538b56e760341816d45f8eecbe446d5a4a0689e56747c4c95510fc5b2b110a415209d0e13ea30f4828bfa9c2535a59022e7ab23ffa71010cd48081abb7d9e5d3cad7eb2a0e2af468eb5e8976c1f5d281ae92fac616dc8f0ebcbd97c9151692277785c453d94224d25450114737a74e76b32b57999d30d831c47fc2df2bb2c0daab1330a6c13da38be2fa3dcf8b64044a058ef34086ab2b0e5bc6239c08ed635f8090daec53c508a167c2bf0774f90cf9156255457e7f8ced686162ea4f5cdfb27c755776d1f3c2433c39d4870079f08ee277e51d5f78e347b1248355ed33bb43b6afea508c7d0b4269d46825e6f9d28f47dd990c1cb4b010d96ce0226a37d67b88d81bc08361d0be7084fa4cdb7b1b872924c86b1d29f210dae9e5353f506a6c9d4a92cf566928c8c5d8bb2325f8bf1816aea2e12b6ccb5690bf7ba02345898c024947dfce22a215b17f6e3f5e31445040889cf6e220fb14acfe15020cd2d5099432dd0c8daf43a23b4d03453fb339ae4026444a19929a8bbb414236207a16aa701385e54b7804932a370c4de42f36739d7232208d8e5983305629749ba7e27a0df980e5249db637d7602192670f221efedaa5b60d9cbaba54c7968d469074a9fa6336f5f7ff7534cdbf9af2cd58850ca477e81946d48bb475a19ced6be24431122d55fbe41a1be52ff9b860be735b317a2da95b373cd9568796e87b301d81cd0fa9ea3b8a7e875da666bccc7b08cee4812d089a8198eb8d7f5ff745421285ad12907b00b1c6fc1cae4416c9a1c7368b0d3b9b0c9d16538141cdda0918b97ed2d514aacbc8056739bc672cf8fb27a05b1fdc88afe064a3fb2655fa5f55c84b0c450567ba43f6c25fa6c4a4f717d2d2092d2a5eacf7ab67140680e2d16d4431d4dd8e4e7930d28f24f119be07fb6cb3401cf56804937ee</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-11</title>
    <url>/2023/11/02/2023-11/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="30a3e450b25c37397726d2947852213799724a141a586a762058ba1acd1412c4">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7f0486a1643e4a7ec974f7984fced7729cabaebedcb24f28b5e2d51d71df702d9383baf12223a792c7a69d917825e48ed0b874b7f0a487be690fb94fcfe57b5feac07d1dbe188ccd41527e63787133d8c52822d4bf2a4bf78be518ac4e0481b58a975e19a6ec7295d8534de9ee2bdaa2a4c77832684452ebb65b2597a0fc96640e46c2d54f00bc5170168b4ce78c79871d470d2a0f03c2735dbf4f4106a5a44a000304a1f81ff7b2c17c2721246dc9f74643bb4341e21e3daba2dc9c522d993cb39cdb92505b62f4b8548d4f53d479c6ad215d385e2e30770dd0789c15740cf0d57a966b28de4a1875fc958b4fd6f546868f3cfeb8ac2ec8dc78970b698a704527891250185cd907f4b5b5b3d3387e124f35c9de5a8d0445540821a7ba0d680d1f2c4cbdc8d865d89c465f2d6f2da651dc0bf861d0e3d21ea66326ee1635e0a79a3813db278391711fa1740adc7bc8d89e186063dbe902a1e443b7593b5858615c64ed1060c482ef33a24ee26296b7eb866444d9c0020f01a761adcb030d42e5efe65a046586a06c345b4dee9a2ddfe616821e295b5ef306395f898de9c241af3f3ac6880d8059d591f1745a7c82603e1f487deb6524d8fb9de13aa1b90c3b3e4f4fa01324fd3faeaf6becce7d9ae78ad1e7420fd205e4ce612e120ecd8ab451688f87817ef8663fe016ba7dd4fdc1c2ff7b1d5d8920f22f9f5fdf8351c9fbb8262a521bfca3acc70502281ea99fd153f5580c130f06b2b121482e6b23ef82e5b4dd57f7da03b5d16ec562f82166f8ce907a3969c1033f3dca01db76a596069ae2f0ad8692090e618a2cdc8915b329f48041315169cd97cb85fce80bafaeb012ac294da6b716578f5edba64cdd75f663f16dd2207ed40ca5f4564491cf98c1cc8052425a21b1a5a06e6227c358acd3645ebe7ae34f90d260c26565d279e599e52ffe22ad3d72c45cfd84c549371610412c615d8ff3fc884275ca2ec08ef4958e8ae9adbbb50cec2c9fcf0caf0d681afd3729a63f5d2bad92c4f7d9d36f10643e85cb242c3b114df44ef04e39bfcb3652ddde0375ab3dc87bb3f65348d48aa7d4995590a35647566a9c2cf3f723dd8e5637b73bd1eff719e5d19ecd277ebd4bc8114e0f941b4959b587698ee098a24781072286686a79dc4ee1d9f0931c231848dfd57faa609dfa69f4851225a0ac090eea22a20054dd11e3f6ed0c4a5a6958ed858f2d3e3ece382436e310dd7dd309e47facb77d7da148eb179c8edc15bf472a3c1c244a38b5861e53b897f5c2b8bed67192f96ace546163349ce25df9eeacdf01b0676488e080d139aaf00a610ebf65201b3f5793a298324a594cdc8e34d26e2e97f20c8cd8825efa029ce0c1f77d18efd85e4f8d963e3675732083cfd19ca5f67faf7049926bd0498cdf84e2cb2b912831306c0e43aa96621e1e10b5b33c2ee43afe2ccad874a8a8003382e55de240df8289e2db1c532566089a82024f70a02a26afee4e6f2c0b23f715d6ad0fbdab35982a8f62d72eb4f1293f0db992a3727dd5ad17f90af1a5eecb80787e1172aa6773ee70c7dd6b7593ddf6f88f990faa50c7c10d41655061ddb73e346f2f630316f5a3c24c4b0a87ce972057130bbf611c0d80408fea16ff2d129b37674c7f6ba5e0347a7b4d5d8ffcdf4f59542cc06782f97b1e6cbf9d19564aa2c65843d3c0b8a5ab0379cfb1c39aea5ec85cc4ab8c94592be7624ed65732d5b44fa488df14b8dc1f80e77bb31d7f3fc6ae8f5f435478538851a95fb8cbb7a4f6324d556cfccc35cb373c304ed7fc1ac5df258a957f7c888b88839e07c61fdddf658ddea1060e135dd9d7764fa14c938a188dd6c582f03c7839410cbb58a9419cbbc0ecfe689ecbc74092fc05597df92bc36ba1de153104dcf472d4b33dfe72a2e392c86e969e4e50d574f3da97fdbf59dd54cc070bdfc18aadec6593dc51ccd52fd52b99ad5d38482b338355d7669b0f23235093cb04f16f8f529e8e54e3c24feaa7c9c7441999e1b6c3bae2d8f205416d6e837d062f4b51e65922763e09a72d62db0711f2d14f8003e18fd4b9b7440ada94228b49b04655cb8526d2831f4ebcef09c85f11cee157b45ba82d0fb01d17b5e9f6da45e45369743f62437565b1d2009f0f4d46bb7b2747ab7ce96c9a41d4fa1b8fabedd7288c34c361456c8cbeb9f4ea3dff02dee5310bdbc65c7a29b29f8a1e7f53def5ec18de02e4f25394b043d2ea09a51a81755a0f542800e3a4c623c49eec069fdfaf4be429dfcd0948927c87a14bb6061d7f9abe1612ffe2a83585d59b45521de5cd95302708db1e12aa3b1515687a497c8f430dfe4b5c09c71d1d26a0908d163c1656971a097bba35dc2737c86c17775db78d6710d1777d0838664d1bbe826b1a916a687709029ef2798f1c73381592917e13065453a7cf0dcec14ad3ea11fc1ea4e9fb09a2ccfd277fbd4a3d6efcc80fdfb4183ec253a814805dce707605f69e1a6e84f4e1a2b10ca601f3fc26f650126681e43223174bbde8686a6482c02a279832a1308cf5e23296ae82cc6e19163f33c33c9bc11bda87eeeb85ed903b0bb81e954a30b1210bffe8f2fbec64216e561569043f1fc3a749f966f7e6ad81120c8dd63ce924a51d6f88e26324a4956c98cd40d25e441291df7737fd9d59a9aff4a33957e4b370857c967f2021f60ad507c5f7237e338f0cef350c407fd93da34ab9a3b041852a3a0874db37712726517d8392b106b36912e127b3eab9910dcf3ca588c2d51c9d285ff093c3af68815ade2d9f48d1ca8825628127b588951e663be41d8af6dbac14fabfcd550272fbed6a8a1823fbf9974ca8ced5b17bc0af32fdd9fe95afd2d97ce11487c07c52ed0ea7189c392acbde4e0f3651ef8ebfd9e347d07c0266458d8633bf21991747cf43e95b016acb071b59da6f1c280b998aadb469ce6aecf33faa518945c1459a5eeded017b7099a9cc3151e8799642cd0545490d5389078f9ebb4b929c5cc4b3e26eb21337a6ec85fc76aac38c34f10ced0b55751f10d2c15367484bcbdeb1e27546dc12a19a46f10c2122dc477500794e7159ea17062bd1dc7392563477f2ec93a031937981bbb53de37c045e11cb5c08eaf647003775f6027b698d12dba6db62aa1ef306b9e93542a0401d8a1fb35f7297a52a208e92c8ef05af76fe6a3dd895aeb7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-12</title>
    <url>/2023/12/02/2023-12/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cbb425a3ba066a51bba0ca708108bf8ed9029a161b8dd3878bdb344b814c960d">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7fd22a66128879a456a3e2ea3c6fb757978764383afafa228043e43209156490ddd26c355e0d4324b2684114fab5f1574a0c0e7fa016bd3de0198b0461897ca7195bbb3b1bd8b596af1f738d9ddca85905f914b606f4ccda1f8bb488330747a11012ae7ec65fe8fc22fceebf2aa254f8dfbe7a213c8ad925a4b85a4c4ada7bfc89db445d9990792c439014c6ab28333bf4afffed3c2498e11785bcf8f71c0a5bff34408b2e25e5a521780aa0070772494ef4fbc9d178fc2d4861a571e61d01a810fa6bb3256211d44b0a4868e6c33f1dd7686dc6a4490aff8159c3cd85e9947bd309f081aee2164fc6615039e540ee5faea5cd6a4cf82b25718adf7ff3daab713b511a8e85eeb81afaf683c47faef2fc92f545407b2a9c81e884464822e8d682e32641f767e9c18ebe7b7558935fe50f221a98ddd224a145fa623553f95deb63f990965b36c5cc8e7b6014f714db2020e49bb5c53f6489b72293338a4c928d38d933de7048fcb687a75f77ca456af1f1c26c50c7b77bcc5e4e008847c35e5237647c9ccc831a575d25c70c2b6b8953a1b83565d3c2a8b2aea2d234920aeea116dacfdb60cf4fba943ef2bc82ff768e4330bf2ad32e978cfae178019a726d8dbd4ce051cecb9cc27f14c504f68c66792ba8f44d33b4ff101bd836c4cf4b1395a707c2d8a2273ab7e9a5642379dc9f7a96ff6cea790120b60e04873451b1150c7ad6c2d72f456a167c60c684f701bb647f3979aa68588a07e142f128a104871ee7936c52d035eb0f314ab12797fd09ba3187cc52b554c62fb43515525f37e57af5444268688c74b20cfdb09be4743d734bd1debd701590fad507297b7d6969700b65f5f05523c24ab0d90a0bbb900db5fd4d5a5dab1032b4f41a3b67c66bebe0c3b439417ec4f439971954d45b21c5ad5788d827a435b860a866b645a3df439ee64a9fbed30f52517de40d079562b3109d34ea5812720073b34826074942919350bf507a8109767e23bddcf53b95ddf1bbe4494d2e2c36011f84918f0cc5a6b5eeebd5b32526442557f2b345c8b22c1f4417ca5b99441ab24744d3378d09e1f4882296d5d527b3a994846a699cd53abca545480a1746371c5061aa02b088101d302c91ed55a21bd5ac3ab6d1cf08b6d516775844bcc6ff52a4432141ca20b18d2074095d6101d596fc70a77c56c72e0520967be886b699d611ffa3b923f9f2eaae7dc6048ca9f6e6f5113648c64646c8c3429cd2ac94b91e16c4b34e2c8d0e69bac72ec4bbe12a7d1db79f35347b801fb5cf11e244b187fcf7489d67b47edfdd4b074be9cf690c8bc0add2eeee1850650b9cac5b409ec809eff5b7df5203514407ad212e9a735354c757f1e23e055a1bc0d90423ac47c0310e7aa17205e5f008cbb67ba04bd09f87c62a955702d768d68cbc4c32875d1fdacaa0fa6feed9c50e2207725102feba62f706fba244dc2598a44fd8b688892f55ff91368110bb738fe6ef842278ce1a8b49c9829753be8f3357661d9398be569b38f8892bdde2b74ba5c21b032e8ed34d929bdf1f04e39df509700c44ef566afe2e1f3d22fb46146524ffab5d169f5f675ddf0650edc20c642fdeb275238e3276082a3352ec95108d0b29dd775fcc0c6e4d197a032f6898bf265eb8a9bc0488a6c2932016620eb5972104c82ae42dc9de0cdecf15837588607a2c6544031fa8f1c983aa49acdb51619aa6dbc797a3fc7ca8605da6e21ee579f969f510364a58a8bc5d23fefe09388fa0edae05b363371230208b936efa1b9a7022050398d7b19151c62d4cc6adbe5b2ba5285307eb13ed6840b6cdc730a78f876ca58f0066d00a1e97b2f9c377c683633b0cf1193ecfb4ae1a77b4516a36dc5b71c430bb6a14a693c1d1d59061296ca3b098937ec8aec884f014302d08bba8c2d66879d31d1cc142d821646cdaeced0b9c7ed8c343a7cc46e6305423f52881fcc12d0b9ea486148217e47cd75ca3869f8422babe7ea1a2f8648931872e136b8c485322d9e70ebf75875985700af255745796f614cfd11f23d15a97669537dd29df0b699dbbc7beff9ddd510ab06a09e13f9b846999aad356eb61b65794d5a3287999e663e9e59f5d6a1800109d67fe3410ef106204864b5ed4ad2b3974555cd3e1bf852e45f488819f3906e57dcd8cbf32aa55a4c7db4db5f7a1fad606d7a9838ff5bedde2ea1212d4c388affa1047bc4641101f0cd8e64099d172bb4ba7c1e816ed81a76a35fc882de35515354259399294702a0bd03dc469c6a0fab8702b9d8e3b4a30ada1f6df6ad962277c7f910bd49363c47bc305ef73bb7e2b840fff45a42981f872d0e0963982cb5c297013d950bf60dc68456994c784898ecd297520ca9b3eb91bf9e4edaec75ae9b6630f802d922bde90f3c591009af5335265e315e10c1ea22adce180d9ce8ef04809b2f258f3f0111d4d74c6c54923599e4766cc16cf8fb00ee245ea9483338040df45d67a1445ffcbf531040ff1e64a7b49d42064ea8f1a9790b9923f37c6e3ce994da604dd8e534a076c5a05c6d17a7b94d0c865365da90efcc21922ac87ae15364b0579a11c44f02cca4e5b47b88c8b719dab5f663d95735169117ed06ac664a3c226a73ac500f4652909109de4c66a6c5b92753b76e627617d79a39d3c3aed93ec33f0567d09c9fa4b2e7022c7a2543fd12fc934b0cb92da6517e591cb9b5a1c803f8922ac35137492a63fe8e4ab43183f36e9cdf89a4219ef3c1929657fb28e0e75703f0056060a1d520eb6bfc0abb3e5710cd299ad5dfb8ab0ac5a56f6a2ed3dacd1288521e763371fe2c2b2358cfdf5d099d01abda83a3355956d374e311439864c0f91af467bcc73d716a88f19a2d76386a822c4a6ab1a72781811d3efbe065f878dc43136b7a9f6cc0076bf8917aad004031db725932113be8d7c438f62ed74bd783c8f0a502174f22f58183c0fbd7887dc4666cbff0590256598d719aaa364f7234bee3b759d1a594d09ba0763d2a4ffcc69caf1cda4b4241940b0e5a5d23054e8695147327579febc0f46ca1c9c0bcd35f19afc7c886b6910fb742ece84e215de4a7b11bae8354b8e16d5fd5fd3dce363589e6d5f69991e6c3ab412016179bc65d0fd1c6edda5bb15ac5cde0d86525d65e2adc60711f9399f799220969930affac115ba0e13ec264bb03a1d68eb3dbeca71d3b7bffac83c9650027427f5a36f702ee1a104ad704b9b9d317f9760cfab4a876448c756f995149549a56415d88d830a281b491f3b0253c534625d101eb28660dc09eb0b60724a3e78f73dcdd29fa7f4fe08b44fa852b8227c67cd8b68beae542e6696a88a2d4c498ddc8b435b05164007acd5826e526eeda49ca7abfde4c8bb4274049044e51d5d54135bf7ac892c287f0f86822fbcfe00c2b4219a0209b3206c7365a71180be2f6498c1a578c7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2023总结</title>
    <url>/2023/12/31/2023%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="回首过去"><a href="#回首过去" class="headerlink" title="回首过去"></a>回首过去</h1><ol>
<li>工具：<pre><code> - 公司电脑装win11
 - 小米13 Ultra发布会和各种测评
 - 持续升级MIUI，刷机，刷澎湃系统
 - 查显卡,暂定6750gre
</code></pre>
</li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>生活：</p>
<pre><code> - 看房签约搬家丽都职工公寓
 - 体检更换驾照
 - 耳鸣去同仁医院，不用治了，补充医疗报销
 - 与璐璐介绍的文秀相亲失败
 - 体检
 - 与即友阿啦三去汽车博物馆，相亲不合适
 - keep锻炼不适合，腰疼
 - 报班游泳，还没学完
 - 与美全见面
 - 夜骑长安街，适合骑车。装副把，骑车扎胎，换内胎
 - 与晶晶相亲不合适
 - 起痘持续看医生
 - 哈尔滨参与婚礼
 - 与晓雪在一起，干饭，做饭，KTV，玩游戏。和晓雪去天津、红螺寺、古北水镇、奥森。给晓雪改简历。查见家长礼物，并购买。未送出被拒收，晓雪与我分手，失恋陷入崩溃，联系do总做咨询，看b站WonderFilm万德影视，写分手复盘，打包她东西
 - 搬家到昌平
 - 摩托车驾照还差3次
 - 晓雪海底捞给我过生日
 - 晓雪送我工学椅
 - 奥莱买羽绒服
 - 整理行李，送晓雪去火车站，是最后一次见面
 - 生病了好几天
 - 动感单车
 - 看雷军个人、武大演讲
 - 与魏超然联系咨询公务员，准备考公回家
</code></pre>
</li>
<li><p>出游：</p>
<pre><code> - 去红螺寺
 - 洛阳三日游，龙门石窟，丽景门小吃街，老君山，中国国花园
 - 景山公园
 - 成都攻略，去成都
 - 查天津看海攻略
 - 玉渡山
 - 和晓雪去天津玩，拍照
 - 红螺寺
 - 奥森
 - 古北水镇
 - 查邮轮，暂时不去 
</code></pre>
</li>
<li><p>购物：</p>
<pre><code> - 手机小米13ultra，无线充，充电头，充电线，自拍杆
 - 电风扇
 - 鞋，衣服
 - 生活日用品
 - 代买空调、手机iQOO
</code></pre>
</li>
<li><p>学习：</p>
<pre><code> - snapseed
</code></pre>
</li>
<li><p>看书：</p>
<pre><code> - 《学会提问》，还需要再看一遍
 - 《亲密关系》看了300页
 - 《新摄影笔记》
 - 《Python工匠：案例、技巧与工程实践》没有看完，今年找时间看完
</code></pre>
</li>
<li><p>看剧：</p>
<pre><code> - 《流浪地球2》
 - 《勿言推理》
</code></pre>
</li>
<li><p>看番：</p>
<pre><code> - 《想要成为影之实力者！》
 - 《在地下城寻求邂逅是否搞错了什么第四季》
 - 《一人之下第五季》
 - 《一念永恒》
 - 《间谍过家家》
 - 《最强阴阳师的异世界转生记》
 - 《想要成为影之实力者！》
 - 《异世界悠闲农家》
 - 《万事屋斋藤到异世界》
 - 《拥有超常技能的异世界流浪美食家》
 - 《转生王女与天才千金的魔法革命》
 - 《英雄王，为了穷尽武道而转生～然后，成为世界最强的见习骑士♀～》
 - 《物之古物奇谭》
 - 《转生贵族的异世界冒险录》
 - 《天国大魔境》
 - 《爱幽的密室》
 - 《熊熊勇闯异世界 第二季》
 - 《关于我转生变成史莱姆这档事 红莲之绊篇》
 - 《刀剑神域进击篇：无星之夜》
 - 《刀剑神域 进击篇：暮色黄昏》
 - 《狐妖小红娘》
 - 《文豪野犬》
 - 《魔道祖师》
 - 《格莱普尼尔》
 - 《其实，我乃最强？》
 - 《身为悲剧始作俑者的最强邪恶BOSS女王为民竭心尽力》
 - 《只有我不存在的城市》
 - 《命运石之门》
 - 《第一序列》
 - 《其实，我乃最强？》
 - 《虽然等级只有1级但固有技能是最强的》
 - 《奇异贤伴 黑色天使》
 - 《僵尸百分百～变成僵尸之前想做的100件事～》
 - 《暴食狂战士》
 - 《香格里拉边境》
</code></pre>
</li>
<li><p>看小说：</p>
<pre><code> - 《蹉跎》、
 - 《爱幽的密室》
 - 《黄金时代》没看完
</code></pre>
</li>
<li><p>打游戏：</p>
<pre><code>- CSGO：c+，购买手套、刀等。buff交易接口docker部署，号被封了。不想再玩了，没意思，等价格回升都卖掉
</code></pre>
</li>
<li><p>工作：</p>
<pre><code>- 面试快手没过
</code></pre>
</li>
</ol>
<h1 id="22年目标达成"><a href="#22年目标达成" class="headerlink" title="22年目标达成"></a>22年目标达成</h1><ol>
<li><p>阅读：10+<br>看了一本吧</p>
</li>
<li><p>学习：每月点一项技能点<br>学了一个snapseed</p>
</li>
<li><p>运动：骑车或健身房，可以考虑把游泳学下，此项预算5k<br>骑车只骑了几次，游泳报班了没上完课</p>
</li>
<li><p>摄影：尝试每天拍照，学习调色，保持学习<br>每月拍照了，拍了很多人像，这目标算完成了</p>
</li>
<li><p>b站：日常拍视频上传，找找方向。<br>每年传了一个照片汇总，这个目标搁置</p>
</li>
</ol>
<h1 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h1><ol>
<li><p>离开北京<br>即使24年开年又变成了独身一人，也会如期启动“逃离北京计划”，为什么用“逃离”这个词，我回顾了一下18年初来到北京，目前即将5年时光，工资在7k涨到15k，有点进步但不多,存款有点不够用，离未来充满希望还差得远。按我性格能力再呆下去也没什么大钱途了，工作至今也没触发过什么重大事件，家乡相对简单平淡的生活大概更适合我吧，北京也来看过了。目前最不满意的就是住房和通勤，回老家马上就能解决。计划2-3年内完成。</p>
</li>
<li><p>考公<br>重点学习准备</p>
</li>
<li><p>脱单<br>走出失恋，继续寻找爱情</p>
</li>
<li><p>摄影<br>继续拍照，继续学习课程</p>
</li>
<li><p>阅读<br>5本书+</p>
</li>
<li><p>控制体重<br>先恢复到130，尝试停留在125，不要有小肚子。把游泳学完。</p>
</li>
<li><p>旅游<br>争取安排至少一次，河山大好，出去走走</p>
</li>
</ol>
]]></content>
      <categories>
        <category>年度总结</category>
      </categories>
      <tags>
        <tag>年度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2024-01</title>
    <url>/2024/01/04/2024-01/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f6e1a4db0e20c613f187b03461b57b50315b366193a129eebe9e9e7c23094f4b">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7fd41145dfc01599192f004d01808470f76ee3f4ed81278d3c714e2511ef939c5642e9a63471bb633cd408eba5e7759b3e7b676a662782a9380b15c3e15436661b99d03e9428416ee8e524d8090392970e77d01a25f6a550a3ff6133ba87206c2fc91a435fb078df12be2e7eaed20a00f96c10e40e59f48b4b305ef6f7e6aeecac49255f277e286b763b8a5821b49b5f78cd4097d728ba1f9c180cab1b15b985afd80e5fdef0a90833f20a6ea77a1919e3402824adc1a8c3d08f644330d1a8df3ea02bf938a8d4de246f362e605a8848ba5f9ca36c2490bbbbfeceb0f9b449d25a60a92f24fc85366d1ad0a80cdfe7337bbf95b4669b7e1d636d269bab9be34734fe3d1f14a03afd568b97a257f0a4886fc4486b98e226e5153622e9066d01adf9096b0536cf7de8cbd3dc0dae2a2ed56a051ff85f3fc1f3a4ebc1b846049d6ce3acf558b3e93ff9af0893f6932c3635ef7310306674c8fed81a478753aa1b4356d32fecd2d9f309cfe9bcee7066f0ecf2b1d6a83607fa1d8afca143e4591c4f2bd88bf59fb28d21de9ac8800a2bff1d31ea5084e14202457dc6460dfb6c420ac62162c2dc7e10217428c04a68df1761115f3d6db05219f60b919e66735df28a4e1ec1f34f4b4daeab7f45ecaea2bc97673fcf1340e1f1843cf1c462493330f48f1b732cbb1c6bb16f45c27bca81a8211a6387f07afff072e133d3952eb16da98f32844b3c62d98e6af95a339dfeca0afdf240ee85c90692e4bd4f77cb8f9b9d6c5aab48697803424fe268cddcdff479a0683c2c0bc6cf7e3c778f66dd564a1fbe42dd001ceff624c3ffc43a536c277ae35a9676c4bfa6475692ec847639817183b6dc2460bea2f011e529c5a441ad9682836112e36236ea3b3ff62238c2eed1d034a7dfd1d2e94e4130ced0904f1e9b2ee2dddf559a2fb6e285b2a37f5ec2745427e80e9983a40043a400d696582fe30034778ff8fb7da266a727eeec420e5b15cdcc82fceff928507e6194aaf025675bb54a83cf21687f4a06188d8a14919f077db98e7df5d7bf8f1097bf4f891446cffe4223cb81c34ecce9d275aa4fac5531bb31a6377c621dff121d4bae53dabdf05df9f0b89361dee15a5a7213b9ba3c3d929e21b94ecd1acf4d78242ac5e885fa15a298b93f65f431cc017eff2d41917af0c38d6001a29c0fcee4b3d3b368baa36cd01c56bff2e3513c1ca88023175053f13722b6dc795e39868c8f7275cc2610e1d21b6e0b3a739166138feac27d5a929a9c069249f88a88b813ca0483ae051681361db2d66cb9117ccccf050dc671ffd9d2455d4c1de7558cd8c18402abb6b818e286baa69b6dd611aba1e86f9b3c97dbd69c384294ca429dc8c6440e488f5c530de4def3ad821380c4313fc346da658ee8f5c1c97b2aa57f1b1f02ef5a55e3ef198b5c602a97fd7c8d6136f06d72cf114def940a89ee05b93a3ec1e2d6573033cc5e809a76697d0d6233957d9ee3f564d2a8fefbdbb4e0ab410eaf1529e1e5ec91bc7554be8b4e3519681d21d041b578015c11a50887e5bfdccd4a5a2c86f44975bee907c361c623e1d14e7371a6063a7e84a545d41d0f8ecbddf30da52fcb983a215170b2fdf78a5fb76ff465cbbf87177ab475f957c93211f173bc83f2bba8d9ece350695c326f12fb285025e467ec284381e2e6e97772f7789d55c0bf9a9c8c91a6f04ff7d4858fe737c3eaee3f4b70a25f441fb3222edc92f470d0464aff078ec97cdbfcb2bfd541d32a6c8d55dbef1c9a171741f202139385a68a1460e08bce54008a3b342a61401bc77b7e670ea14064b04ac9db8841257d2e0550a1d86a5f836ff8e62c525afa1952c70bdc18dd8109ccdf1bb7a6b010b35ec7a7fce243b1e6438295e7da77477c5ecf2dddf9552717d44f9da15f4658277cb5e213c38c2b3b3281656038c6bee9f2bf165db04ba0b3271a795475588a0ecac6235d9fc2697f58ec03f3a7e491b8fc9ecbd6a338da1fc1328b6924d289c5097231cbca937cfa61bf1a9eb764d27e8515ac1ced11fddb39f7ff4873f031bffa14d14dca83b29edccf9705f97ce58ecb75fb2e0ec0eca7f46faed7974cd0fe933e1a55e5ea3f1c838fcd000470df6747c127ef9fa95f4c795f9b43f61638d0fc143661737140d2401c7d9c933bb26109977f82d541d0b8d3fb91fdb16f365b1a839098004123295c62069ba3337a587b12247e4f9d453659cb6d92d08e46371e7469ab06b4fb99b8469dfc7ffc1dd54075933474e96e8df21f387f5c3af8d405767562032843ed222bc84ff3746cfeeff52d36636c1d1e79cf35087eebe1ef72976bd8847ed4ea156ee8a2f80d9baa45b6a4c7dc0837806bb106dc616324cce7ee635e733092416559ab5856800fe1b12456e681d8ec2a70ffe2d163965856aca8f3b62e104673166c28ff7c6aca6c24a042636bdf085bcdff3db0d6df89cb8dc23e5c0089f9861814a4aa948cc30181a9cb3f5b49b984694396fb2407d4580c39e447f76b4cc98283f3dcd482493a5dd669b283e85adb8aa15d7bcd8b90dc62d7e496187283fb3bca6bfe73028a669019951e2b07e006901c1af9fb70943a73cdfc5b578c682191e6e686382cc14808aa3af4755d22d597dca449f102f851a4a10f6fb555f7206b855109ac773b359de251d8118f3f2e4ebaae213d221b03f724ec87d3deae70770156a2f0370f7f28ea984e36a40f31ca574e2795baf5edb7b08cd749e852a4877ed26bb98eefe390a2f31b44040ff75b0e293d28a0450ef3594d7f18f0b72b89d2fc467e6688652fc21a0ca485d4e512b1dd4e397eeaabf8a4108587854ee2c1d03bcf18b0fa52c479a43b3542ccd2fdab6a769b448bca0639d3d9d296f10cf289015239246fddf76f1aa0c5f1e82255fd9ffed9ec046a97133c3b4f58856aeedfe3507294cc0f19872d2bcba1a0173563181ac6001b64a1d136a100cd0f46e8df73426942ffa3b3f4289e24db5ae72b177bad9c4b57b33de00be31e28d1d84b8680ec4f28bd026027383f0106a5c7c22a9f3a084f71a9ec7ff74985b89564fd2178945c72d42d1cbba36935feb7e3786e76e082798bdcf6cb7220f1845c538fdec257fcb24598a6f3b3848283f64ef2f29668e17e0fde7cc6a1b2b82110f3726f084bb2ee83ded4ddd59e1714be14de20c14a96c2d1d23853eeec68fd0833155ca21ef6f0299d130c19aa38c7002af5693d333e352f2c31dac9747b45ed2392a8f6dd38976537975369dfd7baac2b7ef2b172cf8f46b68a161949f7daa774c830a7e8116b41a85e251c812792b96d4b20e1b916eaf36d6577c0f81d824c456d89890796174cc4a06116f31bdadbd7bb544394d8b44feaf9b94cbf3ce299f32079f1243195a35369653dd3a629caee67c70d6f47b1d129faa4d695616ebcb4eb18488ef399a62955e0048b82bab76c5881d09830acd840c40b3d0e520c8595132a88484320c1d1d0cfb41c420d6bad33c2323b8d17e11f41dc1af8178b781a35e1c29906d458f03ff480dbfa3e5d3e8ef134201c92d13028d9e07256dfaff4a7e1427cec101f75fcf045905e3e093d683c26d0130167fb3ce4e0d3eb3d6e060bdcb1791d2c7b6624f1910e79c88d525c43de831e0dba04d360b038dfc54dc48d6ef9a0f8229db3a13ba7ba2b48c402bed3d2df6e190900c055376793b3e02bfc528d472b0d85609d50d79d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2024-02</title>
    <url>/2024/03/01/2024-02/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="327b07e7a4c1fd12a73609cfc19425ee7f4862d5e23c51a3b4b10674d01c7f26">21b5bcc0e4657ce349e1a94ae87ceae177e19bfdd8f117aa27ee9fb5fc3b17b3f8b37f6b40da0d81eb0555adda5d8b08171fdc521fa8de9c5ea080f2959f604df9ac0d04d53e570ceac35b2aa07c53f13bfd8dd6c903c8279af7e0f0ed27c2bcfb2ba222dde9f7eba712ebd6897f9f7f18ff1832ccaea12c4c3cf374b168962ab69a18d7fc2f06b6112701748549019415d99db535e05fd0b7d5f7fef50a282a438e66ee3faaed6801dc798175f1bd9c6214965962cc1b704484f52a368e759473561ad51c39db11c11b4b7ee3fd75d3fa85b08ae46dbfb8c5cc938d6228a6e9a519750feb86e20c00ebe6d29acef42e99a3b9cbc63c2251f5f64cbece5ffa874c85b1443d721a410bf1993e891d645b42a476e1fca79cbebab37639f77396ded75aa69c9d79e0831fbd0ba0ac778f5c81bda660c00c8636d756a7648d820e8f1c4e2dcec12212c0510527aabb63fce91b671d9854fc23bce44d41bbb5fe8df8c4373022e5f487422eb90cf76ecc6e61311bbd4aac135f9cf8f08954ff7ff5f0de4c8792e9567abae40eebdbc1047476f1bb1cf73a7a72135881e5e9472bb9e5c739065f00d16f22071a91c31ca751d7a6c6bd72b4a98dd2f725da0a28ad6ec5b09fd35921f0be01f97391ca019fbb51220e44fb506b7993b51203cec924f82888916a5434ad4b06c91534183ab3d4edb64b1d528413e37d50c73649674aa87567996b758d654e2680bf6adae926012e041dd3ffcf08a5c7012ac3d9be473bfff53a73bbf2e180f068c4879186c615b8c1e8aeb9c048e62df84d3f73db671e07327b9faf5ad85879e9f05cdc7e296d9ac38849cf619bb8df2279ef92808d1147aa0efce2c3d3cf15b17cdf37a013cb850b6a28a3826fa1bc1a14b0314da3ad288dca6c8b98649e6a25819247e3bc0668e998b4288ee00dad7369e1a2a263c8f7b6a8d60f80b83820d7c6d8f1d829bf1f0245dfeb8766cc2c25753af3b57cea6e4d6556fcea1b61766fa2a249c0d64d034ac939a974768a474f7ce6c12d453e0ab266f9c815f2918c235dc55cc5b3f0cae533374afff73c0823f92326d616101b084e6918b8a772bf3058c4de9429f66c121473aed15eb45780ab84b45923d2dd689b62c4048a40cefd06a3675774203e7368bf8d6610fbeac06685eec99506643747670e9dd10882a5c2ef2a77f866a55fecee3e1e66aa40631f04bdfd7284076a85d8fd5c859247e8fc50742db77e3b28356a7ebb36f76a9fe4f33c0ff185e470ccee852a997836eb2f54522fd530a59f06b38b39b5b556e915dc95aa49e88f24e62d55bf6f187fdf3deecfe96741e32d391e4ed3a4d5302e622a72324cbe838aa6aacc9def9b5d97b7108eb87d31d5145a190cfd846c8aeeca451c58ea3d40879fb39fced79e64410926df9ae3b8a6d35a0b07b18067c8b6c0ca25aa2f774956ced115bef2c98b08f3207cdbc2fd475af5f9477783d41d53e08e29900a6f8e74ad61c20d103aac8fd0d83645741f45e1b168c60d07b02e736cba575d670c44adc1cfd704fd42c70d5d3a8266e28ec4f9de0b4b6873b3e95af25d9618e4b5f9c5820b4f3f1e1de0ddea8c2a770dc2ea4b6fe87f4baa5de330d7f09fbfa3492b329871de5edf827e66ced0aee4fb3e521db88f78f123add07f5ffd57844595ff36271b4a69ed13c397dcd8538875d811b790e516baba21f99a812877a4c13775d00fc49ae33ccb0b84ad966a51616d816588a06582500ddf5e8cdf1522d847ce072030edce033764ca052ef7e6b80469b7ce3fb4b346ebb7cee455e105501086626adf09a03d6860750a8dcdba2faa2bfc37ffae158b14f402a164632af83cd0e1beb8ac22c84c3369b01246c449aef90cb4a99e8944d3d0f02e8475935a6853c384f8107dd2dd2041494a8d4f3e2d4ca847ff9b72ad4a86e3ad1a208613a9c66adade6f0ae3b7744fc2eb0e45fcd1002067fdbb075f79270baa91c067631023da6586f394e2bb458d74bd8aac70f8b64a0728f7a2bee0876f707bdfc76ffda7dd8dedfe37ee8292e8ad5892b644f03374f4f3162e50ac4307a9240de3f09d786350b39f498dabd0e44a0cb42eafa5f380672ba8e1cbd556c6f9e0f878bb6968a969a61083784daed816ed4f7adb60220eca2d2a56544ea3f6b9c94253e09510a32910b4151919832e10cd6831f14d0b95a05e66ef846ac5770a3ceda27ecc1acede9a98d8c5c6e5be1f4fd86193ccd126b6a893c94fc3dd80f9a7628c9b4e23b20f3ea59aca95689789738667b3ae2b3e177c56e5a078205ee2b4d6039bede048592244855af3014b22db51f0f1819b0261757b9f8ea5fe723245b017e4daddbd5f06b7d06af035b6a28f8236be3d9831512fc957574ede61dcb5d8e09868ceca3774cdbb40b94926e7739d2e3d7a0115e0564f0d8e4f91ada7132a967e64bbaf9a4249feee250ca3a44006713ff091</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>恋爱咨询记录1</title>
    <url>/2024/02/26/%E6%81%8B%E7%88%B1%E5%92%A8%E8%AF%A2%E8%AE%B0%E5%BD%951/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="bc4e49a9242effc4a28f245a884ff37c531f32442f07837d26281aaae5afb868">6b0ff112cda014b0abcb5717c91f9bf530e1e5195dedc84294402733cdca9cdce6ea4cf0ae77715b8961cb58ae436512db330a53a6e4536264a859295cc615d7b31a3061688fc69b9713ad7ff689b5595eef8148c360f08a1c57cf269a7ff2f329242c0cba9b0183c9128b05ea7d813aa7f404b986fea942df79e135bb2dacdc3419d00a622c5bcf34539adea05ff46f215d0fc4a2b6eb86b390f7828b1cb3aad822968e484337e92c86f3d7eb9a6aed</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>DoDo好想恋爱小组</category>
      </categories>
      <tags>
        <tag>DoDo好想恋爱小组</tag>
      </tags>
  </entry>
  <entry>
    <title>2024-03</title>
    <url>/2024/03/01/2024-03/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="beef10ac475068d04757ca8ed096f96f5ee4b43dc960ae9367a2d5d9104647f8">21b5bcc0e4657ce349e1a94ae87ceae186e7cc54985f1d39672059f87116183b23237508dffa1a06fb5c76a87f9486fcd9f3a4944aeef9326cb0a76b50cd4b6626db6e59ea6c66fd70f5ea9dd07b24283d418cd6a5a27206a5ec6b7153014a5149fd10e625d8468fb1825f38f7e0ad6f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>月度总结</category>
      </categories>
      <tags>
        <tag>月度总结</tag>
      </tags>
  </entry>
</search>
